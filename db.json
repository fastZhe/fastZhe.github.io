{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/2018-07-19-3.png","path":"images/2018-07-19-3.png","modified":1,"renderable":0},{"_id":"source/images/favicon-32x32-me.png","path":"images/favicon-32x32-me.png","modified":1,"renderable":0},{"_id":"source/images/user.jpg","path":"images/user.jpg","modified":1,"renderable":0},{"_id":"source/images/favicon-16x16-me.png","path":"images/favicon-16x16-me.png","modified":1,"renderable":0},{"_id":"source/images/2018-07-19-4.png","path":"images/2018-07-19-4.png","modified":1,"renderable":0},{"_id":"source/images/2018-07-19-2.jpg","path":"images/2018-07-19-2.jpg","modified":1,"renderable":0},{"_id":"source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":0},{"_id":"source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":1,"renderable":0},{"_id":"source/images/2018-07-19-1.jpg","path":"images/2018-07-19-1.jpg","modified":1,"renderable":0},{"_id":"source/images/2018-07-22-1.png","path":"images/2018-07-22-1.png","modified":1,"renderable":0},{"_id":"source/images/internet/2018-8-1-4.png","path":"images/internet/2018-8-1-4.png","modified":1,"renderable":0},{"_id":"source/images/tcp/tcp-fsm.png","path":"images/tcp/tcp-fsm.png","modified":1,"renderable":0},{"_id":"source/images/tcp/tcp-closesimul.png","path":"images/tcp/tcp-closesimul.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-7-28-2-1.png","path":"images/netty_part1/2018-7-28-2-1.png","modified":1,"renderable":0},{"_id":"source/images/tcp/tcp-sack_example.jpg","path":"images/tcp/tcp-sack_example.jpg","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-7-29-2.png","path":"images/netty_part1/2018-7-29-2.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-8-1-11.png","path":"images/netty_part1/2018-8-1-11.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-8-1-8.png","path":"images/netty_part1/2018-8-1-8.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-8-2-2.png","path":"images/netty_part1/2018-8-2-2.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-8-3-1.png","path":"images/netty_part1/2018-8-3-1.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-8-4-2.png","path":"images/netty_part1/2018-8-4-2.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-8-4-3.png","path":"images/netty_part1/2018-8-4-3.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-8-4-4.png","path":"images/netty_part1/2018-8-4-4.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"source/images/designPattern/2018-07-19-4.png","path":"images/designPattern/2018-07-19-4.png","modified":1,"renderable":0},{"_id":"source/images/internet/2018-8-1-2.png","path":"images/internet/2018-8-1-2.png","modified":1,"renderable":0},{"_id":"source/images/mongodb/2018-09-26-01.png","path":"images/mongodb/2018-09-26-01.png","modified":1,"renderable":0},{"_id":"source/images/tcp/2018-07-19-4.png","path":"images/tcp/2018-07-19-4.png","modified":1,"renderable":0},{"_id":"source/images/tcp/tcp-open-close.jpg","path":"images/tcp/tcp-open-close.jpg","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-7-29-1.png","path":"images/netty_part1/2018-7-29-1.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-7-29-3.png","path":"images/netty_part1/2018-7-29-3.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-7-30-3.png","path":"images/netty_part1/2018-7-30-3.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-7-31-1.png","path":"images/netty_part1/2018-7-31-1.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-7-31-7.png","path":"images/netty_part1/2018-7-31-7.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-8-1-10.png","path":"images/netty_part1/2018-8-1-10.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-8-1-15.png","path":"images/netty_part1/2018-8-1-15.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-8-1-16.png","path":"images/netty_part1/2018-8-1-16.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-8-1-17.png","path":"images/netty_part1/2018-8-1-17.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-8-1-7.png","path":"images/netty_part1/2018-8-1-7.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-8-1-6.png","path":"images/netty_part1/2018-8-1-6.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-8-2-5.png","path":"images/netty_part1/2018-8-2-5.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-8-2-7.png","path":"images/netty_part1/2018-8-2-7.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-8-3-4.png","path":"images/netty_part1/2018-8-3-4.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-8-3-6.png","path":"images/netty_part1/2018-8-3-6.png","modified":1,"renderable":0},{"_id":"source/images/designPattern/2018-07-22-1.png","path":"images/designPattern/2018-07-22-1.png","modified":1,"renderable":0},{"_id":"source/images/internet/2018-8-1-1.png","path":"images/internet/2018-8-1-1.png","modified":1,"renderable":0},{"_id":"source/images/internet/2018-8-1-3.png","path":"images/internet/2018-8-1-3.png","modified":1,"renderable":0},{"_id":"source/images/tcp/2018-07-22-1.png","path":"images/tcp/2018-07-22-1.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-7-30-1.png","path":"images/netty_part1/2018-7-30-1.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-7-30-2.png","path":"images/netty_part1/2018-7-30-2.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-7-31-5.png","path":"images/netty_part1/2018-7-31-5.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-8-1-9.png","path":"images/netty_part1/2018-8-1-9.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-8-2-1.png","path":"images/netty_part1/2018-8-2-1.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-8-2-3.png","path":"images/netty_part1/2018-8-2-3.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-8-2-4.png","path":"images/netty_part1/2018-8-2-4.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-8-2-6.png","path":"images/netty_part1/2018-8-2-6.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-8-3-7.png","path":"images/netty_part1/2018-8-3-7.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-8-4-1.png","path":"images/netty_part1/2018-8-4-1.png","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/fireworks.js","path":"js/src/fireworks.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/LICENSE","path":"lib/bookmark/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/README.md","path":"lib/bookmark/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/bookmark.min.js","path":"lib/bookmark/bookmark.min.js","modified":1,"renderable":1},{"_id":"source/images/netty_part1/2018-7-31-3.png","path":"images/netty_part1/2018-7-31-3.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-7-31-6.png","path":"images/netty_part1/2018-7-31-6.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-8-1-12.png","path":"images/netty_part1/2018-8-1-12.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-8-1-5.png","path":"images/netty_part1/2018-8-1-5.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-8-3-2.png","path":"images/netty_part1/2018-8-3-2.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-8-3-3.png","path":"images/netty_part1/2018-8-3-3.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"source/images/tcp/tcp-header01.png","path":"images/tcp/tcp-header01.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-7-31-2.png","path":"images/netty_part1/2018-7-31-2.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-8-1-14.png","path":"images/netty_part1/2018-8-1-14.png","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/HEAD","path":"lib/bookmark/git/HEAD","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/config","path":"lib/bookmark/git/config","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/description","path":"lib/bookmark/git/description","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/index","path":"lib/bookmark/git/index","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/packed-refs","path":"lib/bookmark/git/packed-refs","modified":1,"renderable":1},{"_id":"source/images/tcp/tcp-header02.png","path":"images/tcp/tcp-header02.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-7-31-4.png","path":"images/netty_part1/2018-7-31-4.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-8-1-13.png","path":"images/netty_part1/2018-8-1-13.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"source/images/mongodb/2018-09-26-02.png","path":"images/mongodb/2018-09-26-02.png","modified":1,"renderable":0},{"_id":"source/images/netty_part1/2018-8-3-5.png","path":"images/netty_part1/2018-8-3-5.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/hooks/applypatch-msg.sample","path":"lib/bookmark/git/hooks/applypatch-msg.sample","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/hooks/commit-msg.sample","path":"lib/bookmark/git/hooks/commit-msg.sample","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/hooks/post-update.sample","path":"lib/bookmark/git/hooks/post-update.sample","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/hooks/pre-applypatch.sample","path":"lib/bookmark/git/hooks/pre-applypatch.sample","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/hooks/pre-push.sample","path":"lib/bookmark/git/hooks/pre-push.sample","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/hooks/pre-commit.sample","path":"lib/bookmark/git/hooks/pre-commit.sample","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/hooks/pre-rebase.sample","path":"lib/bookmark/git/hooks/pre-rebase.sample","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/hooks/pre-receive.sample","path":"lib/bookmark/git/hooks/pre-receive.sample","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/hooks/prepare-commit-msg.sample","path":"lib/bookmark/git/hooks/prepare-commit-msg.sample","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/hooks/update.sample","path":"lib/bookmark/git/hooks/update.sample","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/logs/HEAD","path":"lib/bookmark/git/logs/HEAD","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/info/exclude","path":"lib/bookmark/git/info/exclude","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/02/b27223487ca819cf7167dc23626af595112e25","path":"lib/bookmark/git/objects/02/b27223487ca819cf7167dc23626af595112e25","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/0a/9e6b66e9d710a68e08fcc295fca440eabcb4bc","path":"lib/bookmark/git/objects/0a/9e6b66e9d710a68e08fcc295fca440eabcb4bc","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/07/4d4d38a37d506f5db482b5c27ad1143bba5aab","path":"lib/bookmark/git/objects/07/4d4d38a37d506f5db482b5c27ad1143bba5aab","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/refs/heads/master","path":"lib/bookmark/git/refs/heads/master","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/11/8348fe672067e7d9c32c73d586023804eeb565","path":"lib/bookmark/git/objects/11/8348fe672067e7d9c32c73d586023804eeb565","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/0d/61683ea74054da2645effdd51d0a3282d6a9ff","path":"lib/bookmark/git/objects/0d/61683ea74054da2645effdd51d0a3282d6a9ff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/18/77388dd9427b36d7c8703038a215b79f1218c2","path":"lib/bookmark/git/objects/18/77388dd9427b36d7c8703038a215b79f1218c2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/17/ad1e81c2805cc9c5c00846c8bf9bf16524b55a","path":"lib/bookmark/git/objects/17/ad1e81c2805cc9c5c00846c8bf9bf16524b55a","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/16/75d42fcbd2aded2e9b42efe38c347ced893495","path":"lib/bookmark/git/objects/16/75d42fcbd2aded2e9b42efe38c347ced893495","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/1b/db4ff581f77318e6c4783d8e1ce811c37f13bf","path":"lib/bookmark/git/objects/1b/db4ff581f77318e6c4783d8e1ce811c37f13bf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/2b/358da01f778126b38fc4ddf5ecafa625cad38b","path":"lib/bookmark/git/objects/2b/358da01f778126b38fc4ddf5ecafa625cad38b","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/2b/d59834388b6377fd14413f2614f550e35e35f1","path":"lib/bookmark/git/objects/2b/d59834388b6377fd14413f2614f550e35e35f1","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/2f/425e03cfa918b2d638bbd37279a8b1e7757508","path":"lib/bookmark/git/objects/2f/425e03cfa918b2d638bbd37279a8b1e7757508","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/41/bde8ccd130442ef0b3f8b24764a6d72635a485","path":"lib/bookmark/git/objects/41/bde8ccd130442ef0b3f8b24764a6d72635a485","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/3f/30e2e442e4fdc1e91d5d1b642662e3900e5d6f","path":"lib/bookmark/git/objects/3f/30e2e442e4fdc1e91d5d1b642662e3900e5d6f","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/25/42ea91169dbe9da086918ad02160e42310e185","path":"lib/bookmark/git/objects/25/42ea91169dbe9da086918ad02160e42310e185","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/25/b729e9ad0151b51f50297ea35280111b953236","path":"lib/bookmark/git/objects/25/b729e9ad0151b51f50297ea35280111b953236","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/40/b878db5b1c97fc77049537a71bb2e249abe5dc","path":"lib/bookmark/git/objects/40/b878db5b1c97fc77049537a71bb2e249abe5dc","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/42/c32aba927940c9e92b9928dceee88eacbf4874","path":"lib/bookmark/git/objects/42/c32aba927940c9e92b9928dceee88eacbf4874","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/47/1dd1f3ddf970ee3418f801ae787bf98191d47e","path":"lib/bookmark/git/objects/47/1dd1f3ddf970ee3418f801ae787bf98191d47e","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/48/7e5a296eebd45809199d2f557e340603931bad","path":"lib/bookmark/git/objects/48/7e5a296eebd45809199d2f557e340603931bad","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/4a/6e0d94cae4e01312054983b4e2e4007e3fd3b8","path":"lib/bookmark/git/objects/4a/6e0d94cae4e01312054983b4e2e4007e3fd3b8","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/4a/7e8d64b8956ffd9339000e62d490f18dcd3ecd","path":"lib/bookmark/git/objects/4a/7e8d64b8956ffd9339000e62d490f18dcd3ecd","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/4e/7ec652ef197de221d6576a717edf0b583a688a","path":"lib/bookmark/git/objects/4e/7ec652ef197de221d6576a717edf0b583a688a","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/55/31419f7d03a523182be5373e246e43acdf60d7","path":"lib/bookmark/git/objects/55/31419f7d03a523182be5373e246e43acdf60d7","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/58/b257bc636adc71871da51e615e6734c9479f3a","path":"lib/bookmark/git/objects/58/b257bc636adc71871da51e615e6734c9479f3a","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/5f/1541db4b58002e45b9b5fe19426551a8239a49","path":"lib/bookmark/git/objects/5f/1541db4b58002e45b9b5fe19426551a8239a49","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/61/4795cc61f429929887fde3962027254db90a62","path":"lib/bookmark/git/objects/61/4795cc61f429929887fde3962027254db90a62","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/5e/038b5098480c14a29cefd944e3eb23109473b2","path":"lib/bookmark/git/objects/5e/038b5098480c14a29cefd944e3eb23109473b2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/5c/02525c8b55f89f0ec0304cd0d266453bdf0541","path":"lib/bookmark/git/objects/5c/02525c8b55f89f0ec0304cd0d266453bdf0541","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/5c/ffa97fb277e628a550bc1d8f7fa7c5c776129f","path":"lib/bookmark/git/objects/5c/ffa97fb277e628a550bc1d8f7fa7c5c776129f","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/62/150c9d8f54ca62e1af3c9d666bb5e35eb3bdbd","path":"lib/bookmark/git/objects/62/150c9d8f54ca62e1af3c9d666bb5e35eb3bdbd","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/6d/1188177a8798893f9efe275d4d75d0f9301be9","path":"lib/bookmark/git/objects/6d/1188177a8798893f9efe275d4d75d0f9301be9","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/77/d7bbc93f0a411d2e50b7c67a2827dece42727f","path":"lib/bookmark/git/objects/77/d7bbc93f0a411d2e50b7c67a2827dece42727f","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/7e/58471cd13382a6bafd05015cd0a5b5a8e899eb","path":"lib/bookmark/git/objects/7e/58471cd13382a6bafd05015cd0a5b5a8e899eb","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/79/c8a354ccacb4edc27acbcc503f26acf6119624","path":"lib/bookmark/git/objects/79/c8a354ccacb4edc27acbcc503f26acf6119624","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/8e/b07c89ff54bda39a40d6448a6a8ef4df57c8f2","path":"lib/bookmark/git/objects/8e/b07c89ff54bda39a40d6448a6a8ef4df57c8f2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/8a/7f4f27cc671188881ca5cd80d941720a78be04","path":"lib/bookmark/git/objects/8a/7f4f27cc671188881ca5cd80d941720a78be04","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/8d/ae3702857a081653c16320999ed63f3c6fb719","path":"lib/bookmark/git/objects/8d/ae3702857a081653c16320999ed63f3c6fb719","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/96/353334c808a19403f7d2f0e880668bf8f0e320","path":"lib/bookmark/git/objects/96/353334c808a19403f7d2f0e880668bf8f0e320","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/97/b44840ca6d92e3e650428f433b75a501b1427c","path":"lib/bookmark/git/objects/97/b44840ca6d92e3e650428f433b75a501b1427c","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/9d/a80d05852c1c5aec3e8d31b63d429bcfecc0c5","path":"lib/bookmark/git/objects/9d/a80d05852c1c5aec3e8d31b63d429bcfecc0c5","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/b5/c8b8aa1a6dba7c8152b49ef103a0952f1bb9ca","path":"lib/bookmark/git/objects/b5/c8b8aa1a6dba7c8152b49ef103a0952f1bb9ca","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/ad/b3297e18bb4d11be9f7305db144e5015f40738","path":"lib/bookmark/git/objects/ad/b3297e18bb4d11be9f7305db144e5015f40738","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/bf/c91bf59adb7231937b98d35cb952b4bab01fff","path":"lib/bookmark/git/objects/bf/c91bf59adb7231937b98d35cb952b4bab01fff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/bf/05dfc0c17af4b48e94676e1e2feaba911d8c71","path":"lib/bookmark/git/objects/bf/05dfc0c17af4b48e94676e1e2feaba911d8c71","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/c3/75bd4420a3baa49b9a5d52f8040400491ac933","path":"lib/bookmark/git/objects/c3/75bd4420a3baa49b9a5d52f8040400491ac933","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/ca/799c34c37f63bd64ed9b49413e7fc6db8ab2ef","path":"lib/bookmark/git/objects/ca/799c34c37f63bd64ed9b49413e7fc6db8ab2ef","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/cd/ea049768c3f2d2b89792c19a523584590292c5","path":"lib/bookmark/git/objects/cd/ea049768c3f2d2b89792c19a523584590292c5","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/c7/631242bf4ea5781b2d173d999b41c69fdd8ace","path":"lib/bookmark/git/objects/c7/631242bf4ea5781b2d173d999b41c69fdd8ace","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/d2/45f9acfffc2e168c17bcc4e115527f21a77521","path":"lib/bookmark/git/objects/d2/45f9acfffc2e168c17bcc4e115527f21a77521","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/d4/d4c40411de7936e90c6ebbc19e182ad225cb4c","path":"lib/bookmark/git/objects/d4/d4c40411de7936e90c6ebbc19e182ad225cb4c","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/d6/31561b3edf93b81d38f81278d6574c77006e39","path":"lib/bookmark/git/objects/d6/31561b3edf93b81d38f81278d6574c77006e39","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/d3/a06b992cfe7d26e022b14abf5ba563e6e63c4a","path":"lib/bookmark/git/objects/d3/a06b992cfe7d26e022b14abf5ba563e6e63c4a","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/db/3b3566df6e7d89575c4150067f61087be1bedb","path":"lib/bookmark/git/objects/db/3b3566df6e7d89575c4150067f61087be1bedb","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/ef/090e162cd7cc22d2da95d77acac1d7a1eb9c43","path":"lib/bookmark/git/objects/ef/090e162cd7cc22d2da95d77acac1d7a1eb9c43","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/df/af7173f5d152681fb2bc7adfdebb54ad195281","path":"lib/bookmark/git/objects/df/af7173f5d152681fb2bc7adfdebb54ad195281","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/f6/c892849ea799eb017a3d5bf05edb602780cd38","path":"lib/bookmark/git/objects/f6/c892849ea799eb017a3d5bf05edb602780cd38","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/f7/bc8429b09417e69629d9fa0c2874dd5adc30d2","path":"lib/bookmark/git/objects/f7/bc8429b09417e69629d9fa0c2874dd5adc30d2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/fb/0a1d42d6507805651dec61ecc4df11f37dc1a6","path":"lib/bookmark/git/objects/fb/0a1d42d6507805651dec61ecc4df11f37dc1a6","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/objects/fc/63af0044284a5b08f20cf1444a062176d835fe","path":"lib/bookmark/git/objects/fc/63af0044284a5b08f20cf1444a062176d835fe","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/logs/refs/heads/master","path":"lib/bookmark/git/logs/refs/heads/master","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/refs/remotes/origin/HEAD","path":"lib/bookmark/git/refs/remotes/origin/HEAD","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/git/logs/refs/remotes/origin/HEAD","path":"lib/bookmark/git/logs/refs/remotes/origin/HEAD","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"18405f89065cfe083c02072f4c9010eb51726364","modified":1517312736000},{"_id":"source/.DS_Store","hash":"be7d891ec2284c4458f29d1781225e0d7184502b","modified":1517896141000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1517633040000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1517633040000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1517633040000},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1517633040000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1517633040000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1517633040000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1517633040000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1517633040000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1517633040000},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1517633040000},{"_id":"themes/next/README.md","hash":"04451e616a5656f4fe1b17b06e0c3a1ae0b110f3","modified":1517633040000},{"_id":"themes/next/_config.yml","hash":"5c17e0c8fe3db386475fadf3621d8dbc1b1fed55","modified":1569220356679},{"_id":"themes/next/bower.json","hash":"3d3870b07762bb8246766180e68480267b204331","modified":1517633040000},{"_id":"themes/next/crowdin.yml","hash":"fe22a450cc1272b7ac5476e6b33a999f8b8a2034","modified":1517633040000},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1517633040000},{"_id":"themes/next/package.json","hash":"6a4dc5c36f6f6e612768d0c1cbec88ee72445c1b","modified":1517641832000},{"_id":"source/.vscode/settings.json","hash":"dff8a1731f59ccad056b346102d1e1d014b843f3","modified":1519809798000},{"_id":"source/_data/next.yml","hash":"175f23fa2beb2d0ec346bd4393b6af1c684b1e5b","modified":1569221769849},{"_id":"source/_posts/chapter1-2018-7-27.md","hash":"802fb2f4a608a1589c0924cefc0e3060023309d9","modified":1569221997000},{"_id":"source/_posts/chapter2-2018-7-28.md","hash":"93ce7e9553b9f9157492923e4240de5cba7dd125","modified":1569221993964},{"_id":"source/_posts/chapter3-2018-7-29.md","hash":"10d66a9951d9f8d9113a731760248d8a200da7f5","modified":1569221992711},{"_id":"source/_posts/chapter4-2018-7-30.md","hash":"0dd0380f2c941723d8d8dfa79adf2040604d691f","modified":1569221984529},{"_id":"source/_posts/chapter5-2018-7-31.md","hash":"e3086c48f7c01ebdcb14da23479944968de2135f","modified":1569221978270},{"_id":"source/_posts/chapter6-2018-8-1.md","hash":"7b52ae513fe7ea12daf3f2f815620340f477ede8","modified":1569221981000},{"_id":"source/_posts/chapter7-2018-8-2.md","hash":"c56f947793981d91b6be3a8147839598613ce50d","modified":1569221976421},{"_id":"source/_posts/chapter8-2018-8-3.md","hash":"db4269f8425a61b51aab62d5819b9a10b4df0bba","modified":1569221975070},{"_id":"source/_posts/chapter9-2018-8-4.md","hash":"469685fd5ad42c928dd985021bffb739602640d4","modified":1569221974255},{"_id":"source/_posts/hello-world.md","hash":"2829a8facd70ba992535795ff22fd1a868c2d82d","modified":1517637541000},{"_id":"source/_posts/hexo安装部署教程.md","hash":"ad54b718eae40e7288d0e35ae6c7f4b2b41d041d","modified":1569221972649},{"_id":"source/_posts/http协议学习-2018-8-1.md","hash":"e2eed8573049c876a1dde4965d0eb9614686114f","modified":1569221970769},{"_id":"source/_posts/linux下使用rsync快速删除大量文件.md","hash":"6607b6f7bb809a2e8a53a91fee054d1615378315","modified":1569221968983},{"_id":"source/_posts/linux删除文件除过某个文件.md","hash":"1b43f179c0e84ddf956da9fecb30caf76155baca","modified":1569221967958},{"_id":"source/_posts/localtunnel-server端搭建.md","hash":"2c8c03e70a8dc4e1f8158873cb76ff6a1ba28b9c","modified":1569221964000},{"_id":"source/_posts/mongodb-kerberos-2018-09-26.md","hash":"8c35fed36d4a70ec136a6a3142dc2e5b07b2aa11","modified":1569221963082},{"_id":"source/_posts/netty-codec-2018-07-17.md","hash":"6b04fc2d4dd8c29ea0bcdb8dfdd402be9c188020","modified":1569221962184},{"_id":"source/_posts/part1.md","hash":"23371d6b7d9384c467d5944c13c5ad1cd65fef89","modified":1569221961205},{"_id":"source/_posts/shadowsocks-2019-3-3.md","hash":"71b0475ec930fc46a7140a3cb6196f91646359ca","modified":1569221960146},{"_id":"source/_posts/socket知识-2018-8-1.md","hash":"bb98bc8e7cb89870cb1885882e9aa4d2bdfd7ed3","modified":1569221959065},{"_id":"source/_posts/solr安装分词.md","hash":"cd1ea01dda4b0cbc2243a7df4ffa7f5353de1347","modified":1569221958109},{"_id":"source/_posts/springboot-websocket-2018-12-15.md","hash":"64b9748b46bfac3ce4fa4c354b439b9c3a46471b","modified":1569221957273},{"_id":"source/_posts/tcp-socket-http区别-2018-8-1.md","hash":"bd54dd40f0a5f0610f91bb416a405fc844ee42d8","modified":1569221956345},{"_id":"source/_posts/tcp名词解析-2018-07-25.md","hash":"b83a3a29d118a7a2c4cab0ce92c557f449ad08cb","modified":1569221955000},{"_id":"source/_posts/tcp学习上-2018-07-24.md","hash":"94b0ae891038910f222310677a1ae70f8cc56b33","modified":1569221953489},{"_id":"source/_posts/tcp学习下-2018-07-26.md","hash":"84798968351da67c9718a2b1891bca59e4a47d31","modified":1569221951937},{"_id":"source/_posts/字符串反转.md","hash":"8da19c7422285e7f3659036e2619a0c38770c8a4","modified":1569221949954},{"_id":"source/_posts/空对象模式-2018-07-23.md","hash":"1d831377c1f18d113a3703b8be81585aa3386cd8","modified":1569221945916},{"_id":"source/_posts/对象池模式-2018-07-20.md","hash":"f859184a8e667fd7451c48038e277119bd9d65b8","modified":1569221948291},{"_id":"source/_posts/规格模式-2018-07-19.md","hash":"47bcece0dc33fef96abf6ff16895d6574d065fa0","modified":1569221943905},{"_id":"source/_posts/读源码注意的东西.md","hash":"0cad3d1183cf8880c7b4f0c2783120371bb26bb6","modified":1569221939354},{"_id":"source/_posts/雇工模式-2018-07-21.md","hash":"bb46035cf4393a38a8eedc610662c4ac1cbaaf89","modified":1569221935474},{"_id":"source/_posts/黑板模式-2018-07-22.md","hash":"9541b5843059e9f2a076583e3f3f1df210661f65","modified":1569221941000},{"_id":"source/categories/index.md","hash":"29c672c7c93ddeb00481d526a5df7b321a9b2d0a","modified":1517638193000},{"_id":"source/images/2018-07-19-3.png","hash":"4afa29723a342528369a694a36ec9235752eb907","modified":1532042033000},{"_id":"source/images/favicon-32x32-me.png","hash":"0a172da57a44eca07093987052cdab4636a49b74","modified":1517896234000},{"_id":"source/images/user.jpg","hash":"0c62ef39a5218b196b235a3f631e090b6f913be6","modified":1517639211000},{"_id":"source/images/favicon-16x16-me.png","hash":"7996042cab719ea8f84147360bc7c2bc3b57bfed","modified":1517886669000},{"_id":"source/tags/index.md","hash":"c27dfa3de53945be28a93104db62b3f1604aa0d3","modified":1517638137000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"792b4e3c3544d51164e8a414219dc1b388dc65dc","modified":1517633040000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"dc6bcc75f2d790aa291cdf54ae127a4a10bc75a5","modified":1517633040000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1517633040000},{"_id":"themes/next/.github/stale.yml","hash":"1bbdd20d025010ec57225712be82988a26485836","modified":1517633040000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1517633040000},{"_id":"themes/next/git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1517633040000},{"_id":"themes/next/git/config","hash":"e2ca9fa6f115d4406d24bf0df53fc26ce13e0c9b","modified":1517633040000},{"_id":"themes/next/git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1517633040000},{"_id":"themes/next/git/index","hash":"f5420f20de2dfe18708e162531f4f92def00aaa4","modified":1517633040000},{"_id":"themes/next/git/packed-refs","hash":"d88613a5b4229bdc472ba20ce8275b373724c158","modified":1517633040000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"4c8267e33fe7ffc524f936ee0099f5f695dbb2d1","modified":1517633040000},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1517633040000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1517633040000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1517633040000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1517633040000},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1517633040000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1517633040000},{"_id":"themes/next/docs/MATH.md","hash":"d047b8a3d9aa49b478a33e5a326195d460cb4589","modified":1517633040000},{"_id":"themes/next/languages/_en.yml","hash":"285370f53786c536e8a21a396a59d7b5fb506bbf","modified":1517633040000},{"_id":"themes/next/languages/ar.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/bg.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/bn.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/da.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/cs.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/de.yml","hash":"dbf375a056b235f56b4c717c093596e4099f8061","modified":1517633040000},{"_id":"themes/next/languages/et.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/el.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/es.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/fa.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/fr.yml","hash":"d3795a581c4d699a1ec1744bbcd053e203003f54","modified":1517633040000},{"_id":"themes/next/languages/fi.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/he.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/hi.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/id.yml","hash":"b1ac9b0268067f3399a12d15ffca99d35a21dea3","modified":1517633040000},{"_id":"themes/next/languages/hr.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/hu.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/ja.yml","hash":"9149ff729876540c825f15ef240788d00f372de6","modified":1517633040000},{"_id":"themes/next/languages/it.yml","hash":"76e6e2eb47256452c9ba59fd6d7209515724e36c","modified":1517633040000},{"_id":"themes/next/languages/jv.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/ko.yml","hash":"a799b84d4dfb0ac9559208676a30879fcb2c20d3","modified":1517633040000},{"_id":"themes/next/languages/lt.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/no.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/lv.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/nl.yml","hash":"f05bb96a919e109a865ca5e1a3ac94db96a5db60","modified":1517633040000},{"_id":"themes/next/languages/pl.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/ms.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/pt-BR.yml","hash":"e5d19c4ddffe9c770d106a4e0ffc2dc643e7f6d2","modified":1517633040000},{"_id":"themes/next/languages/pa.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/pt.yml","hash":"272815bea0de47d2d7f77e0846cee05fe3569423","modified":1517633040000},{"_id":"themes/next/languages/ro.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/ru.yml","hash":"063bc77639364f5f2f0bfb4e46d7db1256663c27","modified":1517633040000},{"_id":"themes/next/languages/sl.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/sv.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/tr.yml","hash":"2e287f7e9b384d3844946a34aec246ef56abd3e6","modified":1517633040000},{"_id":"themes/next/languages/th.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/uk.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/sr.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/zh-CN.yml","hash":"dce2ffd1cca39451a9bad8ed234f065e2141e13f","modified":1517633040000},{"_id":"themes/next/languages/vi.yml","hash":"61048c4d4c50bf7c1af59f3100b4736c7012f95a","modified":1517633040000},{"_id":"themes/next/languages/zh-HK.yml","hash":"9a51892c195d5139a0144baca34d3375d66f23a3","modified":1517633040000},{"_id":"themes/next/languages/zh-TW.yml","hash":"382f8a7b99a8e765cf000d3c7dcb6b5d5aaea69a","modified":1517633040000},{"_id":"themes/next/layout/_layout.swig","hash":"1efc1a8dae756110754086d43ff6288f46d47040","modified":1569221217243},{"_id":"themes/next/layout/archive.swig","hash":"833a2213d31be45a12b8e4e5e609073978bd251b","modified":1517633040000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1517633040000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1517633040000},{"_id":"themes/next/layout/page.swig","hash":"e17757096eb878f1e9c34c567d7898a37305c302","modified":1517633040000},{"_id":"themes/next/scripts/merge-configs.js","hash":"ca9845dc76f5710b4c6fba5fe25ff0d2fcf0adaa","modified":1517633040000},{"_id":"themes/next/layout/post.swig","hash":"8e2d079b46076996cc9343213d5bf7da8178d32d","modified":1517633040000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1517633040000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1517633040000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1517633040000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1517633040000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1517633040000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1517633040000},{"_id":"source/images/2018-07-19-4.png","hash":"67d9260a1b58610b706068231d435d8817d17eaf","modified":1532042033000},{"_id":"source/images/2018-07-19-2.jpg","hash":"71062aef88ea80d3bb04916d614347d474ee14f0","modified":1532042033000},{"_id":"source/images/alipay.jpg","hash":"3dfb01e438e0788f909c8e66d438fd33d1e8d868","modified":1517665835000},{"_id":"source/images/wechatpay.jpg","hash":"7acda7d3f65cbb3da2a72915898e61d2b36ba316","modified":1517665828000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517633040000},{"_id":"source/images/2018-07-19-1.jpg","hash":"269ff751555853ec356339d906ee2a45600385fd","modified":1532042033000},{"_id":"source/images/2018-07-22-1.png","hash":"204d024885123bbe8769a7e24f4db03c211ab5e0","modified":1532042033000},{"_id":"source/images/internet/2018-8-1-4.png","hash":"0a0cc9839234f956251730ceab77851f40957e0c","modified":1533020394000},{"_id":"source/images/tcp/.error","hash":"35dcbe5bcd650e2ca7d543c5ef4992e690573e30","modified":1532922944000},{"_id":"source/images/tcp/tcp-fsm.png","hash":"34c92f937d294d778591f86b31e6ae895f949f0a","modified":1532922745000},{"_id":"source/images/tcp/tcp-closesimul.png","hash":"cd24aa24f17629070dfe9e41a88f6cdd97edde16","modified":1532922745000},{"_id":"source/images/netty_part1/2018-7-28-2-1.png","hash":"4453725af73012587c76d3a0b1a3fced2705410a","modified":1533453328000},{"_id":"source/images/tcp/tcp-sack_example.jpg","hash":"294237bfa9cc12494178f8e04805ffc917f0ed19","modified":1532922745000},{"_id":"source/images/netty_part1/2018-7-29-2.png","hash":"96e8b8d4b8a1a0583f0dc73f4572c77f7a7c2483","modified":1533453328000},{"_id":"source/images/netty_part1/2018-8-1-11.png","hash":"b189bba333d964106b63ae4667682063047cf77e","modified":1533453328000},{"_id":"source/images/netty_part1/2018-8-1-8.png","hash":"406fdbfa8d5196463d0cc60f8068a31049fd0888","modified":1533453328000},{"_id":"source/images/netty_part1/2018-8-2-2.png","hash":"4a46aaf99f3247fadc06946796fb3161e5c198bb","modified":1533453328000},{"_id":"source/images/netty_part1/2018-8-3-1.png","hash":"5e8220d443dd32a115e4232f67cd9fe0ff7a157e","modified":1533453328000},{"_id":"source/images/netty_part1/2018-8-4-2.png","hash":"76a18ee4791a3674c346a3dca0f3633a2e9e5852","modified":1533453328000},{"_id":"source/images/netty_part1/2018-8-4-3.png","hash":"16ce69dc419d22d0fd46b195d5cf026f8722e782","modified":1533453328000},{"_id":"source/images/netty_part1/2018-8-4-4.png","hash":"24395d2521c9a3be03f557716e625fac37c9a812","modified":1533453328000},{"_id":"themes/next/git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1517633040000},{"_id":"themes/next/git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1517633040000},{"_id":"themes/next/git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1517633040000},{"_id":"themes/next/git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1517633040000},{"_id":"themes/next/git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1517633040000},{"_id":"themes/next/git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1517633040000},{"_id":"themes/next/git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1517633040000},{"_id":"themes/next/git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1517633040000},{"_id":"themes/next/git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1517633040000},{"_id":"themes/next/git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1517633040000},{"_id":"themes/next/git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1517633040000},{"_id":"themes/next/git/logs/HEAD","hash":"3786ad71419aa12d84829f94568868455a5ea74d","modified":1517633040000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1517633040000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1517633040000},{"_id":"themes/next/docs/ru/README.md","hash":"ce63302a8c224ea845fd078fc6323f65c9c9ebce","modified":1517633040000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1517633040000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"d6a6efdee5f830515c21423465646d06bef84375","modified":1517633040000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1517633040000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1517633040000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"af873cf9f8dae09324d556322af37452087b238a","modified":1517633040000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"1c7df019737656fdfd8d124c7c045a64ac8a2a8d","modified":1517633040000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"c1ba919f70efe87a39e6217883e1625af0b2c23c","modified":1517633040000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1517633040000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1517633040000},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1517633040000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1517633040000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"83b0242c0e2cf20959aa2845b1a14de757cd765f","modified":1517633040000},{"_id":"themes/next/layout/_macro/post.swig","hash":"cf1909b2646404e3a7b5165aa79c9cd9b2a4d8a4","modified":1517633040000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"aa620c582143f43ba1cb1a5e59240041a911185b","modified":1517633040000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"203fedd8ae676de5950a0adec79d91e426b726c4","modified":1517633040000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"fea45ab314b9ea23edab25c2b8620f909d856b1d","modified":1517633040000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5df32b286a8265ba82a4ef5e1439ff34751545ad","modified":1517633040000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"8811170dc60053d815023f3ee99c6b0f0d0ae059","modified":1517633040000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ab12994e20edeed75b277f3e3dbba69375e52005","modified":1517633040000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1517633040000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1517633040000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1517633040000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1517633040000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1517633040000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1517633040000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1517633040000},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1517633040000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1517633040000},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1517633040000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1517633040000},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1517633040000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1517633040000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1517633040000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1517633040000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1517633040000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1517633040000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1517633040000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1517633040000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1517633040000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1517633040000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1517633040000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1517633040000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1517633040000},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1517633040000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1517633040000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1517633040000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1517633040000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1517633040000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1517633040000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1517633040000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1517633040000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1517633040000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1517633040000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1517633040000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1517633040000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1517633040000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1517633040000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1517633040000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1517633040000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1517633040000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1517633040000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1517633040000},{"_id":"themes/next/source/js/.DS_Store","hash":"1a55470d12aa81a3fc4fc3c35fc91d497e0af0c9","modified":1523085764000},{"_id":"source/images/designPattern/2018-07-19-4.png","hash":"67d9260a1b58610b706068231d435d8817d17eaf","modified":1532930137000},{"_id":"source/images/internet/2018-8-1-2.png","hash":"d1c953813cc32cf1c6c9cdf5d24056fe7dd8b71a","modified":1533020394000},{"_id":"source/images/mongodb/2018-09-26-01.png","hash":"f45f5ca002abf55057c7b34378185d715ab6f450","modified":1537947300532},{"_id":"source/images/tcp/2018-07-19-4.png","hash":"67d9260a1b58610b706068231d435d8817d17eaf","modified":1532930003000},{"_id":"source/images/tcp/tcp-open-close.jpg","hash":"d42e412fd11045e5f11d316937f9541bfc9ce1e2","modified":1532922745000},{"_id":"source/images/netty_part1/2018-7-29-1.png","hash":"60fc3ab85830e57bf2f3cda307ce4a7f393ab3d9","modified":1533453328000},{"_id":"source/images/netty_part1/2018-7-29-3.png","hash":"65a8b3254674bd3d0ccd391caffc95db865c4947","modified":1533453328000},{"_id":"source/images/netty_part1/2018-7-30-3.png","hash":"6afe05c40b66c108dc2822d9f4211c235696a4f3","modified":1533453328000},{"_id":"source/images/netty_part1/2018-7-31-1.png","hash":"43657aedfec9eae3dbcaee9148c0714d7487465b","modified":1533453328000},{"_id":"source/images/netty_part1/2018-7-31-7.png","hash":"90d8e275884f44ec9ed80f66003a271c32442feb","modified":1533453328000},{"_id":"source/images/netty_part1/2018-8-1-10.png","hash":"5112cf23b9c4249bbeb4fe0fbc4cf0e1e4122d3c","modified":1533453328000},{"_id":"source/images/netty_part1/2018-8-1-15.png","hash":"eb4a1a9ee02b4656486b599bc40c9a671e80abec","modified":1533453328000},{"_id":"source/images/netty_part1/2018-8-1-16.png","hash":"88107cbc223113f9874f08d70f2604890e3a1c8c","modified":1533453328000},{"_id":"source/images/netty_part1/2018-8-1-17.png","hash":"cb64bd6cc3b5ee65cfc66e5cbcfea88558b18ec8","modified":1533453328000},{"_id":"source/images/netty_part1/2018-8-1-7.png","hash":"4d8ccf6ae5b6f5aca10df8fbed0a58ee8d3611cb","modified":1533453328000},{"_id":"source/images/netty_part1/2018-8-1-6.png","hash":"757b41714338f1b83189137007800552cdcf47b4","modified":1533453328000},{"_id":"source/images/netty_part1/2018-8-2-5.png","hash":"5b5c6abb0d82c60a8e8432689970babfac29268c","modified":1533453328000},{"_id":"source/images/netty_part1/2018-8-2-7.png","hash":"766e5a94db5347df00d521793fd50a041db74015","modified":1533453328000},{"_id":"source/images/netty_part1/2018-8-3-4.png","hash":"0de39a9dad50426a391736c97c77adfb430c7f19","modified":1533453328000},{"_id":"source/images/netty_part1/2018-8-3-6.png","hash":"95678706c6c22a20d68b1340135eae4c8271bd2f","modified":1533453328000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517633040000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517633040000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517633040000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517633040000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517633040000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517633040000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517633040000},{"_id":"source/images/designPattern/2018-07-22-1.png","hash":"204d024885123bbe8769a7e24f4db03c211ab5e0","modified":1532930137000},{"_id":"source/images/internet/2018-8-1-1.png","hash":"e0d811ed95cd547030ba0d7502e75771b60e5ba6","modified":1533020394000},{"_id":"source/images/internet/2018-8-1-3.png","hash":"54b332f6efdaf05d82993f2f639524e8a8e1c081","modified":1533020394000},{"_id":"source/images/tcp/2018-07-22-1.png","hash":"204d024885123bbe8769a7e24f4db03c211ab5e0","modified":1532930003000},{"_id":"source/images/netty_part1/2018-7-30-1.png","hash":"ef70da84e22b8bd6de277e4d2821510f52a91141","modified":1533453328000},{"_id":"source/images/netty_part1/2018-7-30-2.png","hash":"c51241ed5cebf103e201720c6c9d8e27aa2166ac","modified":1533453328000},{"_id":"source/images/netty_part1/2018-7-31-5.png","hash":"1e234469283ccfac03d5dc23d9c9fd3018c896ff","modified":1533453328000},{"_id":"source/images/netty_part1/2018-8-1-9.png","hash":"77ec8ccffce3f162e2e9fdd21cf50c416d9c47a9","modified":1533453328000},{"_id":"source/images/netty_part1/2018-8-2-1.png","hash":"913fc86e4d8f76bc57552523c052ac965e00060b","modified":1533453328000},{"_id":"source/images/netty_part1/2018-8-2-3.png","hash":"25293874051129e6e609de1ff905845ed09aa6b0","modified":1533453328000},{"_id":"source/images/netty_part1/2018-8-2-4.png","hash":"98c1139a35c80a0d1d4c2e5e1d91d4bbdf7deec3","modified":1533453328000},{"_id":"source/images/netty_part1/2018-8-2-6.png","hash":"b9b20881544716b39b4dba24dcc3741a6f1cf71a","modified":1533453328000},{"_id":"source/images/netty_part1/2018-8-3-7.png","hash":"11b6c0a74fd2972f1a1eb7564cc962e190f5998f","modified":1533453328000},{"_id":"source/images/netty_part1/2018-8-4-1.png","hash":"836af5bd3844f1b4315afda9323f658188eb63fe","modified":1533453328000},{"_id":"themes/next/git/refs/heads/master","hash":"e55272d5cdbf0917d8a6aa5b94b8a13cd33cf543","modified":1517633040000},{"_id":"themes/next/git/objects/pack/pack-1269648f5d9138dbc11a36e3c17b6c78add232cf.idx","hash":"56cdca8bfd0188b0995d06a48d0124787bd9bb13","modified":1517633040000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1517633040000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"b8e84eb0e961a89d3f662081c7511a5b8da3aabf","modified":1517633040000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"e2e3494f35f8bd8d828536a4a273f99e9ed28084","modified":1517633040000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1517633040000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1517633040000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1517633040000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1517633040000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1517633040000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1517633040000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1517633040000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1517633040000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1517633040000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1517633040000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1517633040000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1517633040000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1517633040000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1517633040000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1517633040000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1517633040000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1517633040000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1517633040000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1517633040000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1517633040000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"4aa55cd424389cf5626aa019c15ef6f3e4da09f2","modified":1538984784724},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1517633040000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1517633040000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1517633040000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"2fbee33a4ccd7c8217c73e85a9a1488170e05629","modified":1517633040000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1517633040000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"17a54796f6e03fc834880a58efca45c286e40e40","modified":1517633040000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"40e3cacbd5fa5f2948d0179eff6dd88053e8648e","modified":1517633040000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"6f340d122a9816ccdf4b45b662880a4b2d087671","modified":1517633040000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1517633040000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"42f62695029834d45934705c619035733762309e","modified":1517633040000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1517633040000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1517633040000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"011ae6303afacddabc4ddf570fe3dd227569cd4f","modified":1517633040000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1517633040000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1517633040000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1517633040000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1517633040000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1517633040000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1517633040000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1517633040000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1517633040000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1517633040000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1517633040000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"32392d213f5d05bc26b2dc452f2fc6fea9d44f6d","modified":1517633040000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"2a479f5ed8350e0155948130aeabd83b88886a61","modified":1517633040000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1517633040000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1517633040000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1517633040000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"531cdedd7fbe8cb1dab2e4328774a9f6b15b59da","modified":1517633040000},{"_id":"themes/next/source/js/src/fireworks.js","hash":"f4db481a0422afb08b10d8189fa92a1433da46b0","modified":1569221250977},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1517633040000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1517633040000},{"_id":"themes/next/source/js/src/post-details.js","hash":"d1333fb588d4521b4d1e9c69aef06e0ad1bf0b12","modified":1517633040000},{"_id":"themes/next/source/js/src/love.js","hash":"effa770d8085f7e7fb903de217ce521dff163780","modified":1517842151000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1517633040000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1517633040000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1517633040000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1517633040000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1517633040000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1517633040000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1517633040000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1517633040000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1517633040000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1517633040000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1517633040000},{"_id":"themes/next/source/lib/bookmark/.gitignore","hash":"5410a1bef9807f666cd92a0d2020f700e67e4096","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/LICENSE","hash":"1440355648a72be5b7625fe6fa055b462fcc78b0","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/README.md","hash":"ecfb09270cf202fb2228e9a79fa970b60be69222","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/bookmark.min.js","hash":"0f676687733e8f50a9d668f76686524bf0fa6b2d","modified":1517640263000},{"_id":"source/images/netty_part1/2018-7-31-3.png","hash":"84169b8f2516525d78fb91e92db5f8de4d0a99aa","modified":1533453328000},{"_id":"source/images/netty_part1/2018-7-31-6.png","hash":"581f16c519bb27c65a4a337e6752b1388f8978e8","modified":1533453328000},{"_id":"source/images/netty_part1/2018-8-1-12.png","hash":"824d2232ddcd757ea9509549766bc8bbe40659c2","modified":1533453328000},{"_id":"source/images/netty_part1/2018-8-1-5.png","hash":"46ded4418b1a84d71d9e355051ecbd820f4cec87","modified":1533453328000},{"_id":"source/images/netty_part1/2018-8-3-2.png","hash":"42c0ba088433bff97721049f58ecab8c56eaf15e","modified":1533453328000},{"_id":"source/images/netty_part1/2018-8-3-3.png","hash":"9e9ab4a6718f4ccd141e4b5f27b4a6e1510e0944","modified":1533453328000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1517633040000},{"_id":"source/images/tcp/tcp-header01.png","hash":"12f30c0295edebe9d8c7ae5812c86820af586427","modified":1532922745000},{"_id":"source/images/netty_part1/2018-7-31-2.png","hash":"c2ec749cd181cd6aa4daa2d532efb4303b4ad959","modified":1533453328000},{"_id":"source/images/netty_part1/2018-8-1-14.png","hash":"f39d2ef41288485715b420e7514143b125b64c98","modified":1533453328000},{"_id":"themes/next/git/logs/refs/heads/master","hash":"3786ad71419aa12d84829f94568868455a5ea74d","modified":1517633040000},{"_id":"themes/next/git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1517633040000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1517633040000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1517633040000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1517633040000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1517633040000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1517633040000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1517633040000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1517633040000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1517633040000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1517633040000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"3efaeb98e3b82080d037890a20f7c317feacc0b5","modified":1517633040000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1517633040000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1517633040000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1517633040000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1517633040000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1517633040000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1517633040000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1517633040000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1517633040000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"dbff05af5e3a7c4f0889cdcc9027f882a246aa68","modified":1517633040000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1517633040000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1517633040000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1517633040000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1517633040000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1517633040000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1517633040000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1517633040000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"fbb0b5e6cca2795169f8069c579626477587754c","modified":1517633040000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1517633040000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1517633040000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1517633040000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1517633040000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1517633040000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1517633040000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1517633040000},{"_id":"themes/next/source/lib/bookmark/git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/config","hash":"7c5ec419dd0549da89bdd8376a1327f19049f461","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1517640261000},{"_id":"themes/next/source/lib/bookmark/git/index","hash":"ee48ead06a8064904abdb21b5f7625f588d9a399","modified":1517640272000},{"_id":"themes/next/source/lib/bookmark/git/packed-refs","hash":"ce6db96df1c7bb76f21f98415e199d093343b179","modified":1517640263000},{"_id":"source/images/tcp/tcp-header02.png","hash":"a164aa5d66e56d335c59942e8737525638dec74a","modified":1532922745000},{"_id":"source/images/netty_part1/2018-7-31-4.png","hash":"fd83580116e03240613282c2ec6a4d2db1038c3d","modified":1533453328000},{"_id":"source/images/netty_part1/2018-8-1-13.png","hash":"9fb7eb48c262b6a51792e651e8b99c8594e0b370","modified":1533453328000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1517633040000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1517633040000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1517633040000},{"_id":"source/images/mongodb/2018-09-26-02.png","hash":"a58a166bd4250d7a55900f5511f2732b9f75c78f","modified":1537947300532},{"_id":"source/images/netty_part1/2018-8-3-5.png","hash":"bc4001aaf26c2a8e3e5eb1878640c1a61be28e0b","modified":1533453328000},{"_id":"themes/next/git/logs/refs/remotes/origin/HEAD","hash":"3786ad71419aa12d84829f94568868455a5ea74d","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ce77b4ff598c10aca5687e9a65387ae74684632e","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"381fcdefb6493978d18618afdd7322e0a39decdc","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8bf095377d28881f63a30bd7db97526829103bf2","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"5d15cc8bbefe44c77a9b9f96bf04a6033a4b35b8","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"72f7b47e55323eee056dc64f292888f1df9ecbc6","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"96326454eb7c7a3ec38d20294c94c4cc63f16ebe","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1517633040000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1517633040000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1517633040000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1517633040000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1517633040000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1517633040000},{"_id":"themes/next/source/lib/bookmark/git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1517640261000},{"_id":"themes/next/source/lib/bookmark/git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1517640261000},{"_id":"themes/next/source/lib/bookmark/git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1517640261000},{"_id":"themes/next/source/lib/bookmark/git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1517640261000},{"_id":"themes/next/source/lib/bookmark/git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1517640261000},{"_id":"themes/next/source/lib/bookmark/git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1517640261000},{"_id":"themes/next/source/lib/bookmark/git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1517640261000},{"_id":"themes/next/source/lib/bookmark/git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1517640261000},{"_id":"themes/next/source/lib/bookmark/git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1517640261000},{"_id":"themes/next/source/lib/bookmark/git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1517640261000},{"_id":"themes/next/source/lib/bookmark/git/logs/HEAD","hash":"7857895e7f36882c19351d98b970bf5d02f5fbb3","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1517640261000},{"_id":"themes/next/source/lib/bookmark/git/objects/02/b27223487ca819cf7167dc23626af595112e25","hash":"e5bbb1906aa9a8e2696817d19d85aeedf82539ed","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/0a/9e6b66e9d710a68e08fcc295fca440eabcb4bc","hash":"aa0b269640b41735ba54a9279f10ddd19ecd5887","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/07/4d4d38a37d506f5db482b5c27ad1143bba5aab","hash":"ee76158694b6490056328594b5d15a54faba253e","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/refs/heads/master","hash":"c56e03f9e708391a87cdfa4406d93fe5b18684c4","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/11/8348fe672067e7d9c32c73d586023804eeb565","hash":"2b73c34eb535ff7e7d91cefb5215feddd9f2c36f","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/0d/61683ea74054da2645effdd51d0a3282d6a9ff","hash":"879563c866dbe7efa0074a1ebcd206723e552f27","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/18/77388dd9427b36d7c8703038a215b79f1218c2","hash":"8d48c7c0d7427116dbeb32552c576cc4edbe2d38","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/17/ad1e81c2805cc9c5c00846c8bf9bf16524b55a","hash":"8f779f28267873af1e5c71386603042dbaff6211","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/16/75d42fcbd2aded2e9b42efe38c347ced893495","hash":"979ec745cfdc8dd979785b78c9be7645bb73d922","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/1b/db4ff581f77318e6c4783d8e1ce811c37f13bf","hash":"06b3da6e152ffd68ed4617db1c4e3912f41d8bec","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/2b/358da01f778126b38fc4ddf5ecafa625cad38b","hash":"d4613d86e15d9679b8f1f18950b71a182af4b5c8","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/2b/d59834388b6377fd14413f2614f550e35e35f1","hash":"654763c707c65aa3f353f8a9edb0cc0ae4bcccfa","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/2f/425e03cfa918b2d638bbd37279a8b1e7757508","hash":"283713eda90efb64849519db267b652facfdbd63","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/41/bde8ccd130442ef0b3f8b24764a6d72635a485","hash":"4a833bb669ac126a00dec7153f8c263eab47b024","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/3f/30e2e442e4fdc1e91d5d1b642662e3900e5d6f","hash":"358397c32831b80fa4828334de7080bdaafe1c52","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/25/42ea91169dbe9da086918ad02160e42310e185","hash":"3c942c82f3ef7fcd9a15276c82fcf59fa141521c","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/25/b729e9ad0151b51f50297ea35280111b953236","hash":"af4bf7f3feb175c6980ee81a84f679149f713987","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/40/b878db5b1c97fc77049537a71bb2e249abe5dc","hash":"929471c4b27858bbdae034381982f996144f6b3d","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/42/c32aba927940c9e92b9928dceee88eacbf4874","hash":"2c7b6bb078f2eb52eead906df3ed4fa136a1e651","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/47/1dd1f3ddf970ee3418f801ae787bf98191d47e","hash":"8634518aeeffc4b8b0dbe6ca6159480264cf1916","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/48/7e5a296eebd45809199d2f557e340603931bad","hash":"6cf9f9b5ae990bbb0083b37b0c29b269cd8cc735","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/4a/6e0d94cae4e01312054983b4e2e4007e3fd3b8","hash":"9eff6f1c82336ebdab0503e0ab0f753cd18f01ff","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/4a/7e8d64b8956ffd9339000e62d490f18dcd3ecd","hash":"3cc8fd65b3663a750887093f67bb28696492d5e5","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/4e/7ec652ef197de221d6576a717edf0b583a688a","hash":"e45f3b02a04d04eb3bcd6373ae79d86cbbd62798","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/55/31419f7d03a523182be5373e246e43acdf60d7","hash":"274085edc584079218a79c199bd0c7360a700290","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/58/b257bc636adc71871da51e615e6734c9479f3a","hash":"4e63de59c359c9bf480b47aa5e342ed78663fb58","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/5f/1541db4b58002e45b9b5fe19426551a8239a49","hash":"9a50dcb663e39892adbfccab943fb8dc37add2d0","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/61/4795cc61f429929887fde3962027254db90a62","hash":"c4e415dda2e421df728dda51f953cc2f01296378","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/5e/038b5098480c14a29cefd944e3eb23109473b2","hash":"9c3aba7ff1afc70708a90e2f4f610499ee268d4a","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/5c/02525c8b55f89f0ec0304cd0d266453bdf0541","hash":"51cab03e6cbebdb421eea45818b1ff7d9ec7783f","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/5c/ffa97fb277e628a550bc1d8f7fa7c5c776129f","hash":"8c4e4a79d14522f34280ef85c794df6f4886e040","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/62/150c9d8f54ca62e1af3c9d666bb5e35eb3bdbd","hash":"2998eaea45a0135e879da15851a535ae2940d85e","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/6d/1188177a8798893f9efe275d4d75d0f9301be9","hash":"b8652b3249ef6662a8dee7c01e5667f7e4f33cc4","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/77/d7bbc93f0a411d2e50b7c67a2827dece42727f","hash":"6865e0eb54a9882e55e70669a44cdddb2da1665e","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/7e/58471cd13382a6bafd05015cd0a5b5a8e899eb","hash":"21ae04d7ac48092d7b07b7278bf099cfc2691e57","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/79/c8a354ccacb4edc27acbcc503f26acf6119624","hash":"7a44189d1189ad7aedea595fc8a4ef387de7041d","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/8e/b07c89ff54bda39a40d6448a6a8ef4df57c8f2","hash":"fadb84b2a2c5dee0b8f67dd53b4e2b8a5b270e92","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/8a/7f4f27cc671188881ca5cd80d941720a78be04","hash":"de24124a9660dad2ee4e1d25a3580ac87d42b3e0","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/8d/ae3702857a081653c16320999ed63f3c6fb719","hash":"cc5ed8d3d17451c722a3ebfa3251fff27d348218","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/96/353334c808a19403f7d2f0e880668bf8f0e320","hash":"dbcb9efdc52a50d5f0431394c24b35ff47f1833d","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/97/b44840ca6d92e3e650428f433b75a501b1427c","hash":"a899d561a89c4ab798063c1df81d78015992ad15","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/9d/a80d05852c1c5aec3e8d31b63d429bcfecc0c5","hash":"392385eddea633b0bea1194c2c66db593c6a9c0a","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/b5/c8b8aa1a6dba7c8152b49ef103a0952f1bb9ca","hash":"d070cad9094ddcf44be0e16b3872f1fb4f05ae0d","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/ad/b3297e18bb4d11be9f7305db144e5015f40738","hash":"b44f4417307f3dbb33d30c22700dbfb61c87f198","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/bf/c91bf59adb7231937b98d35cb952b4bab01fff","hash":"016dc36835bb17ba3f54eebaef4d57f5498015da","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/bf/05dfc0c17af4b48e94676e1e2feaba911d8c71","hash":"4d8adbebcb8ffb4bc3c61b9c97bd225f128b8e74","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/c3/75bd4420a3baa49b9a5d52f8040400491ac933","hash":"beb87437d1591c6bec51a6e85176f576092a83f2","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/ca/799c34c37f63bd64ed9b49413e7fc6db8ab2ef","hash":"4e6ee2dffc199b5954fb34b129fe2f012099463d","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/cd/ea049768c3f2d2b89792c19a523584590292c5","hash":"5e69fbae98becc6ed3be947a2450511294252891","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/c7/631242bf4ea5781b2d173d999b41c69fdd8ace","hash":"f2d3b9fb648bed7f61dc917d9ad45550c4c70e77","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/d2/45f9acfffc2e168c17bcc4e115527f21a77521","hash":"76d31ac0c9ca563b5854fe5b6c5ab46ebb202680","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/d4/d4c40411de7936e90c6ebbc19e182ad225cb4c","hash":"f8d44f87905d5dfbeb1fdf5519a5256d27d00120","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/d6/31561b3edf93b81d38f81278d6574c77006e39","hash":"afaad8a2c6944b11695122cf45cedadbc3bd7605","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/d3/a06b992cfe7d26e022b14abf5ba563e6e63c4a","hash":"6820962ea4a4da9e9de834c97c1630477c30ef20","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/db/3b3566df6e7d89575c4150067f61087be1bedb","hash":"118afda770f93908ad97d6ad0bb6a42b21aab9cf","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/ef/090e162cd7cc22d2da95d77acac1d7a1eb9c43","hash":"a6997644fb850bedaeeb01adfc90fc404cf80074","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/df/af7173f5d152681fb2bc7adfdebb54ad195281","hash":"7fc27717b2f7da8f6a6e40ac8d88c75485a505fa","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/f6/c892849ea799eb017a3d5bf05edb602780cd38","hash":"3b568af69c7a3dc7439155fe36b64a65e8b0bb79","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/f7/bc8429b09417e69629d9fa0c2874dd5adc30d2","hash":"d8b3844ae942e165b59b6a57c5decdeb35582539","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/fb/0a1d42d6507805651dec61ecc4df11f37dc1a6","hash":"fcef8ee1a40833b2cf5ecae90bfa22002f46b29a","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/objects/fc/63af0044284a5b08f20cf1444a062176d835fe","hash":"9994dd502452c757856b88aa0d1be86540dd7a82","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/logs/refs/heads/master","hash":"7857895e7f36882c19351d98b970bf5d02f5fbb3","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/git/logs/refs/remotes/origin/HEAD","hash":"7857895e7f36882c19351d98b970bf5d02f5fbb3","modified":1517640263000},{"_id":"themes/next/git/objects/pack/pack-1269648f5d9138dbc11a36e3c17b6c78add232cf.pack","hash":"89d1f41e7015f94c10ff4892685262c9b0081f05","modified":1517633040000},{"_id":"public/baidusitemap.xml","hash":"72907ee242d941c07b3ccaa4386ad76a5189d175","modified":1569222019719},{"_id":"public/search.json","hash":"71999da7db9881cf431eedb1a6c2e183dc0a5e5c","modified":1569222019772},{"_id":"public/sitemap.xml","hash":"a57d11a06e66b64127549f4bb0774f31aba9f732","modified":1569222019772},{"_id":"public/categories/index.html","hash":"9caff503b2c63cfe46b054cc10c24721a5cc88c6","modified":1569222019786},{"_id":"public/tags/index.html","hash":"0144f356a9877ed0bc250a1b85bc7570d667d2ac","modified":1569222019786},{"_id":"public/2018/12/26/springboot-websocket-2018-12-15/index.html","hash":"203be46606cacfcf252d91cac3f432679501ac4c","modified":1569222019787},{"_id":"public/2018/11/20/shadowsocks-2019-3-3/index.html","hash":"a5e5773986d148af57c5824f4c70cfdbf54a55b1","modified":1569222019787},{"_id":"public/2018/09/26/mongodb-kerberos-2018-09-26/index.html","hash":"ff8e9deb90ccd06dc64ce59ee5b7018da7476f61","modified":1569222019787},{"_id":"public/2018/08/04/chapter9-2018-8-4/index.html","hash":"4858c819d44a37aa6eaba3d15598e0c03cdd61e4","modified":1569222019787},{"_id":"public/2018/08/03/chapter8-2018-8-3/index.html","hash":"2b6438f5db0f7025b2b7bff768a279a4f353b528","modified":1569222019787},{"_id":"public/2018/08/02/chapter7-2018-8-2/index.html","hash":"6567f87e1af9613184e9451f4805a023f8ba0aa8","modified":1569222019787},{"_id":"public/2018/08/01/http协议学习-2018-8-1/index.html","hash":"e37af8900f56630f50605325835629cd5f432092","modified":1569222019787},{"_id":"public/2018/08/01/socket知识-2018-8-1/index.html","hash":"f053edab009d07678553ffa1fddded45cefd2314","modified":1569222019787},{"_id":"public/2018/08/01/chapter6-2018-8-1/index.html","hash":"77e3f025853f88119e5483be58c1a371790b5916","modified":1569222019787},{"_id":"public/2018/08/01/tcp-socket-http区别-2018-8-1/index.html","hash":"bbd79465a453f807c5c87dd64d5332115cc55103","modified":1569222019787},{"_id":"public/2018/07/31/chapter5-2018-7-31/index.html","hash":"28f430c1081594c12142df94fe25c1478e889c60","modified":1569222019787},{"_id":"public/2018/07/30/chapter4-2018-7-30/index.html","hash":"c61b22311e0aa41e70e9a071de14038ae84b9c94","modified":1569222019787},{"_id":"public/2018/07/29/chapter3-2018-7-29/index.html","hash":"aec871f3a8d65d046bdb254ac245aa1f6a32e0ed","modified":1569222019787},{"_id":"public/2018/07/29/part1/index.html","hash":"7ff4fef99ade8ef4e915d0c0ec273a66ccf511dc","modified":1569222019787},{"_id":"public/2018/07/29/chapter1-2018-7-27/index.html","hash":"c7340f7bd449ba82f86a27090fd2030ed686621f","modified":1569222019788},{"_id":"public/2018/07/28/chapter2-2018-7-28/index.html","hash":"06aefe3750f0933c5af06a9111b68eaec28f9e26","modified":1569222019788},{"_id":"public/2018/07/25/tcp学习下-2018-07-26/index.html","hash":"04053d0305ca0e7557ad6f3aab9e275ad0d6efc3","modified":1569222019788},{"_id":"public/2018/07/25/tcp名词解析-2018-07-25/index.html","hash":"7ec7837e830ba4a5d113d9f7dff48cd7ed9c748c","modified":1569222019788},{"_id":"public/2018/07/23/空对象模式-2018-07-23/index.html","hash":"cf3bc3b3fba4e96c7926e32c33228c9000a28b09","modified":1569222019788},{"_id":"public/2018/07/22/黑板模式-2018-07-22/index.html","hash":"d185409bd2b01073d91b474cc009235722cb92f9","modified":1569222019788},{"_id":"public/2018/07/21/雇工模式-2018-07-21/index.html","hash":"1acc70c3d9488a821e18dd5f0e7874bb7a8aaef2","modified":1569222019788},{"_id":"public/2018/07/20/tcp学习上-2018-07-24/index.html","hash":"d2c7066727cd4a8a84aeaf1fdef6808f704bba75","modified":1569222019788},{"_id":"public/2018/07/20/对象池模式-2018-07-20/index.html","hash":"9716eca79e46c20a8086715b4f7015ac7094b1e1","modified":1569222019788},{"_id":"public/2018/07/19/规格模式-2018-07-19/index.html","hash":"975d89c8c376c3e42d877dc3070aee2090080a30","modified":1569222019788},{"_id":"public/2018/07/17/netty-codec-2018-07-17/index.html","hash":"a42dfdff2968daa468878bf94139425f6ce67fa6","modified":1569222019788},{"_id":"public/2018/04/03/solr安装分词/index.html","hash":"83aef895c7801bef296441de509ab189ff4af93b","modified":1569222019788},{"_id":"public/2018/03/15/localtunnel-server端搭建/index.html","hash":"e0367ed32bf35ecbd091b1354050e5eeb19bb621","modified":1569222019788},{"_id":"public/2018/02/06/读源码注意的东西/index.html","hash":"5991df52333911f1ad220bea457a612c7725d30c","modified":1569222019788},{"_id":"public/2018/02/05/字符串反转/index.html","hash":"6c1b16262274c6b35dcd38dec7ed8151a5a010a0","modified":1569222019788},{"_id":"public/2018/02/01/linux删除文件除过某个文件/index.html","hash":"9a53e5d352e36dc00e057309e13005aebf50bf8d","modified":1569222019788},{"_id":"public/2018/01/31/linux下使用rsync快速删除大量文件/index.html","hash":"d46d0e6116f0b6d1ac016a3fb0a17858770a49cd","modified":1569222019788},{"_id":"public/2018/01/30/hexo安装部署教程/index.html","hash":"6604b62412feb9f91e98c0132eb62e5cb429bc57","modified":1569222019789},{"_id":"public/2018/01/30/hello-world/index.html","hash":"2db34dad1bdc4f67a54c20ad7edcf5ae1bf45af1","modified":1569222019789},{"_id":"public/archives/index.html","hash":"abb80f88895bf50c3c165c5c91b1b135555f1da9","modified":1569222019789},{"_id":"public/archives/page/2/index.html","hash":"3ceb2293724e407e9404f0f23c8ea85ef02522d6","modified":1569222019789},{"_id":"public/archives/page/3/index.html","hash":"a1cba8a94f21b62da95455dc3534b52b1d96a15e","modified":1569222019789},{"_id":"public/archives/page/4/index.html","hash":"1e96a7614abcd45779d07ee11e82f444dee9fac1","modified":1569222019789},{"_id":"public/archives/2018/index.html","hash":"61970a384407a8ca03847b9a42dc23220046a31a","modified":1569222019789},{"_id":"public/archives/2018/page/2/index.html","hash":"f098fbeb00943ccad2133f686617bd95afea120c","modified":1569222019789},{"_id":"public/archives/2018/page/3/index.html","hash":"33068f623ef2d964fb7f554d901de44ccbb36c30","modified":1569222019789},{"_id":"public/archives/2018/page/4/index.html","hash":"87214d9fd2f6cce40dc2b5c4f326c717e1c4c333","modified":1569222019789},{"_id":"public/archives/2018/01/index.html","hash":"7e408a6c9631d450169ab3c38a1d64a7e55642ff","modified":1569222019789},{"_id":"public/archives/2018/02/index.html","hash":"456c62a0298a1e5bf0786bbcf6b2c676eef41a1d","modified":1569222019790},{"_id":"public/archives/2018/03/index.html","hash":"3435314f492cd738ec8865abb5fa0468e09d8dbb","modified":1569222019790},{"_id":"public/archives/2018/04/index.html","hash":"424c0974b4f9460760fab266f87c2147139b255d","modified":1569222019790},{"_id":"public/archives/2018/07/index.html","hash":"fc5b9a5c68c3aae3f31cd7265ef960ba25ea9f48","modified":1569222019790},{"_id":"public/archives/2018/07/page/2/index.html","hash":"08994a9e56cae8dd71d60bb39988a7975d927902","modified":1569222019790},{"_id":"public/archives/2018/08/index.html","hash":"704e8609fb114444107fb4c3af980458abf173a3","modified":1569222019790},{"_id":"public/archives/2018/09/index.html","hash":"554963d00202abc4a4942a5d0b64041fa42d85b9","modified":1569222019790},{"_id":"public/archives/2018/11/index.html","hash":"44636a5fae019773533cab0c325b644effda79c3","modified":1569222019790},{"_id":"public/archives/2018/12/index.html","hash":"9e71e193d71c49261ce1c15c91edd606e0edcc0d","modified":1569222019790},{"_id":"public/categories/netty/index.html","hash":"64442c7d89983b62ba88355b1c1e17881f18aacc","modified":1569222019790},{"_id":"public/categories/netty/page/2/index.html","hash":"d8550b80c13371a830406f4a952ccb54b7f25425","modified":1569222019790},{"_id":"public/categories/netty/transport/index.html","hash":"26fc865d2e94dfee7e19e3a98e8ebfc7077864ca","modified":1569222019790},{"_id":"public/categories/netty/asynchronous/index.html","hash":"ebc232e3d56ca8cb5f7f7bfa74e9d22a1cd3b6b1","modified":1569222019790},{"_id":"public/categories/netty/ByteBuf/index.html","hash":"aefa5620a36e3ede10276ac9a8629e0d5f3be07f","modified":1569222019791},{"_id":"public/categories/netty/channel/index.html","hash":"8cf929491101046f28270382938c91df530b4106","modified":1569222019791},{"_id":"public/categories/netty/EventLoop/index.html","hash":"94ecd442c6a120681108414eb40c0ccba5793fd7","modified":1569222019791},{"_id":"public/categories/netty/Bootstrap/index.html","hash":"bd9a28ed8b70dadad383eb5cace4f4f0c55fa42b","modified":1569222019791},{"_id":"public/categories/netty/design/index.html","hash":"f1c78ddd39a0582758c9a7a7e1eadf3e6c519875","modified":1569222019791},{"_id":"public/categories/netty/Unit-testing/index.html","hash":"f1ba814627b8842e663ee256c9fd2fcaa35cf440","modified":1569222019791},{"_id":"public/categories/internet/index.html","hash":"9e6802ef14f55166106da5aa0275512edb647c0c","modified":1569222019791},{"_id":"public/categories/linux/index.html","hash":"b596e39e24c7f571cf0bd3a1996d65e5f0f59fe1","modified":1569222019791},{"_id":"public/categories/内网穿透/index.html","hash":"49e3df823a9c4dbd2ce97b9ef89467c6ac2bc2f8","modified":1569222019791},{"_id":"public/categories/kerberos/index.html","hash":"9be9414ff483b2ea53a909a11d7816ff89933d7b","modified":1569222019791},{"_id":"public/categories/netty/codec/index.html","hash":"744cd2e90f4e48bce4242d6a44c77bc27544fd41","modified":1569222019791},{"_id":"public/categories/docker/index.html","hash":"76bd681751ff3564e21ed41a8224ed4dc530f911","modified":1569222019791},{"_id":"public/categories/springboot/index.html","hash":"31261974ba2b1cefacb30e139adb576af09bc478","modified":1569222019792},{"_id":"public/categories/netty/design/components/index.html","hash":"8032ecab1708f3faea78ef7e3601ebefafb47104","modified":1569222019792},{"_id":"public/categories/java/index.html","hash":"f4afa8c702bd8a516f3a4728b4012218a1d70e74","modified":1569222019792},{"_id":"public/categories/power-design/index.html","hash":"0d50e54833f51c811e46eaecb5e2d6477a399d77","modified":1569222019792},{"_id":"public/categories/internet/http/index.html","hash":"3ecc99e14c84e8efb8609a22190af3a5239b4efe","modified":1569222019792},{"_id":"public/categories/linux/shell/index.html","hash":"3f4e2437b488436bb0cdca46ea093b14073cf27a","modified":1569222019792},{"_id":"public/categories/kerberos/mongodb/index.html","hash":"afdefcc25380b4b263c835807901f0ab9d89dac8","modified":1569222019792},{"_id":"public/categories/docker/shadowsocks/index.html","hash":"b5fc4e53d4f57d2a76db491dc0ff0e41a6d5e9e3","modified":1569222019792},{"_id":"public/categories/internet/socket/index.html","hash":"8e1d2359b6fe574d7f4c972be76ef73bc3eae07a","modified":1569222019792},{"_id":"public/categories/linux/solr/index.html","hash":"4b4937d15f66cb0a290b23add6f3a2da6bdcde2c","modified":1569222019792},{"_id":"public/categories/springboot/websocket/index.html","hash":"455a0c86f00405a18f3871998bc2ee6a1c8373f1","modified":1569222019792},{"_id":"public/categories/internet/tcp/index.html","hash":"dda6875b731343d23d5cb7c3cfa9c9f20427ac26","modified":1569222019792},{"_id":"public/categories/kerberos/mongodb/java/index.html","hash":"15cc0a00dc6771cefaa065e9ba9379357d2963a7","modified":1569222019792},{"_id":"public/categories/springboot/websocket/java/index.html","hash":"a2feed796f54122f9e8f734ae8b7ad18b2237b53","modified":1569222019793},{"_id":"public/index.html","hash":"16685ebc94067ccfb6b1a06f60993eb0393c6c3f","modified":1569222019793},{"_id":"public/page/2/index.html","hash":"3c3728ce839fcdd5a672b3b257893aa789ba24ee","modified":1569222019793},{"_id":"public/page/3/index.html","hash":"7695d840a31cc64289912afeb9e7308240a43835","modified":1569222019793},{"_id":"public/page/4/index.html","hash":"c65a7625b53b88765a91ad286bf0eda60b0be8e9","modified":1569222019793},{"_id":"public/tags/netty/index.html","hash":"952652a34564e1428cc20fac366a3fdcb72800bf","modified":1569222019793},{"_id":"public/tags/netty/page/2/index.html","hash":"ff143fa60dec709fa37de1ba7d943d7eba282284","modified":1569222019793},{"_id":"public/tags/http/index.html","hash":"09b3faec27aa739de0c9a13eb35c010f7b9da4ec","modified":1569222019794},{"_id":"public/tags/hexo/index.html","hash":"6b5ebbe6994ff10b2d65caefcea001b8e105a317","modified":1569222019794},{"_id":"public/tags/rsync/index.html","hash":"370bbc3884def0187d433eb907df14096ac40265","modified":1569222019794},{"_id":"public/tags/rm/index.html","hash":"6c469241a85f3b28ef4d67ddb21f9304a30384bb","modified":1569222019794},{"_id":"public/tags/find/index.html","hash":"c004cae71437ab240911fd6603c3b13949bc1ea7","modified":1569222019794},{"_id":"public/tags/localtunnel/index.html","hash":"8a597d586caef6ac01e5cd75ea674c0d356a34c9","modified":1569222019794},{"_id":"public/tags/nginx/index.html","hash":"9bd5a87874c2f127d0e53cedbda57d5c56658c23","modified":1569222019794},{"_id":"public/tags/内网穿透/index.html","hash":"4f368a99616a361a911287c600ab5d353b6d97fe","modified":1569222019794},{"_id":"public/tags/mongodb/index.html","hash":"5d1e54a00ef917ba540742222610b554f9d72de9","modified":1569222019794},{"_id":"public/tags/shadowsocks/index.html","hash":"f5af5ed5d4106d943d8dc5f56b51705593caad1c","modified":1569222019795},{"_id":"public/tags/socket/index.html","hash":"86d6201d5d85a623ed393aca96434241ba75b2ae","modified":1569222019795},{"_id":"public/tags/solr/index.html","hash":"9bd2ce61148304de0d2c64e499c20966a7770c8d","modified":1569222019795},{"_id":"public/tags/lucene/index.html","hash":"4ff5b8ccd47ed400b1c0d17f6c7617f9cec0291d","modified":1569222019795},{"_id":"public/tags/search/index.html","hash":"bddb46d6b26e0a13ef3206f5e2f0a44c30ed323a","modified":1569222019795},{"_id":"public/tags/websocket/index.html","hash":"a3062fd5723333270ddf8f1f8f22769e0a829333","modified":1569222019795},{"_id":"public/tags/tcp/index.html","hash":"abee494f430eebdbcc482a6e6ebf7c2e541b2eac","modified":1569222019795},{"_id":"public/tags/工具/index.html","hash":"1b3aaefca832d844fb8dab53cf0e80c38235b0d8","modified":1569222019795},{"_id":"public/tags/空对象模式/index.html","hash":"90a5ccc2196c95b29e945074c4312e664b69ee26","modified":1569222019795},{"_id":"public/tags/设计模式/index.html","hash":"00ad5d617064ccdd4726a2a4ace8aface7e1a2c9","modified":1569222019795},{"_id":"public/tags/方法/index.html","hash":"d5b860f533cf51a89bba56e81a430e229e806a96","modified":1569222019795},{"_id":"public/tags/源码/index.html","hash":"38c947fae1a0988bfe7e514886be78359e75066d","modified":1569222019795},{"_id":"public/tags/雇工模式/index.html","hash":"eb62a7bcb1239968a16d4e4c0c326638e90ef00d","modified":1569222019795},{"_id":"public/tags/黑板模式/index.html","hash":"773123bdc8cdfba2d632ac1cdf5f48da01d63433","modified":1569222019795},{"_id":"public/CNAME","hash":"18405f89065cfe083c02072f4c9010eb51726364","modified":1569222019828},{"_id":"public/images/favicon-32x32-me.png","hash":"0a172da57a44eca07093987052cdab4636a49b74","modified":1569222019828},{"_id":"public/images/2018-07-19-3.png","hash":"4afa29723a342528369a694a36ec9235752eb907","modified":1569222019828},{"_id":"public/images/user.jpg","hash":"0c62ef39a5218b196b235a3f631e090b6f913be6","modified":1569222019828},{"_id":"public/images/favicon-16x16-me.png","hash":"7996042cab719ea8f84147360bc7c2bc3b57bfed","modified":1569222019828},{"_id":"public/images/internet/2018-8-1-4.png","hash":"0a0cc9839234f956251730ceab77851f40957e0c","modified":1569222019828},{"_id":"public/images/tcp/tcp-fsm.png","hash":"34c92f937d294d778591f86b31e6ae895f949f0a","modified":1569222019828},{"_id":"public/images/tcp/tcp-closesimul.png","hash":"cd24aa24f17629070dfe9e41a88f6cdd97edde16","modified":1569222019829},{"_id":"public/images/netty_part1/2018-7-28-2-1.png","hash":"4453725af73012587c76d3a0b1a3fced2705410a","modified":1569222019829},{"_id":"public/images/tcp/tcp-sack_example.jpg","hash":"294237bfa9cc12494178f8e04805ffc917f0ed19","modified":1569222019829},{"_id":"public/images/netty_part1/2018-7-29-2.png","hash":"96e8b8d4b8a1a0583f0dc73f4572c77f7a7c2483","modified":1569222019829},{"_id":"public/images/netty_part1/2018-8-1-8.png","hash":"406fdbfa8d5196463d0cc60f8068a31049fd0888","modified":1569222019829},{"_id":"public/images/netty_part1/2018-8-2-2.png","hash":"4a46aaf99f3247fadc06946796fb3161e5c198bb","modified":1569222019829},{"_id":"public/images/netty_part1/2018-8-3-1.png","hash":"5e8220d443dd32a115e4232f67cd9fe0ff7a157e","modified":1569222019829},{"_id":"public/images/netty_part1/2018-8-1-11.png","hash":"b189bba333d964106b63ae4667682063047cf77e","modified":1569222019829},{"_id":"public/images/netty_part1/2018-8-4-3.png","hash":"16ce69dc419d22d0fd46b195d5cf026f8722e782","modified":1569222019829},{"_id":"public/images/netty_part1/2018-8-4-2.png","hash":"76a18ee4791a3674c346a3dca0f3633a2e9e5852","modified":1569222019829},{"_id":"public/images/netty_part1/2018-8-4-4.png","hash":"24395d2521c9a3be03f557716e625fac37c9a812","modified":1569222019829},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1569222019829},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1569222019829},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1569222019829},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1569222019830},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1569222019830},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1569222019830},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1569222019830},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1569222019830},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1569222019830},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1569222019830},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1569222019830},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1569222019830},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1569222019830},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1569222019830},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1569222019830},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1569222019830},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1569222019830},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1569222019830},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1569222019830},{"_id":"public/lib/bookmark/LICENSE","hash":"1440355648a72be5b7625fe6fa055b462fcc78b0","modified":1569222019830},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1569222019830},{"_id":"public/lib/bookmark/git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1569222019830},{"_id":"public/lib/bookmark/git/config","hash":"7c5ec419dd0549da89bdd8376a1327f19049f461","modified":1569222019830},{"_id":"public/lib/bookmark/git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1569222019830},{"_id":"public/lib/bookmark/git/index","hash":"ee48ead06a8064904abdb21b5f7625f588d9a399","modified":1569222019830},{"_id":"public/lib/bookmark/git/packed-refs","hash":"ce6db96df1c7bb76f21f98415e199d093343b179","modified":1569222019830},{"_id":"public/lib/bookmark/git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1569222019831},{"_id":"public/lib/bookmark/git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1569222019831},{"_id":"public/lib/bookmark/git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1569222019831},{"_id":"public/lib/bookmark/git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1569222019831},{"_id":"public/lib/bookmark/git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1569222019831},{"_id":"public/lib/bookmark/git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1569222019831},{"_id":"public/lib/bookmark/git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1569222019831},{"_id":"public/lib/bookmark/git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1569222019831},{"_id":"public/lib/bookmark/git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1569222019831},{"_id":"public/lib/bookmark/git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1569222019831},{"_id":"public/lib/bookmark/git/logs/HEAD","hash":"7857895e7f36882c19351d98b970bf5d02f5fbb3","modified":1569222019831},{"_id":"public/lib/bookmark/git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1569222019831},{"_id":"public/lib/bookmark/git/objects/02/b27223487ca819cf7167dc23626af595112e25","hash":"e5bbb1906aa9a8e2696817d19d85aeedf82539ed","modified":1569222019831},{"_id":"public/lib/bookmark/git/objects/0a/9e6b66e9d710a68e08fcc295fca440eabcb4bc","hash":"aa0b269640b41735ba54a9279f10ddd19ecd5887","modified":1569222019831},{"_id":"public/lib/bookmark/git/objects/07/4d4d38a37d506f5db482b5c27ad1143bba5aab","hash":"ee76158694b6490056328594b5d15a54faba253e","modified":1569222019831},{"_id":"public/lib/bookmark/git/refs/heads/master","hash":"c56e03f9e708391a87cdfa4406d93fe5b18684c4","modified":1569222019831},{"_id":"public/lib/bookmark/git/objects/11/8348fe672067e7d9c32c73d586023804eeb565","hash":"2b73c34eb535ff7e7d91cefb5215feddd9f2c36f","modified":1569222019831},{"_id":"public/lib/bookmark/git/objects/0d/61683ea74054da2645effdd51d0a3282d6a9ff","hash":"879563c866dbe7efa0074a1ebcd206723e552f27","modified":1569222019831},{"_id":"public/lib/bookmark/git/objects/18/77388dd9427b36d7c8703038a215b79f1218c2","hash":"8d48c7c0d7427116dbeb32552c576cc4edbe2d38","modified":1569222019831},{"_id":"public/lib/bookmark/git/objects/17/ad1e81c2805cc9c5c00846c8bf9bf16524b55a","hash":"8f779f28267873af1e5c71386603042dbaff6211","modified":1569222019831},{"_id":"public/lib/bookmark/git/objects/16/75d42fcbd2aded2e9b42efe38c347ced893495","hash":"979ec745cfdc8dd979785b78c9be7645bb73d922","modified":1569222019831},{"_id":"public/lib/bookmark/git/objects/1b/db4ff581f77318e6c4783d8e1ce811c37f13bf","hash":"06b3da6e152ffd68ed4617db1c4e3912f41d8bec","modified":1569222019831},{"_id":"public/lib/bookmark/git/objects/2b/358da01f778126b38fc4ddf5ecafa625cad38b","hash":"d4613d86e15d9679b8f1f18950b71a182af4b5c8","modified":1569222019831},{"_id":"public/lib/bookmark/git/objects/2b/d59834388b6377fd14413f2614f550e35e35f1","hash":"654763c707c65aa3f353f8a9edb0cc0ae4bcccfa","modified":1569222019831},{"_id":"public/lib/bookmark/git/objects/2f/425e03cfa918b2d638bbd37279a8b1e7757508","hash":"283713eda90efb64849519db267b652facfdbd63","modified":1569222019832},{"_id":"public/lib/bookmark/git/objects/41/bde8ccd130442ef0b3f8b24764a6d72635a485","hash":"4a833bb669ac126a00dec7153f8c263eab47b024","modified":1569222019832},{"_id":"public/lib/bookmark/git/objects/3f/30e2e442e4fdc1e91d5d1b642662e3900e5d6f","hash":"358397c32831b80fa4828334de7080bdaafe1c52","modified":1569222019832},{"_id":"public/lib/bookmark/git/objects/25/42ea91169dbe9da086918ad02160e42310e185","hash":"3c942c82f3ef7fcd9a15276c82fcf59fa141521c","modified":1569222019832},{"_id":"public/lib/bookmark/git/objects/25/b729e9ad0151b51f50297ea35280111b953236","hash":"af4bf7f3feb175c6980ee81a84f679149f713987","modified":1569222019832},{"_id":"public/lib/bookmark/git/objects/40/b878db5b1c97fc77049537a71bb2e249abe5dc","hash":"929471c4b27858bbdae034381982f996144f6b3d","modified":1569222019832},{"_id":"public/lib/bookmark/git/objects/42/c32aba927940c9e92b9928dceee88eacbf4874","hash":"2c7b6bb078f2eb52eead906df3ed4fa136a1e651","modified":1569222019832},{"_id":"public/lib/bookmark/git/objects/47/1dd1f3ddf970ee3418f801ae787bf98191d47e","hash":"8634518aeeffc4b8b0dbe6ca6159480264cf1916","modified":1569222019832},{"_id":"public/lib/bookmark/git/objects/48/7e5a296eebd45809199d2f557e340603931bad","hash":"6cf9f9b5ae990bbb0083b37b0c29b269cd8cc735","modified":1569222019832},{"_id":"public/lib/bookmark/git/objects/4a/6e0d94cae4e01312054983b4e2e4007e3fd3b8","hash":"9eff6f1c82336ebdab0503e0ab0f753cd18f01ff","modified":1569222019832},{"_id":"public/lib/bookmark/git/objects/4a/7e8d64b8956ffd9339000e62d490f18dcd3ecd","hash":"3cc8fd65b3663a750887093f67bb28696492d5e5","modified":1569222019832},{"_id":"public/lib/bookmark/git/objects/4e/7ec652ef197de221d6576a717edf0b583a688a","hash":"e45f3b02a04d04eb3bcd6373ae79d86cbbd62798","modified":1569222019832},{"_id":"public/lib/bookmark/git/objects/55/31419f7d03a523182be5373e246e43acdf60d7","hash":"274085edc584079218a79c199bd0c7360a700290","modified":1569222019832},{"_id":"public/lib/bookmark/git/objects/58/b257bc636adc71871da51e615e6734c9479f3a","hash":"4e63de59c359c9bf480b47aa5e342ed78663fb58","modified":1569222019832},{"_id":"public/lib/bookmark/git/objects/5f/1541db4b58002e45b9b5fe19426551a8239a49","hash":"9a50dcb663e39892adbfccab943fb8dc37add2d0","modified":1569222019832},{"_id":"public/lib/bookmark/git/objects/61/4795cc61f429929887fde3962027254db90a62","hash":"c4e415dda2e421df728dda51f953cc2f01296378","modified":1569222019832},{"_id":"public/lib/bookmark/git/objects/5e/038b5098480c14a29cefd944e3eb23109473b2","hash":"9c3aba7ff1afc70708a90e2f4f610499ee268d4a","modified":1569222019832},{"_id":"public/lib/bookmark/git/objects/5c/02525c8b55f89f0ec0304cd0d266453bdf0541","hash":"51cab03e6cbebdb421eea45818b1ff7d9ec7783f","modified":1569222019832},{"_id":"public/lib/bookmark/git/objects/5c/ffa97fb277e628a550bc1d8f7fa7c5c776129f","hash":"8c4e4a79d14522f34280ef85c794df6f4886e040","modified":1569222019832},{"_id":"public/lib/bookmark/git/objects/62/150c9d8f54ca62e1af3c9d666bb5e35eb3bdbd","hash":"2998eaea45a0135e879da15851a535ae2940d85e","modified":1569222019832},{"_id":"public/lib/bookmark/git/objects/6d/1188177a8798893f9efe275d4d75d0f9301be9","hash":"b8652b3249ef6662a8dee7c01e5667f7e4f33cc4","modified":1569222019832},{"_id":"public/lib/bookmark/git/objects/77/d7bbc93f0a411d2e50b7c67a2827dece42727f","hash":"6865e0eb54a9882e55e70669a44cdddb2da1665e","modified":1569222019832},{"_id":"public/lib/bookmark/git/objects/7e/58471cd13382a6bafd05015cd0a5b5a8e899eb","hash":"21ae04d7ac48092d7b07b7278bf099cfc2691e57","modified":1569222019832},{"_id":"public/lib/bookmark/git/objects/79/c8a354ccacb4edc27acbcc503f26acf6119624","hash":"7a44189d1189ad7aedea595fc8a4ef387de7041d","modified":1569222019833},{"_id":"public/lib/bookmark/git/objects/8e/b07c89ff54bda39a40d6448a6a8ef4df57c8f2","hash":"fadb84b2a2c5dee0b8f67dd53b4e2b8a5b270e92","modified":1569222019833},{"_id":"public/lib/bookmark/git/objects/8a/7f4f27cc671188881ca5cd80d941720a78be04","hash":"de24124a9660dad2ee4e1d25a3580ac87d42b3e0","modified":1569222019833},{"_id":"public/lib/bookmark/git/objects/8d/ae3702857a081653c16320999ed63f3c6fb719","hash":"cc5ed8d3d17451c722a3ebfa3251fff27d348218","modified":1569222019833},{"_id":"public/lib/bookmark/git/objects/96/353334c808a19403f7d2f0e880668bf8f0e320","hash":"dbcb9efdc52a50d5f0431394c24b35ff47f1833d","modified":1569222019833},{"_id":"public/lib/bookmark/git/objects/97/b44840ca6d92e3e650428f433b75a501b1427c","hash":"a899d561a89c4ab798063c1df81d78015992ad15","modified":1569222019833},{"_id":"public/lib/bookmark/git/objects/9d/a80d05852c1c5aec3e8d31b63d429bcfecc0c5","hash":"392385eddea633b0bea1194c2c66db593c6a9c0a","modified":1569222019833},{"_id":"public/lib/bookmark/git/objects/b5/c8b8aa1a6dba7c8152b49ef103a0952f1bb9ca","hash":"d070cad9094ddcf44be0e16b3872f1fb4f05ae0d","modified":1569222019833},{"_id":"public/lib/bookmark/git/objects/ad/b3297e18bb4d11be9f7305db144e5015f40738","hash":"b44f4417307f3dbb33d30c22700dbfb61c87f198","modified":1569222019833},{"_id":"public/lib/bookmark/git/objects/bf/c91bf59adb7231937b98d35cb952b4bab01fff","hash":"016dc36835bb17ba3f54eebaef4d57f5498015da","modified":1569222019833},{"_id":"public/lib/bookmark/git/objects/bf/05dfc0c17af4b48e94676e1e2feaba911d8c71","hash":"4d8adbebcb8ffb4bc3c61b9c97bd225f128b8e74","modified":1569222019833},{"_id":"public/lib/bookmark/git/objects/c3/75bd4420a3baa49b9a5d52f8040400491ac933","hash":"beb87437d1591c6bec51a6e85176f576092a83f2","modified":1569222019833},{"_id":"public/lib/bookmark/git/objects/ca/799c34c37f63bd64ed9b49413e7fc6db8ab2ef","hash":"4e6ee2dffc199b5954fb34b129fe2f012099463d","modified":1569222019833},{"_id":"public/lib/bookmark/git/objects/cd/ea049768c3f2d2b89792c19a523584590292c5","hash":"5e69fbae98becc6ed3be947a2450511294252891","modified":1569222019833},{"_id":"public/lib/bookmark/git/objects/c7/631242bf4ea5781b2d173d999b41c69fdd8ace","hash":"f2d3b9fb648bed7f61dc917d9ad45550c4c70e77","modified":1569222019833},{"_id":"public/lib/bookmark/git/objects/d2/45f9acfffc2e168c17bcc4e115527f21a77521","hash":"76d31ac0c9ca563b5854fe5b6c5ab46ebb202680","modified":1569222019833},{"_id":"public/lib/bookmark/git/objects/d4/d4c40411de7936e90c6ebbc19e182ad225cb4c","hash":"f8d44f87905d5dfbeb1fdf5519a5256d27d00120","modified":1569222019833},{"_id":"public/lib/bookmark/git/objects/d6/31561b3edf93b81d38f81278d6574c77006e39","hash":"afaad8a2c6944b11695122cf45cedadbc3bd7605","modified":1569222019833},{"_id":"public/lib/bookmark/git/objects/d3/a06b992cfe7d26e022b14abf5ba563e6e63c4a","hash":"6820962ea4a4da9e9de834c97c1630477c30ef20","modified":1569222019833},{"_id":"public/lib/bookmark/git/objects/db/3b3566df6e7d89575c4150067f61087be1bedb","hash":"118afda770f93908ad97d6ad0bb6a42b21aab9cf","modified":1569222019833},{"_id":"public/lib/bookmark/git/objects/ef/090e162cd7cc22d2da95d77acac1d7a1eb9c43","hash":"a6997644fb850bedaeeb01adfc90fc404cf80074","modified":1569222019833},{"_id":"public/lib/bookmark/git/objects/df/af7173f5d152681fb2bc7adfdebb54ad195281","hash":"7fc27717b2f7da8f6a6e40ac8d88c75485a505fa","modified":1569222019833},{"_id":"public/lib/bookmark/git/objects/f6/c892849ea799eb017a3d5bf05edb602780cd38","hash":"3b568af69c7a3dc7439155fe36b64a65e8b0bb79","modified":1569222019833},{"_id":"public/lib/bookmark/git/objects/f7/bc8429b09417e69629d9fa0c2874dd5adc30d2","hash":"d8b3844ae942e165b59b6a57c5decdeb35582539","modified":1569222019833},{"_id":"public/lib/bookmark/git/objects/fb/0a1d42d6507805651dec61ecc4df11f37dc1a6","hash":"fcef8ee1a40833b2cf5ecae90bfa22002f46b29a","modified":1569222019834},{"_id":"public/lib/bookmark/git/objects/fc/63af0044284a5b08f20cf1444a062176d835fe","hash":"9994dd502452c757856b88aa0d1be86540dd7a82","modified":1569222019834},{"_id":"public/lib/bookmark/git/logs/refs/heads/master","hash":"7857895e7f36882c19351d98b970bf5d02f5fbb3","modified":1569222019834},{"_id":"public/lib/bookmark/git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1569222019834},{"_id":"public/lib/bookmark/git/logs/refs/remotes/origin/HEAD","hash":"7857895e7f36882c19351d98b970bf5d02f5fbb3","modified":1569222019834},{"_id":"public/images/2018-07-19-4.png","hash":"67d9260a1b58610b706068231d435d8817d17eaf","modified":1569222020423},{"_id":"public/images/alipay.jpg","hash":"3dfb01e438e0788f909c8e66d438fd33d1e8d868","modified":1569222020423},{"_id":"public/images/2018-07-19-2.jpg","hash":"71062aef88ea80d3bb04916d614347d474ee14f0","modified":1569222020427},{"_id":"public/images/wechatpay.jpg","hash":"7acda7d3f65cbb3da2a72915898e61d2b36ba316","modified":1569222020427},{"_id":"public/images/designPattern/2018-07-19-4.png","hash":"67d9260a1b58610b706068231d435d8817d17eaf","modified":1569222020427},{"_id":"public/images/internet/2018-8-1-2.png","hash":"d1c953813cc32cf1c6c9cdf5d24056fe7dd8b71a","modified":1569222020427},{"_id":"public/images/mongodb/2018-09-26-01.png","hash":"f45f5ca002abf55057c7b34378185d715ab6f450","modified":1569222020427},{"_id":"public/images/tcp/2018-07-19-4.png","hash":"67d9260a1b58610b706068231d435d8817d17eaf","modified":1569222020427},{"_id":"public/images/tcp/tcp-open-close.jpg","hash":"d42e412fd11045e5f11d316937f9541bfc9ce1e2","modified":1569222020427},{"_id":"public/images/netty_part1/2018-7-29-1.png","hash":"60fc3ab85830e57bf2f3cda307ce4a7f393ab3d9","modified":1569222020428},{"_id":"public/images/netty_part1/2018-7-29-3.png","hash":"65a8b3254674bd3d0ccd391caffc95db865c4947","modified":1569222020428},{"_id":"public/images/netty_part1/2018-7-30-3.png","hash":"6afe05c40b66c108dc2822d9f4211c235696a4f3","modified":1569222020428},{"_id":"public/images/netty_part1/2018-7-31-1.png","hash":"43657aedfec9eae3dbcaee9148c0714d7487465b","modified":1569222020428},{"_id":"public/images/netty_part1/2018-7-31-7.png","hash":"90d8e275884f44ec9ed80f66003a271c32442feb","modified":1569222020428},{"_id":"public/images/netty_part1/2018-8-1-10.png","hash":"5112cf23b9c4249bbeb4fe0fbc4cf0e1e4122d3c","modified":1569222020428},{"_id":"public/images/netty_part1/2018-8-1-15.png","hash":"eb4a1a9ee02b4656486b599bc40c9a671e80abec","modified":1569222020428},{"_id":"public/images/netty_part1/2018-8-1-16.png","hash":"88107cbc223113f9874f08d70f2604890e3a1c8c","modified":1569222020428},{"_id":"public/images/netty_part1/2018-8-1-17.png","hash":"cb64bd6cc3b5ee65cfc66e5cbcfea88558b18ec8","modified":1569222020428},{"_id":"public/images/netty_part1/2018-8-1-6.png","hash":"757b41714338f1b83189137007800552cdcf47b4","modified":1569222020428},{"_id":"public/images/netty_part1/2018-8-1-7.png","hash":"4d8ccf6ae5b6f5aca10df8fbed0a58ee8d3611cb","modified":1569222020429},{"_id":"public/images/netty_part1/2018-8-2-5.png","hash":"5b5c6abb0d82c60a8e8432689970babfac29268c","modified":1569222020429},{"_id":"public/images/netty_part1/2018-8-3-4.png","hash":"0de39a9dad50426a391736c97c77adfb430c7f19","modified":1569222020429},{"_id":"public/images/netty_part1/2018-8-2-7.png","hash":"766e5a94db5347df00d521793fd50a041db74015","modified":1569222020429},{"_id":"public/images/netty_part1/2018-8-3-6.png","hash":"95678706c6c22a20d68b1340135eae4c8271bd2f","modified":1569222020429},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1569222020429},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1569222020429},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1569222020438},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1569222020438},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1569222020438},{"_id":"public/js/src/bootstrap.js","hash":"531cdedd7fbe8cb1dab2e4328774a9f6b15b59da","modified":1569222020438},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1569222020438},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1569222020438},{"_id":"public/js/src/love.js","hash":"effa770d8085f7e7fb903de217ce521dff163780","modified":1569222020438},{"_id":"public/js/src/fireworks.js","hash":"f4db481a0422afb08b10d8189fa92a1433da46b0","modified":1569222020438},{"_id":"public/js/src/post-details.js","hash":"d1333fb588d4521b4d1e9c69aef06e0ad1bf0b12","modified":1569222020439},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1569222020439},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1569222020439},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1569222020439},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1569222020439},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1569222020439},{"_id":"public/lib/bookmark/README.html","hash":"be0c3f6a13505fb32611ef5e7269a7e4f35eecc9","modified":1569222020439},{"_id":"public/lib/bookmark/bookmark.min.js","hash":"0f676687733e8f50a9d668f76686524bf0fa6b2d","modified":1569222020439},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1569222020439},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1569222020439},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1569222020439},{"_id":"public/css/main.css","hash":"4a3d2e79f11250294a1c6061c1533a7b354c561e","modified":1569222020439},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1569222020439},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1569222020439},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1569222020440},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1569222020440},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1569222020440},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1569222020440},{"_id":"public/images/2018-07-19-1.jpg","hash":"269ff751555853ec356339d906ee2a45600385fd","modified":1569222020440},{"_id":"public/images/2018-07-22-1.png","hash":"204d024885123bbe8769a7e24f4db03c211ab5e0","modified":1569222020440},{"_id":"public/images/internet/2018-8-1-1.png","hash":"e0d811ed95cd547030ba0d7502e75771b60e5ba6","modified":1569222020440},{"_id":"public/images/internet/2018-8-1-3.png","hash":"54b332f6efdaf05d82993f2f639524e8a8e1c081","modified":1569222020440},{"_id":"public/images/tcp/2018-07-22-1.png","hash":"204d024885123bbe8769a7e24f4db03c211ab5e0","modified":1569222020440},{"_id":"public/images/designPattern/2018-07-22-1.png","hash":"204d024885123bbe8769a7e24f4db03c211ab5e0","modified":1569222020441},{"_id":"public/images/netty_part1/2018-7-30-1.png","hash":"ef70da84e22b8bd6de277e4d2821510f52a91141","modified":1569222020441},{"_id":"public/images/netty_part1/2018-7-30-2.png","hash":"c51241ed5cebf103e201720c6c9d8e27aa2166ac","modified":1569222020441},{"_id":"public/images/netty_part1/2018-7-31-5.png","hash":"1e234469283ccfac03d5dc23d9c9fd3018c896ff","modified":1569222020441},{"_id":"public/images/netty_part1/2018-8-2-1.png","hash":"913fc86e4d8f76bc57552523c052ac965e00060b","modified":1569222020441},{"_id":"public/images/netty_part1/2018-8-1-9.png","hash":"77ec8ccffce3f162e2e9fdd21cf50c416d9c47a9","modified":1569222020442},{"_id":"public/images/netty_part1/2018-8-2-3.png","hash":"25293874051129e6e609de1ff905845ed09aa6b0","modified":1569222020442},{"_id":"public/images/netty_part1/2018-8-2-4.png","hash":"98c1139a35c80a0d1d4c2e5e1d91d4bbdf7deec3","modified":1569222020442},{"_id":"public/images/netty_part1/2018-8-2-6.png","hash":"b9b20881544716b39b4dba24dcc3741a6f1cf71a","modified":1569222020442},{"_id":"public/images/netty_part1/2018-8-4-1.png","hash":"836af5bd3844f1b4315afda9323f658188eb63fe","modified":1569222020442},{"_id":"public/images/netty_part1/2018-8-3-7.png","hash":"11b6c0a74fd2972f1a1eb7564cc962e190f5998f","modified":1569222020442},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1569222020443},{"_id":"public/images/netty_part1/2018-7-31-3.png","hash":"84169b8f2516525d78fb91e92db5f8de4d0a99aa","modified":1569222020451},{"_id":"public/images/netty_part1/2018-7-31-6.png","hash":"581f16c519bb27c65a4a337e6752b1388f8978e8","modified":1569222020451},{"_id":"public/images/netty_part1/2018-8-1-12.png","hash":"824d2232ddcd757ea9509549766bc8bbe40659c2","modified":1569222020451},{"_id":"public/images/netty_part1/2018-8-3-2.png","hash":"42c0ba088433bff97721049f58ecab8c56eaf15e","modified":1569222020452},{"_id":"public/images/netty_part1/2018-8-1-5.png","hash":"46ded4418b1a84d71d9e355051ecbd820f4cec87","modified":1569222020452},{"_id":"public/images/netty_part1/2018-8-3-3.png","hash":"9e9ab4a6718f4ccd141e4b5f27b4a6e1510e0944","modified":1569222020453},{"_id":"public/images/netty_part1/2018-7-31-2.png","hash":"c2ec749cd181cd6aa4daa2d532efb4303b4ad959","modified":1569222020472},{"_id":"public/images/tcp/tcp-header01.png","hash":"12f30c0295edebe9d8c7ae5812c86820af586427","modified":1569222020472},{"_id":"public/images/netty_part1/2018-8-1-14.png","hash":"f39d2ef41288485715b420e7514143b125b64c98","modified":1569222020473},{"_id":"public/images/tcp/tcp-header02.png","hash":"a164aa5d66e56d335c59942e8737525638dec74a","modified":1569222020476},{"_id":"public/images/netty_part1/2018-7-31-4.png","hash":"fd83580116e03240613282c2ec6a4d2db1038c3d","modified":1569222020476},{"_id":"public/images/netty_part1/2018-8-1-13.png","hash":"9fb7eb48c262b6a51792e651e8b99c8594e0b370","modified":1569222020476},{"_id":"public/images/mongodb/2018-09-26-02.png","hash":"a58a166bd4250d7a55900f5511f2732b9f75c78f","modified":1569222020480},{"_id":"public/images/netty_part1/2018-8-3-5.png","hash":"bc4001aaf26c2a8e3e5eb1878640c1a61be28e0b","modified":1569222020480}],"Category":[{"name":"netty","_id":"ck0w29rjv0003uup2i5yijrwj"},{"name":"transport","parent":"ck0w29rjv0003uup2i5yijrwj","_id":"ck0w29rk8000kuup2mv76b7r1"},{"name":"asynchronous","parent":"ck0w29rjv0003uup2i5yijrwj","_id":"ck0w29rkb000quup2bulb770a"},{"name":"ByteBuf","parent":"ck0w29rjv0003uup2i5yijrwj","_id":"ck0w29rke000xuup2saqp19fv"},{"name":"channel","parent":"ck0w29rjv0003uup2i5yijrwj","_id":"ck0w29rkg0015uup2rwrw58c0"},{"name":"EventLoop","parent":"ck0w29rjv0003uup2i5yijrwj","_id":"ck0w29rkk001duup2231jdts3"},{"name":"Bootstrap","parent":"ck0w29rjv0003uup2i5yijrwj","_id":"ck0w29rkn001luup2v9a118kc"},{"name":"design","parent":"ck0w29rjv0003uup2i5yijrwj","_id":"ck0w29rkq001suup2q12ijlbx"},{"name":"Unit testing","parent":"ck0w29rjv0003uup2i5yijrwj","_id":"ck0w29rkt001zuup2yzuxi5wr"},{"name":"internet","_id":"ck0w29rkx0027uup2ymaslgcx"},{"name":"linux","_id":"ck0w29rl0002duup2hkwzs5bf"},{"name":"内网穿透","_id":"ck0w29rl5002nuup2mzyn6hix"},{"name":"kerberos","_id":"ck0w29rl6002ruup20ws3s1qi"},{"name":"codec","parent":"ck0w29rjv0003uup2i5yijrwj","_id":"ck0w29rl6002wuup26nwheijy"},{"name":"docker","_id":"ck0w29rl7002zuup2zlb3n5ye"},{"name":"springboot","_id":"ck0w29rl90037uup2smigs422"},{"name":"components","parent":"ck0w29rkq001suup2q12ijlbx","_id":"ck0w29rlb003huup2iaj1xos8"},{"name":"java","_id":"ck0w29rld003vuup29hecli9b"},{"name":"power design","_id":"ck0w29rlf0040uup2j56skd7a"},{"name":"http","parent":"ck0w29rkx0027uup2ymaslgcx","_id":"ck0w29rlg0044uup2uxoq5vqw"},{"name":"shell","parent":"ck0w29rl0002duup2hkwzs5bf","_id":"ck0w29rlh004euup27nmsennl"},{"name":"mongodb","parent":"ck0w29rl6002ruup20ws3s1qi","_id":"ck0w29rlm004xuup2idyjwjhr"},{"name":"shadowsocks","parent":"ck0w29rl7002zuup2zlb3n5ye","_id":"ck0w29rln0051uup246woo3m8"},{"name":"socket","parent":"ck0w29rkx0027uup2ymaslgcx","_id":"ck0w29rln0052uup2hkzl5oq9"},{"name":"solr","parent":"ck0w29rl0002duup2hkwzs5bf","_id":"ck0w29rln0054uup20mhjddof"},{"name":"websocket","parent":"ck0w29rl90037uup2smigs422","_id":"ck0w29rlo0057uup25nmoega2"},{"name":"tcp","parent":"ck0w29rkx0027uup2ymaslgcx","_id":"ck0w29rlo005auup2tg0pyn99"},{"name":"java","parent":"ck0w29rlm004xuup2idyjwjhr","_id":"ck0w29rlp005duup2dqz5mxpc"},{"name":"java","parent":"ck0w29rlo0057uup25nmoega2","_id":"ck0w29rlp005huup2i3h663k2"}],"Data":[{"_id":"next","data":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}],"Page":[{"title":"categories","date":"2018-02-03T06:09:32.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-02-03 14:09:32\ntype: \"categories\"\n---\n","updated":"2018-02-03T06:09:53.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck0w29rjs0001uup299omria0","content":"","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"","more":""},{"title":"tags","date":"2018-02-03T06:08:24.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-02-03 14:08:24\ntype: \"tags\"\n---\n","updated":"2018-02-03T06:08:57.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck0w29rqz005puup26g9y0gcv","content":"","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"","more":""}],"Post":[{"title":"netty asynchronous","date":"2018-07-29T00:36:02.000Z","_content":"\n## netty 异步(asynchronous)与事件驱动(event-driven)\n\n本章主要介绍java网络、介绍netty、netty核心模块\n\n### blocking i/o\n传统的java版阻塞i/o编程，使用java原生API，要编写很多代码，并且这些api并没有经过装饰，所以比较臃肿。\n示例：\n<!--more-->\n\n```\npublic class BlockingIoExample {\n\n    /**\n     * Listing 1.1 Blocking I/O example\n     * */\n    public void serve(int portNumber) throws IOException {\n        ServerSocket serverSocket = new ServerSocket(portNumber);\n        Socket clientSocket = serverSocket.accept();\n        BufferedReader in = new BufferedReader(\n                new InputStreamReader(clientSocket.getInputStream()));\n        PrintWriter out =\n                new PrintWriter(clientSocket.getOutputStream(), true);\n        String request, response;\n        while ((request = in.readLine()) != null) {\n            if (\"Done\".equals(request)) {\n                break;\n            }\n            response = processRequest(request);\n            out.println(response);\n        }\n    }\n\n    private String processRequest(String request){\n        return \"Processed\";\n    }\n\n    public static void main(String[] args) throws IOException {\n        new BlockingIoExample().serve(8090);\n    }\n}\n```\n试想一下，如果client数量有多少个，就有多少个线程，那么对于资源是极度浪费的，包括栈内存、堆内存、以及系统间线程的切换，以及内存的使用\n\n### non-blocking java NIO\njava是在2002年的JDK1.4支持NIO\n\n#### 简介\n* nio是使用setsockopt()，你自己可以配置sockets 读写请求，如果没数据这个将立即返回，如果有数据，则会堵塞。\n* 可以通过注册一系列的非阻塞sockets 使用系统的事件提示API去决定是否有准备读写的数据\n\nnio: new i/o   \nnio:non-blocking i/o \noio: old blocking i/o\n\n\n#### 选择器 selector\nselector 是一个实现nio的关键因素，它使用了事件通知的API来表示，在一系列sockets中，哪些准备好了可以进行i/o事件，这样一个线程就可以通过selector监控处理多个sockets，这个模型提供给了一个更好的资源管理。\n\n* 很多的连接可以通过一些线程去处理，因此可以减少堆内存溢出，减少多线程之间的切换\n* 在没有nio处理的时候，这些线程可以处理其他任务\n\n尽管nio的出现使得编写应用简单的多，但是想要正确并且安全的编写\n\n\n### introduce netty\n\n* design\n> 多种传输格式使用统一的Api，包括阻塞与非阻塞。简单有力的线程模型、真正的无连接socket支持、链式逻辑部分重用支持\n\n* ease of use\n> 大量的javadoc，以及很多例子、不要求支持jdk1.6以上\n\n* performance\n> 更大的吞吐量、更小的时延远比传统的java Api好的多，并且通过pooling以及reuse减少资源的占用，最小的内存拷贝\n\n* robustness（强劲、结实）\n> 不会由于慢、快以及超负载的连接导致outofMemoryError ，在传统nio高速网上排除不公平的读写速率\n\n* Security\n> 完整的SSL/TLS 以及StartTLS支持。可用于限制环境、例如Applet 或者OSGI\n\n* Community-driven\n> 非常快的迭代版本\n\n\n#### asynchronous and event-Driven\n* 异步\n> 顾名思义,当你调用一个方法时，可以立即给你回复、如果这个事件没有完成，也会给你立即回复，然后一会儿当事件完成时通知你\n\n* 事件驱动\n> 一个问题与一个答案总是挂钩的（事务的处理逻辑），无论何时何地（当事件发生的时候（问题触发、事务触发））他都可以响应（答案）\n\n\n\n#### netty 核心部分\n* channels\n> java NIO的基本构成，\n一个（实体，例如硬件设备、文件、网络socket）打开的连接，一个或多个不同的I/o操作，例如读和写\n可以认为channel 是一个进入、出去数据的载货车，当然，它可以关闭或打开，连接或断开\n\n* Callbacks\n> 回调方法，当事情发生了，会调用\n\n* Futures\n> future主要用于另外一种方式来通知应用，当操作完成的时候，相当于异步操作结果的占位对象，它可能在未来某个时间节点完成，并且提供完成的结果\n\nnetty 中的ChannelFuture提供额外的方法允许我们注册一个或者多个ChannelFutureListener 实例，当任务完成的时候，会进行这些监听器方法的调用，每一个outbound(往外发的数据)异步操作都会返回一个Future\n\n* Event and handlers\n> 基于时间触发后的处理可以包括：日志、数据转换、流控、应用逻辑\n> 时间的类型：连接的active、inactive、数据读、用户事件、错误事件\n> 出站的事件类型：打开或者关闭远程连接，写数据并且刷新到socket中\n\n","source":"_posts/chapter1-2018-7-27.md","raw":"---\ntitle: netty asynchronous\ndate: 2018-07-29 08:36:02\ntags: netty\ncategories: [\"netty\",\"asynchronous\"]\n---\n\n## netty 异步(asynchronous)与事件驱动(event-driven)\n\n本章主要介绍java网络、介绍netty、netty核心模块\n\n### blocking i/o\n传统的java版阻塞i/o编程，使用java原生API，要编写很多代码，并且这些api并没有经过装饰，所以比较臃肿。\n示例：\n<!--more-->\n\n```\npublic class BlockingIoExample {\n\n    /**\n     * Listing 1.1 Blocking I/O example\n     * */\n    public void serve(int portNumber) throws IOException {\n        ServerSocket serverSocket = new ServerSocket(portNumber);\n        Socket clientSocket = serverSocket.accept();\n        BufferedReader in = new BufferedReader(\n                new InputStreamReader(clientSocket.getInputStream()));\n        PrintWriter out =\n                new PrintWriter(clientSocket.getOutputStream(), true);\n        String request, response;\n        while ((request = in.readLine()) != null) {\n            if (\"Done\".equals(request)) {\n                break;\n            }\n            response = processRequest(request);\n            out.println(response);\n        }\n    }\n\n    private String processRequest(String request){\n        return \"Processed\";\n    }\n\n    public static void main(String[] args) throws IOException {\n        new BlockingIoExample().serve(8090);\n    }\n}\n```\n试想一下，如果client数量有多少个，就有多少个线程，那么对于资源是极度浪费的，包括栈内存、堆内存、以及系统间线程的切换，以及内存的使用\n\n### non-blocking java NIO\njava是在2002年的JDK1.4支持NIO\n\n#### 简介\n* nio是使用setsockopt()，你自己可以配置sockets 读写请求，如果没数据这个将立即返回，如果有数据，则会堵塞。\n* 可以通过注册一系列的非阻塞sockets 使用系统的事件提示API去决定是否有准备读写的数据\n\nnio: new i/o   \nnio:non-blocking i/o \noio: old blocking i/o\n\n\n#### 选择器 selector\nselector 是一个实现nio的关键因素，它使用了事件通知的API来表示，在一系列sockets中，哪些准备好了可以进行i/o事件，这样一个线程就可以通过selector监控处理多个sockets，这个模型提供给了一个更好的资源管理。\n\n* 很多的连接可以通过一些线程去处理，因此可以减少堆内存溢出，减少多线程之间的切换\n* 在没有nio处理的时候，这些线程可以处理其他任务\n\n尽管nio的出现使得编写应用简单的多，但是想要正确并且安全的编写\n\n\n### introduce netty\n\n* design\n> 多种传输格式使用统一的Api，包括阻塞与非阻塞。简单有力的线程模型、真正的无连接socket支持、链式逻辑部分重用支持\n\n* ease of use\n> 大量的javadoc，以及很多例子、不要求支持jdk1.6以上\n\n* performance\n> 更大的吞吐量、更小的时延远比传统的java Api好的多，并且通过pooling以及reuse减少资源的占用，最小的内存拷贝\n\n* robustness（强劲、结实）\n> 不会由于慢、快以及超负载的连接导致outofMemoryError ，在传统nio高速网上排除不公平的读写速率\n\n* Security\n> 完整的SSL/TLS 以及StartTLS支持。可用于限制环境、例如Applet 或者OSGI\n\n* Community-driven\n> 非常快的迭代版本\n\n\n#### asynchronous and event-Driven\n* 异步\n> 顾名思义,当你调用一个方法时，可以立即给你回复、如果这个事件没有完成，也会给你立即回复，然后一会儿当事件完成时通知你\n\n* 事件驱动\n> 一个问题与一个答案总是挂钩的（事务的处理逻辑），无论何时何地（当事件发生的时候（问题触发、事务触发））他都可以响应（答案）\n\n\n\n#### netty 核心部分\n* channels\n> java NIO的基本构成，\n一个（实体，例如硬件设备、文件、网络socket）打开的连接，一个或多个不同的I/o操作，例如读和写\n可以认为channel 是一个进入、出去数据的载货车，当然，它可以关闭或打开，连接或断开\n\n* Callbacks\n> 回调方法，当事情发生了，会调用\n\n* Futures\n> future主要用于另外一种方式来通知应用，当操作完成的时候，相当于异步操作结果的占位对象，它可能在未来某个时间节点完成，并且提供完成的结果\n\nnetty 中的ChannelFuture提供额外的方法允许我们注册一个或者多个ChannelFutureListener 实例，当任务完成的时候，会进行这些监听器方法的调用，每一个outbound(往外发的数据)异步操作都会返回一个Future\n\n* Event and handlers\n> 基于时间触发后的处理可以包括：日志、数据转换、流控、应用逻辑\n> 时间的类型：连接的active、inactive、数据读、用户事件、错误事件\n> 出站的事件类型：打开或者关闭远程连接，写数据并且刷新到socket中\n\n","slug":"chapter1-2018-7-27","published":1,"updated":"2019-09-23T06:59:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0w29rjo0000uup29kvpkpz3","content":"<h2 id=\"netty-异步-asynchronous-与事件驱动-event-driven\"><a href=\"#netty-异步-asynchronous-与事件驱动-event-driven\" class=\"headerlink\" title=\"netty 异步(asynchronous)与事件驱动(event-driven)\"></a>netty 异步(asynchronous)与事件驱动(event-driven)</h2><p>本章主要介绍java网络、介绍netty、netty核心模块</p>\n<h3 id=\"blocking-i-o\"><a href=\"#blocking-i-o\" class=\"headerlink\" title=\"blocking i/o\"></a>blocking i/o</h3><p>传统的java版阻塞i/o编程，使用java原生API，要编写很多代码，并且这些api并没有经过装饰，所以比较臃肿。<br>示例：<br><a id=\"more\"></a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BlockingIoExample &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Listing 1.1 Blocking I/O example</span><br><span class=\"line\">     * */</span><br><span class=\"line\">    public void serve(int portNumber) throws IOException &#123;</span><br><span class=\"line\">        ServerSocket serverSocket = new ServerSocket(portNumber);</span><br><span class=\"line\">        Socket clientSocket = serverSocket.accept();</span><br><span class=\"line\">        BufferedReader in = new BufferedReader(</span><br><span class=\"line\">                new InputStreamReader(clientSocket.getInputStream()));</span><br><span class=\"line\">        PrintWriter out =</span><br><span class=\"line\">                new PrintWriter(clientSocket.getOutputStream(), true);</span><br><span class=\"line\">        String request, response;</span><br><span class=\"line\">        while ((request = in.readLine()) != null) &#123;</span><br><span class=\"line\">            if (&quot;Done&quot;.equals(request)) &#123;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            response = processRequest(request);</span><br><span class=\"line\">            out.println(response);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String processRequest(String request)&#123;</span><br><span class=\"line\">        return &quot;Processed&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\">        new BlockingIoExample().serve(8090);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>试想一下，如果client数量有多少个，就有多少个线程，那么对于资源是极度浪费的，包括栈内存、堆内存、以及系统间线程的切换，以及内存的使用</p>\n<h3 id=\"non-blocking-java-NIO\"><a href=\"#non-blocking-java-NIO\" class=\"headerlink\" title=\"non-blocking java NIO\"></a>non-blocking java NIO</h3><p>java是在2002年的JDK1.4支持NIO</p>\n<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><ul>\n<li>nio是使用setsockopt()，你自己可以配置sockets 读写请求，如果没数据这个将立即返回，如果有数据，则会堵塞。</li>\n<li>可以通过注册一系列的非阻塞sockets 使用系统的事件提示API去决定是否有准备读写的数据</li>\n</ul>\n<p>nio: new i/o<br>nio:non-blocking i/o<br>oio: old blocking i/o</p>\n<h4 id=\"选择器-selector\"><a href=\"#选择器-selector\" class=\"headerlink\" title=\"选择器 selector\"></a>选择器 selector</h4><p>selector 是一个实现nio的关键因素，它使用了事件通知的API来表示，在一系列sockets中，哪些准备好了可以进行i/o事件，这样一个线程就可以通过selector监控处理多个sockets，这个模型提供给了一个更好的资源管理。</p>\n<ul>\n<li>很多的连接可以通过一些线程去处理，因此可以减少堆内存溢出，减少多线程之间的切换</li>\n<li>在没有nio处理的时候，这些线程可以处理其他任务</li>\n</ul>\n<p>尽管nio的出现使得编写应用简单的多，但是想要正确并且安全的编写</p>\n<h3 id=\"introduce-netty\"><a href=\"#introduce-netty\" class=\"headerlink\" title=\"introduce netty\"></a>introduce netty</h3><ul>\n<li><p>design</p>\n<blockquote>\n<p>多种传输格式使用统一的Api，包括阻塞与非阻塞。简单有力的线程模型、真正的无连接socket支持、链式逻辑部分重用支持</p>\n</blockquote>\n</li>\n<li><p>ease of use</p>\n<blockquote>\n<p>大量的javadoc，以及很多例子、不要求支持jdk1.6以上</p>\n</blockquote>\n</li>\n<li><p>performance</p>\n<blockquote>\n<p>更大的吞吐量、更小的时延远比传统的java Api好的多，并且通过pooling以及reuse减少资源的占用，最小的内存拷贝</p>\n</blockquote>\n</li>\n<li><p>robustness（强劲、结实）</p>\n<blockquote>\n<p>不会由于慢、快以及超负载的连接导致outofMemoryError ，在传统nio高速网上排除不公平的读写速率</p>\n</blockquote>\n</li>\n<li><p>Security</p>\n<blockquote>\n<p>完整的SSL/TLS 以及StartTLS支持。可用于限制环境、例如Applet 或者OSGI</p>\n</blockquote>\n</li>\n<li><p>Community-driven</p>\n<blockquote>\n<p>非常快的迭代版本</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"asynchronous-and-event-Driven\"><a href=\"#asynchronous-and-event-Driven\" class=\"headerlink\" title=\"asynchronous and event-Driven\"></a>asynchronous and event-Driven</h4><ul>\n<li><p>异步</p>\n<blockquote>\n<p>顾名思义,当你调用一个方法时，可以立即给你回复、如果这个事件没有完成，也会给你立即回复，然后一会儿当事件完成时通知你</p>\n</blockquote>\n</li>\n<li><p>事件驱动</p>\n<blockquote>\n<p>一个问题与一个答案总是挂钩的（事务的处理逻辑），无论何时何地（当事件发生的时候（问题触发、事务触发））他都可以响应（答案）</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"netty-核心部分\"><a href=\"#netty-核心部分\" class=\"headerlink\" title=\"netty 核心部分\"></a>netty 核心部分</h4><ul>\n<li><p>channels</p>\n<blockquote>\n<p>java NIO的基本构成，<br>一个（实体，例如硬件设备、文件、网络socket）打开的连接，一个或多个不同的I/o操作，例如读和写<br>可以认为channel 是一个进入、出去数据的载货车，当然，它可以关闭或打开，连接或断开</p>\n</blockquote>\n</li>\n<li><p>Callbacks</p>\n<blockquote>\n<p>回调方法，当事情发生了，会调用</p>\n</blockquote>\n</li>\n<li><p>Futures</p>\n<blockquote>\n<p>future主要用于另外一种方式来通知应用，当操作完成的时候，相当于异步操作结果的占位对象，它可能在未来某个时间节点完成，并且提供完成的结果</p>\n</blockquote>\n</li>\n</ul>\n<p>netty 中的ChannelFuture提供额外的方法允许我们注册一个或者多个ChannelFutureListener 实例，当任务完成的时候，会进行这些监听器方法的调用，每一个outbound(往外发的数据)异步操作都会返回一个Future</p>\n<ul>\n<li>Event and handlers<blockquote>\n<p>基于时间触发后的处理可以包括：日志、数据转换、流控、应用逻辑<br>时间的类型：连接的active、inactive、数据读、用户事件、错误事件<br>出站的事件类型：打开或者关闭远程连接，写数据并且刷新到socket中</p>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"<h2 id=\"netty-异步-asynchronous-与事件驱动-event-driven\"><a href=\"#netty-异步-asynchronous-与事件驱动-event-driven\" class=\"headerlink\" title=\"netty 异步(asynchronous)与事件驱动(event-driven)\"></a>netty 异步(asynchronous)与事件驱动(event-driven)</h2><p>本章主要介绍java网络、介绍netty、netty核心模块</p>\n<h3 id=\"blocking-i-o\"><a href=\"#blocking-i-o\" class=\"headerlink\" title=\"blocking i/o\"></a>blocking i/o</h3><p>传统的java版阻塞i/o编程，使用java原生API，要编写很多代码，并且这些api并没有经过装饰，所以比较臃肿。<br>示例：<br>","more":"</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BlockingIoExample &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Listing 1.1 Blocking I/O example</span><br><span class=\"line\">     * */</span><br><span class=\"line\">    public void serve(int portNumber) throws IOException &#123;</span><br><span class=\"line\">        ServerSocket serverSocket = new ServerSocket(portNumber);</span><br><span class=\"line\">        Socket clientSocket = serverSocket.accept();</span><br><span class=\"line\">        BufferedReader in = new BufferedReader(</span><br><span class=\"line\">                new InputStreamReader(clientSocket.getInputStream()));</span><br><span class=\"line\">        PrintWriter out =</span><br><span class=\"line\">                new PrintWriter(clientSocket.getOutputStream(), true);</span><br><span class=\"line\">        String request, response;</span><br><span class=\"line\">        while ((request = in.readLine()) != null) &#123;</span><br><span class=\"line\">            if (&quot;Done&quot;.equals(request)) &#123;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            response = processRequest(request);</span><br><span class=\"line\">            out.println(response);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String processRequest(String request)&#123;</span><br><span class=\"line\">        return &quot;Processed&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\">        new BlockingIoExample().serve(8090);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>试想一下，如果client数量有多少个，就有多少个线程，那么对于资源是极度浪费的，包括栈内存、堆内存、以及系统间线程的切换，以及内存的使用</p>\n<h3 id=\"non-blocking-java-NIO\"><a href=\"#non-blocking-java-NIO\" class=\"headerlink\" title=\"non-blocking java NIO\"></a>non-blocking java NIO</h3><p>java是在2002年的JDK1.4支持NIO</p>\n<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><ul>\n<li>nio是使用setsockopt()，你自己可以配置sockets 读写请求，如果没数据这个将立即返回，如果有数据，则会堵塞。</li>\n<li>可以通过注册一系列的非阻塞sockets 使用系统的事件提示API去决定是否有准备读写的数据</li>\n</ul>\n<p>nio: new i/o<br>nio:non-blocking i/o<br>oio: old blocking i/o</p>\n<h4 id=\"选择器-selector\"><a href=\"#选择器-selector\" class=\"headerlink\" title=\"选择器 selector\"></a>选择器 selector</h4><p>selector 是一个实现nio的关键因素，它使用了事件通知的API来表示，在一系列sockets中，哪些准备好了可以进行i/o事件，这样一个线程就可以通过selector监控处理多个sockets，这个模型提供给了一个更好的资源管理。</p>\n<ul>\n<li>很多的连接可以通过一些线程去处理，因此可以减少堆内存溢出，减少多线程之间的切换</li>\n<li>在没有nio处理的时候，这些线程可以处理其他任务</li>\n</ul>\n<p>尽管nio的出现使得编写应用简单的多，但是想要正确并且安全的编写</p>\n<h3 id=\"introduce-netty\"><a href=\"#introduce-netty\" class=\"headerlink\" title=\"introduce netty\"></a>introduce netty</h3><ul>\n<li><p>design</p>\n<blockquote>\n<p>多种传输格式使用统一的Api，包括阻塞与非阻塞。简单有力的线程模型、真正的无连接socket支持、链式逻辑部分重用支持</p>\n</blockquote>\n</li>\n<li><p>ease of use</p>\n<blockquote>\n<p>大量的javadoc，以及很多例子、不要求支持jdk1.6以上</p>\n</blockquote>\n</li>\n<li><p>performance</p>\n<blockquote>\n<p>更大的吞吐量、更小的时延远比传统的java Api好的多，并且通过pooling以及reuse减少资源的占用，最小的内存拷贝</p>\n</blockquote>\n</li>\n<li><p>robustness（强劲、结实）</p>\n<blockquote>\n<p>不会由于慢、快以及超负载的连接导致outofMemoryError ，在传统nio高速网上排除不公平的读写速率</p>\n</blockquote>\n</li>\n<li><p>Security</p>\n<blockquote>\n<p>完整的SSL/TLS 以及StartTLS支持。可用于限制环境、例如Applet 或者OSGI</p>\n</blockquote>\n</li>\n<li><p>Community-driven</p>\n<blockquote>\n<p>非常快的迭代版本</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"asynchronous-and-event-Driven\"><a href=\"#asynchronous-and-event-Driven\" class=\"headerlink\" title=\"asynchronous and event-Driven\"></a>asynchronous and event-Driven</h4><ul>\n<li><p>异步</p>\n<blockquote>\n<p>顾名思义,当你调用一个方法时，可以立即给你回复、如果这个事件没有完成，也会给你立即回复，然后一会儿当事件完成时通知你</p>\n</blockquote>\n</li>\n<li><p>事件驱动</p>\n<blockquote>\n<p>一个问题与一个答案总是挂钩的（事务的处理逻辑），无论何时何地（当事件发生的时候（问题触发、事务触发））他都可以响应（答案）</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"netty-核心部分\"><a href=\"#netty-核心部分\" class=\"headerlink\" title=\"netty 核心部分\"></a>netty 核心部分</h4><ul>\n<li><p>channels</p>\n<blockquote>\n<p>java NIO的基本构成，<br>一个（实体，例如硬件设备、文件、网络socket）打开的连接，一个或多个不同的I/o操作，例如读和写<br>可以认为channel 是一个进入、出去数据的载货车，当然，它可以关闭或打开，连接或断开</p>\n</blockquote>\n</li>\n<li><p>Callbacks</p>\n<blockquote>\n<p>回调方法，当事情发生了，会调用</p>\n</blockquote>\n</li>\n<li><p>Futures</p>\n<blockquote>\n<p>future主要用于另外一种方式来通知应用，当操作完成的时候，相当于异步操作结果的占位对象，它可能在未来某个时间节点完成，并且提供完成的结果</p>\n</blockquote>\n</li>\n</ul>\n<p>netty 中的ChannelFuture提供额外的方法允许我们注册一个或者多个ChannelFutureListener 实例，当任务完成的时候，会进行这些监听器方法的调用，每一个outbound(往外发的数据)异步操作都会返回一个Future</p>\n<ul>\n<li>Event and handlers<blockquote>\n<p>基于时间触发后的处理可以包括：日志、数据转换、流控、应用逻辑<br>时间的类型：连接的active、inactive、数据读、用户事件、错误事件<br>出站的事件类型：打开或者关闭远程连接，写数据并且刷新到socket中</p>\n</blockquote>\n</li>\n</ul>"},{"title":"netty-第一个netty应用","date":"2018-07-28T00:36:02.000Z","_content":"\n### 简介\n本章主要从三方面开始创建netty应用，主要覆盖 1.设置开发环境。2.写一个基于Echo client与server的程序。3.building并且测试你的程序\n\n#### 设置开发环境\n基于unix通常需要：\n\n* jdk7  jre不能compile，请设置JAVA_HOME等相关环境变量，并将$JAVA_HOME/bin添加入环境变量\n* maven  创建管理的工具  设置MAVEN_HOME环境变量，并将$MAVEN_HOME/bin添加入环境变量\n* plain text edit 或者 integrated development environment -> IDE\n<!--more-->\n\n\n#### netty client/server 简介\n如图所示：![echo server/client view](/images/netty_part1/2018-7-28-2-1.png)\n\n主要功能是实现 ，当echo client与server监理连接后，它将发送一个或多个信息给server，然后server将echo 每一条信息给client\n> 这幅图展示了多个client与server的交互，client的数量理论上是可以被限制的，仅仅受系统资源的限制（或者jdk本身强制限制）\n\n##### echo server\n* 要求\n\n> 至少一个channelHandler 这个主要实现server端的业务处理逻辑\n\n> bootstrapping,开始代码配置server,最低限度的配置，绑定端口并且监听请求连接\n\n###### channelHandlers 与 业务逻辑\n在netty中，ChannelHandler主要用于接收以及响应事件的通知。在netty中，所有的数据处理逻辑都包含在在里面。在EchoServer中，server将回复进来的数据，一次我们需要实现接口 **ChannleInboundHandler**,相关方法定义了入站事务，我们的例子比较简单，因此只需要一些方法，因此最有效的是使用子类 **ChannleINbouondHandlerAdapter** 这个子类是接口提供个默认实现，主要有以下几个方法与我们有关 \n\n```\n@Sharable\npublic class EchoServerHandler extends ChannelInboundHandlerAdapter {\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) {\n        ByteBuf in = (ByteBuf) msg;\n        System.out.println(\n                \"Server received: \" + in.toString(CharsetUtil.UTF_8));\n        ctx.write(in);\n    }\n\n    @Override\n    public void channelReadComplete(ChannelHandlerContext ctx)\n            throws Exception {\n        ctx.writeAndFlush(Unpooled.EMPTY_BUFFER)\n                .addListener(ChannelFutureListener.CLOSE);\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx,\n        Throwable cause) {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n```\n* channelRead 有入站数据的时候会被调用\n* channelReadComplete 通知handler 在当前批次最后一条消息被调用\n* exceptionCaught  发生异常的时候被调用 ，每个channle 都有一个chain（管道），因此最好有一个handler实现该方法，否则，一旦有异常发生，会直到链尾才会被打印出来\n\n**channlehandlers**\n支持不同的事件类型格式，应用实现了ChannlHandlers可以实现一个事件整个生命周期的钩子，并且提供自己的业务逻辑。业务代码与网络代码解耦\n\n\n###### bootstrapping 服务\nbootstrap是配置服务\n```\npublic class EchoServer {\n    private final int port;\n\n    public EchoServer(int port) {\n        this.port = port;\n    }\n\n    public static void main(String[] args)\n        throws Exception {\n        if (args.length != 1) {\n            System.err.println(\"Usage: \" + EchoServer.class.getSimpleName() +\n                \" <port>\"\n            );\n            return;\n        }\n        int port = Integer.parseInt(args[0]);\n        new EchoServer(port).start();\n    }\n\n    public void start() throws Exception {\n        final EchoServerHandler serverHandler = new EchoServerHandler();  //创建我们的处理handler\n        EventLoopGroup group = new NioEventLoopGroup();   //创建一个nio事件循环组\n        try {\n            ServerBootstrap b = new ServerBootstrap();   //创建一个bootstrap\n            b.group(group)    //绑定事件循环组\n                .channel(NioServerSocketChannel.class)   //指定处理的channle类型\n                .localAddress(new InetSocketAddress(port))    //绑定端口\n                .childHandler(new ChannelInitializer<SocketChannel>() {  //初始化一个channle\n                    @Override\n                    public void initChannel(SocketChannel ch) throws Exception {\n                        ch.pipeline().addLast(serverHandler);   //添加我们的业务逻辑到处理链条中\n                    }\n                });\n\n            ChannelFuture f = b.bind().sync();      //同步绑定\n            System.out.println(EchoServer.class.getName() +\n                \" started and listening for connections on \" + f.channel().localAddress());\n            f.channel().closeFuture().sync();   //阻塞到channle 同步关闭\n        } finally {\n            group.shutdownGracefully().sync();    //优雅的同步关闭\n        }\n    }\n}\n```\n\n##### echo client\n###### 简介\n1. 连接server\n2. 发送一个或多个消息\n3. 对每个消息，等待接收到同样的消息\n4. 关闭连接\n\nChannelInboundHandler-> SimpleChannelInboundHandler\n需要实现的方法\n* channelActive()—Called after the connection to the server is established，连接建立的时候\n* channelRead0()—Called when a message is received from the server    当接收到消息的时候\n* exceptionCaught()—Called if an exception is raised during processing 发生异常的时候\n\n\n###### Bootstrap client\n```\npublic class EchoClient {\n    private final String host;\n    private final int port;\n\n    public EchoClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void start()\n        throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n                .channel(NioSocketChannel.class)   //与server端不同的\n                .remoteAddress(new InetSocketAddress(host, port))\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    public void initChannel(SocketChannel ch)\n                        throws Exception {\n                        ch.pipeline().addLast(\n                             new EchoClientHandler());  //实现自己的业务逻辑\n                    }\n                });\n            ChannelFuture f = b.connect().sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully().sync();\n        }\n    }\n\n    public static void main(String[] args)\n            throws Exception {\n        if (args.length != 2) {\n            System.err.println(\"Usage: \" + EchoClient.class.getSimpleName() +\n                    \" <host> <port>\"\n            );\n            return;\n        }\n\n        final String host = args[0];\n        final int port = Integer.parseInt(args[1]);\n        new EchoClient(host, port).start();\n    }\n}\n```\n\n###### echo client handler\n```\npublic class EchoClientHandler\n    extends SimpleChannelInboundHandler<ByteBuf> {\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) {\n        ctx.writeAndFlush(Unpooled.copiedBuffer(\"Netty rocks!\",\n                CharsetUtil.UTF_8));\n    }\n\n    @Override\n    public void channelRead0(ChannelHandlerContext ctx, ByteBuf in) {\n        System.out.println(\n                \"Client received: \" + in.toString(CharsetUtil.UTF_8));\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx,\n        Throwable cause) {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n```\n\n\n\n* SimpleChannelInboundHandler vs. ChannelInboundHandler\n\nSimpleChannelInboundHandler 调用完channelRead0() 完成后，将会释放ByteBuf的内存，而server端则不能释放，因为发送出去，是在调用readComplete的时候，才会发送。\n\n\n\n\n\n\n\n","source":"_posts/chapter2-2018-7-28.md","raw":"---\ntitle: netty-第一个netty应用\ndate: 2018-07-28 08:36:02\ntags: netty\ncategories: \"netty\"\n---\n\n### 简介\n本章主要从三方面开始创建netty应用，主要覆盖 1.设置开发环境。2.写一个基于Echo client与server的程序。3.building并且测试你的程序\n\n#### 设置开发环境\n基于unix通常需要：\n\n* jdk7  jre不能compile，请设置JAVA_HOME等相关环境变量，并将$JAVA_HOME/bin添加入环境变量\n* maven  创建管理的工具  设置MAVEN_HOME环境变量，并将$MAVEN_HOME/bin添加入环境变量\n* plain text edit 或者 integrated development environment -> IDE\n<!--more-->\n\n\n#### netty client/server 简介\n如图所示：![echo server/client view](/images/netty_part1/2018-7-28-2-1.png)\n\n主要功能是实现 ，当echo client与server监理连接后，它将发送一个或多个信息给server，然后server将echo 每一条信息给client\n> 这幅图展示了多个client与server的交互，client的数量理论上是可以被限制的，仅仅受系统资源的限制（或者jdk本身强制限制）\n\n##### echo server\n* 要求\n\n> 至少一个channelHandler 这个主要实现server端的业务处理逻辑\n\n> bootstrapping,开始代码配置server,最低限度的配置，绑定端口并且监听请求连接\n\n###### channelHandlers 与 业务逻辑\n在netty中，ChannelHandler主要用于接收以及响应事件的通知。在netty中，所有的数据处理逻辑都包含在在里面。在EchoServer中，server将回复进来的数据，一次我们需要实现接口 **ChannleInboundHandler**,相关方法定义了入站事务，我们的例子比较简单，因此只需要一些方法，因此最有效的是使用子类 **ChannleINbouondHandlerAdapter** 这个子类是接口提供个默认实现，主要有以下几个方法与我们有关 \n\n```\n@Sharable\npublic class EchoServerHandler extends ChannelInboundHandlerAdapter {\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) {\n        ByteBuf in = (ByteBuf) msg;\n        System.out.println(\n                \"Server received: \" + in.toString(CharsetUtil.UTF_8));\n        ctx.write(in);\n    }\n\n    @Override\n    public void channelReadComplete(ChannelHandlerContext ctx)\n            throws Exception {\n        ctx.writeAndFlush(Unpooled.EMPTY_BUFFER)\n                .addListener(ChannelFutureListener.CLOSE);\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx,\n        Throwable cause) {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n```\n* channelRead 有入站数据的时候会被调用\n* channelReadComplete 通知handler 在当前批次最后一条消息被调用\n* exceptionCaught  发生异常的时候被调用 ，每个channle 都有一个chain（管道），因此最好有一个handler实现该方法，否则，一旦有异常发生，会直到链尾才会被打印出来\n\n**channlehandlers**\n支持不同的事件类型格式，应用实现了ChannlHandlers可以实现一个事件整个生命周期的钩子，并且提供自己的业务逻辑。业务代码与网络代码解耦\n\n\n###### bootstrapping 服务\nbootstrap是配置服务\n```\npublic class EchoServer {\n    private final int port;\n\n    public EchoServer(int port) {\n        this.port = port;\n    }\n\n    public static void main(String[] args)\n        throws Exception {\n        if (args.length != 1) {\n            System.err.println(\"Usage: \" + EchoServer.class.getSimpleName() +\n                \" <port>\"\n            );\n            return;\n        }\n        int port = Integer.parseInt(args[0]);\n        new EchoServer(port).start();\n    }\n\n    public void start() throws Exception {\n        final EchoServerHandler serverHandler = new EchoServerHandler();  //创建我们的处理handler\n        EventLoopGroup group = new NioEventLoopGroup();   //创建一个nio事件循环组\n        try {\n            ServerBootstrap b = new ServerBootstrap();   //创建一个bootstrap\n            b.group(group)    //绑定事件循环组\n                .channel(NioServerSocketChannel.class)   //指定处理的channle类型\n                .localAddress(new InetSocketAddress(port))    //绑定端口\n                .childHandler(new ChannelInitializer<SocketChannel>() {  //初始化一个channle\n                    @Override\n                    public void initChannel(SocketChannel ch) throws Exception {\n                        ch.pipeline().addLast(serverHandler);   //添加我们的业务逻辑到处理链条中\n                    }\n                });\n\n            ChannelFuture f = b.bind().sync();      //同步绑定\n            System.out.println(EchoServer.class.getName() +\n                \" started and listening for connections on \" + f.channel().localAddress());\n            f.channel().closeFuture().sync();   //阻塞到channle 同步关闭\n        } finally {\n            group.shutdownGracefully().sync();    //优雅的同步关闭\n        }\n    }\n}\n```\n\n##### echo client\n###### 简介\n1. 连接server\n2. 发送一个或多个消息\n3. 对每个消息，等待接收到同样的消息\n4. 关闭连接\n\nChannelInboundHandler-> SimpleChannelInboundHandler\n需要实现的方法\n* channelActive()—Called after the connection to the server is established，连接建立的时候\n* channelRead0()—Called when a message is received from the server    当接收到消息的时候\n* exceptionCaught()—Called if an exception is raised during processing 发生异常的时候\n\n\n###### Bootstrap client\n```\npublic class EchoClient {\n    private final String host;\n    private final int port;\n\n    public EchoClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void start()\n        throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n                .channel(NioSocketChannel.class)   //与server端不同的\n                .remoteAddress(new InetSocketAddress(host, port))\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    public void initChannel(SocketChannel ch)\n                        throws Exception {\n                        ch.pipeline().addLast(\n                             new EchoClientHandler());  //实现自己的业务逻辑\n                    }\n                });\n            ChannelFuture f = b.connect().sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully().sync();\n        }\n    }\n\n    public static void main(String[] args)\n            throws Exception {\n        if (args.length != 2) {\n            System.err.println(\"Usage: \" + EchoClient.class.getSimpleName() +\n                    \" <host> <port>\"\n            );\n            return;\n        }\n\n        final String host = args[0];\n        final int port = Integer.parseInt(args[1]);\n        new EchoClient(host, port).start();\n    }\n}\n```\n\n###### echo client handler\n```\npublic class EchoClientHandler\n    extends SimpleChannelInboundHandler<ByteBuf> {\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) {\n        ctx.writeAndFlush(Unpooled.copiedBuffer(\"Netty rocks!\",\n                CharsetUtil.UTF_8));\n    }\n\n    @Override\n    public void channelRead0(ChannelHandlerContext ctx, ByteBuf in) {\n        System.out.println(\n                \"Client received: \" + in.toString(CharsetUtil.UTF_8));\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx,\n        Throwable cause) {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n```\n\n\n\n* SimpleChannelInboundHandler vs. ChannelInboundHandler\n\nSimpleChannelInboundHandler 调用完channelRead0() 完成后，将会释放ByteBuf的内存，而server端则不能释放，因为发送出去，是在调用readComplete的时候，才会发送。\n\n\n\n\n\n\n\n","slug":"chapter2-2018-7-28","published":1,"updated":"2019-09-23T06:59:53.964Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0w29rjs0002uup2mv3hxdib","content":"<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>本章主要从三方面开始创建netty应用，主要覆盖 1.设置开发环境。2.写一个基于Echo client与server的程序。3.building并且测试你的程序</p>\n<h4 id=\"设置开发环境\"><a href=\"#设置开发环境\" class=\"headerlink\" title=\"设置开发环境\"></a>设置开发环境</h4><p>基于unix通常需要：</p>\n<ul>\n<li>jdk7  jre不能compile，请设置JAVA_HOME等相关环境变量，并将$JAVA_HOME/bin添加入环境变量</li>\n<li>maven  创建管理的工具  设置MAVEN_HOME环境变量，并将$MAVEN_HOME/bin添加入环境变量</li>\n<li>plain text edit 或者 integrated development environment -&gt; IDE<a id=\"more\"></a>\n</li>\n</ul>\n<h4 id=\"netty-client-server-简介\"><a href=\"#netty-client-server-简介\" class=\"headerlink\" title=\"netty client/server 简介\"></a>netty client/server 简介</h4><p>如图所示：<img src=\"/images/netty_part1/2018-7-28-2-1.png\" alt=\"echo server/client view\"></p>\n<p>主要功能是实现 ，当echo client与server监理连接后，它将发送一个或多个信息给server，然后server将echo 每一条信息给client</p>\n<blockquote>\n<p>这幅图展示了多个client与server的交互，client的数量理论上是可以被限制的，仅仅受系统资源的限制（或者jdk本身强制限制）</p>\n</blockquote>\n<h5 id=\"echo-server\"><a href=\"#echo-server\" class=\"headerlink\" title=\"echo server\"></a>echo server</h5><ul>\n<li>要求</li>\n</ul>\n<blockquote>\n<p>至少一个channelHandler 这个主要实现server端的业务处理逻辑</p>\n<p>bootstrapping,开始代码配置server,最低限度的配置，绑定端口并且监听请求连接</p>\n</blockquote>\n<h6 id=\"channelHandlers-与-业务逻辑\"><a href=\"#channelHandlers-与-业务逻辑\" class=\"headerlink\" title=\"channelHandlers 与 业务逻辑\"></a>channelHandlers 与 业务逻辑</h6><p>在netty中，ChannelHandler主要用于接收以及响应事件的通知。在netty中，所有的数据处理逻辑都包含在在里面。在EchoServer中，server将回复进来的数据，一次我们需要实现接口 <strong>ChannleInboundHandler</strong>,相关方法定义了入站事务，我们的例子比较简单，因此只需要一些方法，因此最有效的是使用子类 <strong>ChannleINbouondHandlerAdapter</strong> 这个子类是接口提供个默认实现，主要有以下几个方法与我们有关 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Sharable</span><br><span class=\"line\">public class EchoServerHandler extends ChannelInboundHandlerAdapter &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void channelRead(ChannelHandlerContext ctx, Object msg) &#123;</span><br><span class=\"line\">        ByteBuf in = (ByteBuf) msg;</span><br><span class=\"line\">        System.out.println(</span><br><span class=\"line\">                &quot;Server received: &quot; + in.toString(CharsetUtil.UTF_8));</span><br><span class=\"line\">        ctx.write(in);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void channelReadComplete(ChannelHandlerContext ctx)</span><br><span class=\"line\">            throws Exception &#123;</span><br><span class=\"line\">        ctx.writeAndFlush(Unpooled.EMPTY_BUFFER)</span><br><span class=\"line\">                .addListener(ChannelFutureListener.CLOSE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void exceptionCaught(ChannelHandlerContext ctx,</span><br><span class=\"line\">        Throwable cause) &#123;</span><br><span class=\"line\">        cause.printStackTrace();</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>channelRead 有入站数据的时候会被调用</li>\n<li>channelReadComplete 通知handler 在当前批次最后一条消息被调用</li>\n<li>exceptionCaught  发生异常的时候被调用 ，每个channle 都有一个chain（管道），因此最好有一个handler实现该方法，否则，一旦有异常发生，会直到链尾才会被打印出来</li>\n</ul>\n<p><strong>channlehandlers</strong><br>支持不同的事件类型格式，应用实现了ChannlHandlers可以实现一个事件整个生命周期的钩子，并且提供自己的业务逻辑。业务代码与网络代码解耦</p>\n<h6 id=\"bootstrapping-服务\"><a href=\"#bootstrapping-服务\" class=\"headerlink\" title=\"bootstrapping 服务\"></a>bootstrapping 服务</h6><p>bootstrap是配置服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class EchoServer &#123;</span><br><span class=\"line\">    private final int port;</span><br><span class=\"line\"></span><br><span class=\"line\">    public EchoServer(int port) &#123;</span><br><span class=\"line\">        this.port = port;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)</span><br><span class=\"line\">        throws Exception &#123;</span><br><span class=\"line\">        if (args.length != 1) &#123;</span><br><span class=\"line\">            System.err.println(&quot;Usage: &quot; + EchoServer.class.getSimpleName() +</span><br><span class=\"line\">                &quot; &lt;port&gt;&quot;</span><br><span class=\"line\">            );</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        int port = Integer.parseInt(args[0]);</span><br><span class=\"line\">        new EchoServer(port).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void start() throws Exception &#123;</span><br><span class=\"line\">        final EchoServerHandler serverHandler = new EchoServerHandler();  //创建我们的处理handler</span><br><span class=\"line\">        EventLoopGroup group = new NioEventLoopGroup();   //创建一个nio事件循环组</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            ServerBootstrap b = new ServerBootstrap();   //创建一个bootstrap</span><br><span class=\"line\">            b.group(group)    //绑定事件循环组</span><br><span class=\"line\">                .channel(NioServerSocketChannel.class)   //指定处理的channle类型</span><br><span class=\"line\">                .localAddress(new InetSocketAddress(port))    //绑定端口</span><br><span class=\"line\">                .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;  //初始化一个channle</span><br><span class=\"line\">                    @Override</span><br><span class=\"line\">                    public void initChannel(SocketChannel ch) throws Exception &#123;</span><br><span class=\"line\">                        ch.pipeline().addLast(serverHandler);   //添加我们的业务逻辑到处理链条中</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            ChannelFuture f = b.bind().sync();      //同步绑定</span><br><span class=\"line\">            System.out.println(EchoServer.class.getName() +</span><br><span class=\"line\">                &quot; started and listening for connections on &quot; + f.channel().localAddress());</span><br><span class=\"line\">            f.channel().closeFuture().sync();   //阻塞到channle 同步关闭</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            group.shutdownGracefully().sync();    //优雅的同步关闭</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"echo-client\"><a href=\"#echo-client\" class=\"headerlink\" title=\"echo client\"></a>echo client</h5><h6 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h6><ol>\n<li>连接server</li>\n<li>发送一个或多个消息</li>\n<li>对每个消息，等待接收到同样的消息</li>\n<li>关闭连接</li>\n</ol>\n<p>ChannelInboundHandler-&gt; SimpleChannelInboundHandler<br>需要实现的方法</p>\n<ul>\n<li>channelActive()—Called after the connection to the server is established，连接建立的时候</li>\n<li>channelRead0()—Called when a message is received from the server    当接收到消息的时候</li>\n<li>exceptionCaught()—Called if an exception is raised during processing 发生异常的时候</li>\n</ul>\n<h6 id=\"Bootstrap-client\"><a href=\"#Bootstrap-client\" class=\"headerlink\" title=\"Bootstrap client\"></a>Bootstrap client</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class EchoClient &#123;</span><br><span class=\"line\">    private final String host;</span><br><span class=\"line\">    private final int port;</span><br><span class=\"line\"></span><br><span class=\"line\">    public EchoClient(String host, int port) &#123;</span><br><span class=\"line\">        this.host = host;</span><br><span class=\"line\">        this.port = port;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void start()</span><br><span class=\"line\">        throws Exception &#123;</span><br><span class=\"line\">        EventLoopGroup group = new NioEventLoopGroup();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Bootstrap b = new Bootstrap();</span><br><span class=\"line\">            b.group(group)</span><br><span class=\"line\">                .channel(NioSocketChannel.class)   //与server端不同的</span><br><span class=\"line\">                .remoteAddress(new InetSocketAddress(host, port))</span><br><span class=\"line\">                .handler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\">                    @Override</span><br><span class=\"line\">                    public void initChannel(SocketChannel ch)</span><br><span class=\"line\">                        throws Exception &#123;</span><br><span class=\"line\">                        ch.pipeline().addLast(</span><br><span class=\"line\">                             new EchoClientHandler());  //实现自己的业务逻辑</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            ChannelFuture f = b.connect().sync();</span><br><span class=\"line\">            f.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            group.shutdownGracefully().sync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)</span><br><span class=\"line\">            throws Exception &#123;</span><br><span class=\"line\">        if (args.length != 2) &#123;</span><br><span class=\"line\">            System.err.println(&quot;Usage: &quot; + EchoClient.class.getSimpleName() +</span><br><span class=\"line\">                    &quot; &lt;host&gt; &lt;port&gt;&quot;</span><br><span class=\"line\">            );</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        final String host = args[0];</span><br><span class=\"line\">        final int port = Integer.parseInt(args[1]);</span><br><span class=\"line\">        new EchoClient(host, port).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"echo-client-handler\"><a href=\"#echo-client-handler\" class=\"headerlink\" title=\"echo client handler\"></a>echo client handler</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class EchoClientHandler</span><br><span class=\"line\">    extends SimpleChannelInboundHandler&lt;ByteBuf&gt; &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void channelActive(ChannelHandlerContext ctx) &#123;</span><br><span class=\"line\">        ctx.writeAndFlush(Unpooled.copiedBuffer(&quot;Netty rocks!&quot;,</span><br><span class=\"line\">                CharsetUtil.UTF_8));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void channelRead0(ChannelHandlerContext ctx, ByteBuf in) &#123;</span><br><span class=\"line\">        System.out.println(</span><br><span class=\"line\">                &quot;Client received: &quot; + in.toString(CharsetUtil.UTF_8));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void exceptionCaught(ChannelHandlerContext ctx,</span><br><span class=\"line\">        Throwable cause) &#123;</span><br><span class=\"line\">        cause.printStackTrace();</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>SimpleChannelInboundHandler vs. ChannelInboundHandler</li>\n</ul>\n<p>SimpleChannelInboundHandler 调用完channelRead0() 完成后，将会释放ByteBuf的内存，而server端则不能释放，因为发送出去，是在调用readComplete的时候，才会发送。</p>\n","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>本章主要从三方面开始创建netty应用，主要覆盖 1.设置开发环境。2.写一个基于Echo client与server的程序。3.building并且测试你的程序</p>\n<h4 id=\"设置开发环境\"><a href=\"#设置开发环境\" class=\"headerlink\" title=\"设置开发环境\"></a>设置开发环境</h4><p>基于unix通常需要：</p>\n<ul>\n<li>jdk7  jre不能compile，请设置JAVA_HOME等相关环境变量，并将$JAVA_HOME/bin添加入环境变量</li>\n<li>maven  创建管理的工具  设置MAVEN_HOME环境变量，并将$MAVEN_HOME/bin添加入环境变量</li>\n<li>plain text edit 或者 integrated development environment -&gt; IDE","more":"</li>\n</ul>\n<h4 id=\"netty-client-server-简介\"><a href=\"#netty-client-server-简介\" class=\"headerlink\" title=\"netty client/server 简介\"></a>netty client/server 简介</h4><p>如图所示：<img src=\"/images/netty_part1/2018-7-28-2-1.png\" alt=\"echo server/client view\"></p>\n<p>主要功能是实现 ，当echo client与server监理连接后，它将发送一个或多个信息给server，然后server将echo 每一条信息给client</p>\n<blockquote>\n<p>这幅图展示了多个client与server的交互，client的数量理论上是可以被限制的，仅仅受系统资源的限制（或者jdk本身强制限制）</p>\n</blockquote>\n<h5 id=\"echo-server\"><a href=\"#echo-server\" class=\"headerlink\" title=\"echo server\"></a>echo server</h5><ul>\n<li>要求</li>\n</ul>\n<blockquote>\n<p>至少一个channelHandler 这个主要实现server端的业务处理逻辑</p>\n<p>bootstrapping,开始代码配置server,最低限度的配置，绑定端口并且监听请求连接</p>\n</blockquote>\n<h6 id=\"channelHandlers-与-业务逻辑\"><a href=\"#channelHandlers-与-业务逻辑\" class=\"headerlink\" title=\"channelHandlers 与 业务逻辑\"></a>channelHandlers 与 业务逻辑</h6><p>在netty中，ChannelHandler主要用于接收以及响应事件的通知。在netty中，所有的数据处理逻辑都包含在在里面。在EchoServer中，server将回复进来的数据，一次我们需要实现接口 <strong>ChannleInboundHandler</strong>,相关方法定义了入站事务，我们的例子比较简单，因此只需要一些方法，因此最有效的是使用子类 <strong>ChannleINbouondHandlerAdapter</strong> 这个子类是接口提供个默认实现，主要有以下几个方法与我们有关 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Sharable</span><br><span class=\"line\">public class EchoServerHandler extends ChannelInboundHandlerAdapter &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void channelRead(ChannelHandlerContext ctx, Object msg) &#123;</span><br><span class=\"line\">        ByteBuf in = (ByteBuf) msg;</span><br><span class=\"line\">        System.out.println(</span><br><span class=\"line\">                &quot;Server received: &quot; + in.toString(CharsetUtil.UTF_8));</span><br><span class=\"line\">        ctx.write(in);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void channelReadComplete(ChannelHandlerContext ctx)</span><br><span class=\"line\">            throws Exception &#123;</span><br><span class=\"line\">        ctx.writeAndFlush(Unpooled.EMPTY_BUFFER)</span><br><span class=\"line\">                .addListener(ChannelFutureListener.CLOSE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void exceptionCaught(ChannelHandlerContext ctx,</span><br><span class=\"line\">        Throwable cause) &#123;</span><br><span class=\"line\">        cause.printStackTrace();</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>channelRead 有入站数据的时候会被调用</li>\n<li>channelReadComplete 通知handler 在当前批次最后一条消息被调用</li>\n<li>exceptionCaught  发生异常的时候被调用 ，每个channle 都有一个chain（管道），因此最好有一个handler实现该方法，否则，一旦有异常发生，会直到链尾才会被打印出来</li>\n</ul>\n<p><strong>channlehandlers</strong><br>支持不同的事件类型格式，应用实现了ChannlHandlers可以实现一个事件整个生命周期的钩子，并且提供自己的业务逻辑。业务代码与网络代码解耦</p>\n<h6 id=\"bootstrapping-服务\"><a href=\"#bootstrapping-服务\" class=\"headerlink\" title=\"bootstrapping 服务\"></a>bootstrapping 服务</h6><p>bootstrap是配置服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class EchoServer &#123;</span><br><span class=\"line\">    private final int port;</span><br><span class=\"line\"></span><br><span class=\"line\">    public EchoServer(int port) &#123;</span><br><span class=\"line\">        this.port = port;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)</span><br><span class=\"line\">        throws Exception &#123;</span><br><span class=\"line\">        if (args.length != 1) &#123;</span><br><span class=\"line\">            System.err.println(&quot;Usage: &quot; + EchoServer.class.getSimpleName() +</span><br><span class=\"line\">                &quot; &lt;port&gt;&quot;</span><br><span class=\"line\">            );</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        int port = Integer.parseInt(args[0]);</span><br><span class=\"line\">        new EchoServer(port).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void start() throws Exception &#123;</span><br><span class=\"line\">        final EchoServerHandler serverHandler = new EchoServerHandler();  //创建我们的处理handler</span><br><span class=\"line\">        EventLoopGroup group = new NioEventLoopGroup();   //创建一个nio事件循环组</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            ServerBootstrap b = new ServerBootstrap();   //创建一个bootstrap</span><br><span class=\"line\">            b.group(group)    //绑定事件循环组</span><br><span class=\"line\">                .channel(NioServerSocketChannel.class)   //指定处理的channle类型</span><br><span class=\"line\">                .localAddress(new InetSocketAddress(port))    //绑定端口</span><br><span class=\"line\">                .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;  //初始化一个channle</span><br><span class=\"line\">                    @Override</span><br><span class=\"line\">                    public void initChannel(SocketChannel ch) throws Exception &#123;</span><br><span class=\"line\">                        ch.pipeline().addLast(serverHandler);   //添加我们的业务逻辑到处理链条中</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            ChannelFuture f = b.bind().sync();      //同步绑定</span><br><span class=\"line\">            System.out.println(EchoServer.class.getName() +</span><br><span class=\"line\">                &quot; started and listening for connections on &quot; + f.channel().localAddress());</span><br><span class=\"line\">            f.channel().closeFuture().sync();   //阻塞到channle 同步关闭</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            group.shutdownGracefully().sync();    //优雅的同步关闭</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"echo-client\"><a href=\"#echo-client\" class=\"headerlink\" title=\"echo client\"></a>echo client</h5><h6 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h6><ol>\n<li>连接server</li>\n<li>发送一个或多个消息</li>\n<li>对每个消息，等待接收到同样的消息</li>\n<li>关闭连接</li>\n</ol>\n<p>ChannelInboundHandler-&gt; SimpleChannelInboundHandler<br>需要实现的方法</p>\n<ul>\n<li>channelActive()—Called after the connection to the server is established，连接建立的时候</li>\n<li>channelRead0()—Called when a message is received from the server    当接收到消息的时候</li>\n<li>exceptionCaught()—Called if an exception is raised during processing 发生异常的时候</li>\n</ul>\n<h6 id=\"Bootstrap-client\"><a href=\"#Bootstrap-client\" class=\"headerlink\" title=\"Bootstrap client\"></a>Bootstrap client</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class EchoClient &#123;</span><br><span class=\"line\">    private final String host;</span><br><span class=\"line\">    private final int port;</span><br><span class=\"line\"></span><br><span class=\"line\">    public EchoClient(String host, int port) &#123;</span><br><span class=\"line\">        this.host = host;</span><br><span class=\"line\">        this.port = port;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void start()</span><br><span class=\"line\">        throws Exception &#123;</span><br><span class=\"line\">        EventLoopGroup group = new NioEventLoopGroup();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Bootstrap b = new Bootstrap();</span><br><span class=\"line\">            b.group(group)</span><br><span class=\"line\">                .channel(NioSocketChannel.class)   //与server端不同的</span><br><span class=\"line\">                .remoteAddress(new InetSocketAddress(host, port))</span><br><span class=\"line\">                .handler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\">                    @Override</span><br><span class=\"line\">                    public void initChannel(SocketChannel ch)</span><br><span class=\"line\">                        throws Exception &#123;</span><br><span class=\"line\">                        ch.pipeline().addLast(</span><br><span class=\"line\">                             new EchoClientHandler());  //实现自己的业务逻辑</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            ChannelFuture f = b.connect().sync();</span><br><span class=\"line\">            f.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            group.shutdownGracefully().sync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)</span><br><span class=\"line\">            throws Exception &#123;</span><br><span class=\"line\">        if (args.length != 2) &#123;</span><br><span class=\"line\">            System.err.println(&quot;Usage: &quot; + EchoClient.class.getSimpleName() +</span><br><span class=\"line\">                    &quot; &lt;host&gt; &lt;port&gt;&quot;</span><br><span class=\"line\">            );</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        final String host = args[0];</span><br><span class=\"line\">        final int port = Integer.parseInt(args[1]);</span><br><span class=\"line\">        new EchoClient(host, port).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"echo-client-handler\"><a href=\"#echo-client-handler\" class=\"headerlink\" title=\"echo client handler\"></a>echo client handler</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class EchoClientHandler</span><br><span class=\"line\">    extends SimpleChannelInboundHandler&lt;ByteBuf&gt; &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void channelActive(ChannelHandlerContext ctx) &#123;</span><br><span class=\"line\">        ctx.writeAndFlush(Unpooled.copiedBuffer(&quot;Netty rocks!&quot;,</span><br><span class=\"line\">                CharsetUtil.UTF_8));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void channelRead0(ChannelHandlerContext ctx, ByteBuf in) &#123;</span><br><span class=\"line\">        System.out.println(</span><br><span class=\"line\">                &quot;Client received: &quot; + in.toString(CharsetUtil.UTF_8));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void exceptionCaught(ChannelHandlerContext ctx,</span><br><span class=\"line\">        Throwable cause) &#123;</span><br><span class=\"line\">        cause.printStackTrace();</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>SimpleChannelInboundHandler vs. ChannelInboundHandler</li>\n</ul>\n<p>SimpleChannelInboundHandler 调用完channelRead0() 完成后，将会释放ByteBuf的内存，而server端则不能释放，因为发送出去，是在调用readComplete的时候，才会发送。</p>"},{"title":"netty 模块与设计","date":"2018-07-29T00:36:02.000Z","_content":"\n## 简介\n本章将介绍channel、eventloop、channleFuture\n\n* Channel --sockets\n实现最基础的操作，依赖于下层网络传输的支持\n<!--more-->\n\n```\nEmbeddedChannel\nLocalServerChannel \nNioDatagramChannel\nNioSctpChannel\nNioSocketChannel\n```\n\n* EventLoop   流控、多线程、并发\n这一章主要讨论高级的EventLoop与Channle、Threads，以及EventLoopGroup的关系，我们将在第七章深入讲述eventLoop\n\n```\n一个EventLoopGroup包含一个或多个EventLoop\n一个EventLoop绑定一个线程在他的生命周期中\n所有的I/O时间都由EventLoop中的线程处理\n一个Channel通常在它的生命周期中注册在一个EventLoop\n一个EventLoop可能被分配一个或者多个Channles\n```\n如图![事件循环](/images/netty_part1/2018-7-29-1.png)\n\n* ChannelFuture 异步通知\n在netty中的所有I/O线程都是异步的，因为所有的操作都不回立即返回结果，因此我们需要一种方式在未来的事件去决定它的结果\n\n\nChannelHandler and ChannelPipeline\n我们可以通过了解具体的细节去看这些组件怎么管理流式、以及执行业务逻辑。\n\n* ChannelHandler\n从用户的立场来讲，netty最重要的部分就是component就是ChannleHandler，通常netty提供一个应用逻辑的容器，去处理所有的出站与入站的数据。这是因为ChannelHadnler所有的方法都是由Event来触发。包括异常的处理，数据类型的转换等。\n\n* ChannelPipleline\n一个ChannelPipleline提供一个链式ChannelHandler的容器，并且处理入站与出站的流式数据，当一个Channel创建的时候，它会自动被分配给一个ChannelPipleline\n\n```\n一个 ChannelInitializer 实现通常将自己注册在ServerBootstrap\n当ChannelInitializer.initChannel() 调用的时候，这个ChannelInitializer通常将吧用户自己实现的handler注册在pipeline\nChannelInitializer 将自己从 ChannelPipeline中删除\n```\n如图![ChannelPipeline](/images/netty_part1/2018-7-29-2.png)\n\n* adapters\n代理的作用就是它对所有的方法都有自己的默认实现，因此你可以通过这些类很快的开发基于自定义的实现，只用覆盖你想要覆盖的方法\n```\nChannelHandlerAdapter\nChannelInboundHandlerAdapter\nChannelOutboundHandlerAdapter\nChannelDuplexHandlerAdapter\n```\n\n\n* SimpleChannelInboundHandler\n通常我们编写的应用都是接受一个解码的消息并且通过应用逻辑处理我们的消息。那么创建一个ChannelHandler，你可以通过继承一个基类 SImpleChannleInboundHandler\n<T> T是你要处理的java类型，最重要的一个方法是channelRead0(Channel- HandlerContext,T)，记住不要堵塞线程\n\n\n\n* Bootstrapping\nbootstrap 类提供了一个用于配置以及应用网络层的容器，用于连接一个给定特殊的端口与host\n\n| category | Bootstrap | Bootstraping | \n| ------ | ------ | ------ |\n| 网络功能 | 连接一个远程的host、port | 绑定本地端口 |\n|EventLoopGroup的数量|1|2|\n\n如图![ChannelPipeline](/images/netty_part1/2018-7-29-3.png)\n\n> 为什么server端需要两个channles、以及EventLoopGroup，因为一个channle接受\b创建新连接，一个负责接受正常的请求。\n\n\n### 编码与解码 Encoders and Decoders\n当数据入站的时候可能通过解码（即byte-> java Object），出站的时候就更好相反，这是编码\n\nnetty提供了类似于ByteToMessageDecoder MessageToByteEncoder这样的编解码，通常netty也提供了入站与出站的编解码代理类\n\n\n### 本章总结\n在这章我们讨论了理解了netty的一席而技术以及架构要点，我们重新回顾了前面的一些具体细节\n\n特殊的我们讨论了，ChannleHandler的一个层次结构，并且介绍了编解码组件，描述了数据在网络层byte格式转换的相辅相成只是。\n\n\n\n\n\n\n","source":"_posts/chapter3-2018-7-29.md","raw":"---\ntitle: netty 模块与设计\ndate: 2018-07-29 08:36:02\ntags: netty\ncategories: [\"netty\",\"design\",\"components\"]\n---\n\n## 简介\n本章将介绍channel、eventloop、channleFuture\n\n* Channel --sockets\n实现最基础的操作，依赖于下层网络传输的支持\n<!--more-->\n\n```\nEmbeddedChannel\nLocalServerChannel \nNioDatagramChannel\nNioSctpChannel\nNioSocketChannel\n```\n\n* EventLoop   流控、多线程、并发\n这一章主要讨论高级的EventLoop与Channle、Threads，以及EventLoopGroup的关系，我们将在第七章深入讲述eventLoop\n\n```\n一个EventLoopGroup包含一个或多个EventLoop\n一个EventLoop绑定一个线程在他的生命周期中\n所有的I/O时间都由EventLoop中的线程处理\n一个Channel通常在它的生命周期中注册在一个EventLoop\n一个EventLoop可能被分配一个或者多个Channles\n```\n如图![事件循环](/images/netty_part1/2018-7-29-1.png)\n\n* ChannelFuture 异步通知\n在netty中的所有I/O线程都是异步的，因为所有的操作都不回立即返回结果，因此我们需要一种方式在未来的事件去决定它的结果\n\n\nChannelHandler and ChannelPipeline\n我们可以通过了解具体的细节去看这些组件怎么管理流式、以及执行业务逻辑。\n\n* ChannelHandler\n从用户的立场来讲，netty最重要的部分就是component就是ChannleHandler，通常netty提供一个应用逻辑的容器，去处理所有的出站与入站的数据。这是因为ChannelHadnler所有的方法都是由Event来触发。包括异常的处理，数据类型的转换等。\n\n* ChannelPipleline\n一个ChannelPipleline提供一个链式ChannelHandler的容器，并且处理入站与出站的流式数据，当一个Channel创建的时候，它会自动被分配给一个ChannelPipleline\n\n```\n一个 ChannelInitializer 实现通常将自己注册在ServerBootstrap\n当ChannelInitializer.initChannel() 调用的时候，这个ChannelInitializer通常将吧用户自己实现的handler注册在pipeline\nChannelInitializer 将自己从 ChannelPipeline中删除\n```\n如图![ChannelPipeline](/images/netty_part1/2018-7-29-2.png)\n\n* adapters\n代理的作用就是它对所有的方法都有自己的默认实现，因此你可以通过这些类很快的开发基于自定义的实现，只用覆盖你想要覆盖的方法\n```\nChannelHandlerAdapter\nChannelInboundHandlerAdapter\nChannelOutboundHandlerAdapter\nChannelDuplexHandlerAdapter\n```\n\n\n* SimpleChannelInboundHandler\n通常我们编写的应用都是接受一个解码的消息并且通过应用逻辑处理我们的消息。那么创建一个ChannelHandler，你可以通过继承一个基类 SImpleChannleInboundHandler\n<T> T是你要处理的java类型，最重要的一个方法是channelRead0(Channel- HandlerContext,T)，记住不要堵塞线程\n\n\n\n* Bootstrapping\nbootstrap 类提供了一个用于配置以及应用网络层的容器，用于连接一个给定特殊的端口与host\n\n| category | Bootstrap | Bootstraping | \n| ------ | ------ | ------ |\n| 网络功能 | 连接一个远程的host、port | 绑定本地端口 |\n|EventLoopGroup的数量|1|2|\n\n如图![ChannelPipeline](/images/netty_part1/2018-7-29-3.png)\n\n> 为什么server端需要两个channles、以及EventLoopGroup，因为一个channle接受\b创建新连接，一个负责接受正常的请求。\n\n\n### 编码与解码 Encoders and Decoders\n当数据入站的时候可能通过解码（即byte-> java Object），出站的时候就更好相反，这是编码\n\nnetty提供了类似于ByteToMessageDecoder MessageToByteEncoder这样的编解码，通常netty也提供了入站与出站的编解码代理类\n\n\n### 本章总结\n在这章我们讨论了理解了netty的一席而技术以及架构要点，我们重新回顾了前面的一些具体细节\n\n特殊的我们讨论了，ChannleHandler的一个层次结构，并且介绍了编解码组件，描述了数据在网络层byte格式转换的相辅相成只是。\n\n\n\n\n\n\n","slug":"chapter3-2018-7-29","published":1,"updated":"2019-09-23T06:59:52.711Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0w29rjx0005uup2mrldrg1n","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>本章将介绍channel、eventloop、channleFuture</p>\n<ul>\n<li>Channel –sockets<br>实现最基础的操作，依赖于下层网络传输的支持<a id=\"more\"></a>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EmbeddedChannel</span><br><span class=\"line\">LocalServerChannel </span><br><span class=\"line\">NioDatagramChannel</span><br><span class=\"line\">NioSctpChannel</span><br><span class=\"line\">NioSocketChannel</span><br></pre></td></tr></table></figure>\n<ul>\n<li>EventLoop   流控、多线程、并发<br>这一章主要讨论高级的EventLoop与Channle、Threads，以及EventLoopGroup的关系，我们将在第七章深入讲述eventLoop</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个EventLoopGroup包含一个或多个EventLoop</span><br><span class=\"line\">一个EventLoop绑定一个线程在他的生命周期中</span><br><span class=\"line\">所有的I/O时间都由EventLoop中的线程处理</span><br><span class=\"line\">一个Channel通常在它的生命周期中注册在一个EventLoop</span><br><span class=\"line\">一个EventLoop可能被分配一个或者多个Channles</span><br></pre></td></tr></table></figure>\n<p>如图<img src=\"/images/netty_part1/2018-7-29-1.png\" alt=\"事件循环\"></p>\n<ul>\n<li>ChannelFuture 异步通知<br>在netty中的所有I/O线程都是异步的，因为所有的操作都不回立即返回结果，因此我们需要一种方式在未来的事件去决定它的结果</li>\n</ul>\n<p>ChannelHandler and ChannelPipeline<br>我们可以通过了解具体的细节去看这些组件怎么管理流式、以及执行业务逻辑。</p>\n<ul>\n<li><p>ChannelHandler<br>从用户的立场来讲，netty最重要的部分就是component就是ChannleHandler，通常netty提供一个应用逻辑的容器，去处理所有的出站与入站的数据。这是因为ChannelHadnler所有的方法都是由Event来触发。包括异常的处理，数据类型的转换等。</p>\n</li>\n<li><p>ChannelPipleline<br>一个ChannelPipleline提供一个链式ChannelHandler的容器，并且处理入站与出站的流式数据，当一个Channel创建的时候，它会自动被分配给一个ChannelPipleline</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个 ChannelInitializer 实现通常将自己注册在ServerBootstrap</span><br><span class=\"line\">当ChannelInitializer.initChannel() 调用的时候，这个ChannelInitializer通常将吧用户自己实现的handler注册在pipeline</span><br><span class=\"line\">ChannelInitializer 将自己从 ChannelPipeline中删除</span><br></pre></td></tr></table></figure>\n<p>如图<img src=\"/images/netty_part1/2018-7-29-2.png\" alt=\"ChannelPipeline\"></p>\n<ul>\n<li><p>adapters<br>代理的作用就是它对所有的方法都有自己的默认实现，因此你可以通过这些类很快的开发基于自定义的实现，只用覆盖你想要覆盖的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ChannelHandlerAdapter</span><br><span class=\"line\">ChannelInboundHandlerAdapter</span><br><span class=\"line\">ChannelOutboundHandlerAdapter</span><br><span class=\"line\">ChannelDuplexHandlerAdapter</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>SimpleChannelInboundHandler<br>通常我们编写的应用都是接受一个解码的消息并且通过应用逻辑处理我们的消息。那么创建一个ChannelHandler，你可以通过继承一个基类 SImpleChannleInboundHandler<br><t> T是你要处理的java类型，最重要的一个方法是channelRead0(Channel- HandlerContext,T)，记住不要堵塞线程</t></p>\n</li>\n</ul>\n<ul>\n<li>Bootstrapping<br>bootstrap 类提供了一个用于配置以及应用网络层的容器，用于连接一个给定特殊的端口与host</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>category</th>\n<th>Bootstrap</th>\n<th>Bootstraping</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>网络功能</td>\n<td>连接一个远程的host、port</td>\n<td>绑定本地端口</td>\n</tr>\n<tr>\n<td>EventLoopGroup的数量</td>\n<td>1</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<p>如图<img src=\"/images/netty_part1/2018-7-29-3.png\" alt=\"ChannelPipeline\"></p>\n<blockquote>\n<p>为什么server端需要两个channles、以及EventLoopGroup，因为一个channle接受\b创建新连接，一个负责接受正常的请求。</p>\n</blockquote>\n<h3 id=\"编码与解码-Encoders-and-Decoders\"><a href=\"#编码与解码-Encoders-and-Decoders\" class=\"headerlink\" title=\"编码与解码 Encoders and Decoders\"></a>编码与解码 Encoders and Decoders</h3><p>当数据入站的时候可能通过解码（即byte-&gt; java Object），出站的时候就更好相反，这是编码</p>\n<p>netty提供了类似于ByteToMessageDecoder MessageToByteEncoder这样的编解码，通常netty也提供了入站与出站的编解码代理类</p>\n<h3 id=\"本章总结\"><a href=\"#本章总结\" class=\"headerlink\" title=\"本章总结\"></a>本章总结</h3><p>在这章我们讨论了理解了netty的一席而技术以及架构要点，我们重新回顾了前面的一些具体细节</p>\n<p>特殊的我们讨论了，ChannleHandler的一个层次结构，并且介绍了编解码组件，描述了数据在网络层byte格式转换的相辅相成只是。</p>\n","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>本章将介绍channel、eventloop、channleFuture</p>\n<ul>\n<li>Channel –sockets<br>实现最基础的操作，依赖于下层网络传输的支持","more":"</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EmbeddedChannel</span><br><span class=\"line\">LocalServerChannel </span><br><span class=\"line\">NioDatagramChannel</span><br><span class=\"line\">NioSctpChannel</span><br><span class=\"line\">NioSocketChannel</span><br></pre></td></tr></table></figure>\n<ul>\n<li>EventLoop   流控、多线程、并发<br>这一章主要讨论高级的EventLoop与Channle、Threads，以及EventLoopGroup的关系，我们将在第七章深入讲述eventLoop</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个EventLoopGroup包含一个或多个EventLoop</span><br><span class=\"line\">一个EventLoop绑定一个线程在他的生命周期中</span><br><span class=\"line\">所有的I/O时间都由EventLoop中的线程处理</span><br><span class=\"line\">一个Channel通常在它的生命周期中注册在一个EventLoop</span><br><span class=\"line\">一个EventLoop可能被分配一个或者多个Channles</span><br></pre></td></tr></table></figure>\n<p>如图<img src=\"/images/netty_part1/2018-7-29-1.png\" alt=\"事件循环\"></p>\n<ul>\n<li>ChannelFuture 异步通知<br>在netty中的所有I/O线程都是异步的，因为所有的操作都不回立即返回结果，因此我们需要一种方式在未来的事件去决定它的结果</li>\n</ul>\n<p>ChannelHandler and ChannelPipeline<br>我们可以通过了解具体的细节去看这些组件怎么管理流式、以及执行业务逻辑。</p>\n<ul>\n<li><p>ChannelHandler<br>从用户的立场来讲，netty最重要的部分就是component就是ChannleHandler，通常netty提供一个应用逻辑的容器，去处理所有的出站与入站的数据。这是因为ChannelHadnler所有的方法都是由Event来触发。包括异常的处理，数据类型的转换等。</p>\n</li>\n<li><p>ChannelPipleline<br>一个ChannelPipleline提供一个链式ChannelHandler的容器，并且处理入站与出站的流式数据，当一个Channel创建的时候，它会自动被分配给一个ChannelPipleline</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个 ChannelInitializer 实现通常将自己注册在ServerBootstrap</span><br><span class=\"line\">当ChannelInitializer.initChannel() 调用的时候，这个ChannelInitializer通常将吧用户自己实现的handler注册在pipeline</span><br><span class=\"line\">ChannelInitializer 将自己从 ChannelPipeline中删除</span><br></pre></td></tr></table></figure>\n<p>如图<img src=\"/images/netty_part1/2018-7-29-2.png\" alt=\"ChannelPipeline\"></p>\n<ul>\n<li><p>adapters<br>代理的作用就是它对所有的方法都有自己的默认实现，因此你可以通过这些类很快的开发基于自定义的实现，只用覆盖你想要覆盖的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ChannelHandlerAdapter</span><br><span class=\"line\">ChannelInboundHandlerAdapter</span><br><span class=\"line\">ChannelOutboundHandlerAdapter</span><br><span class=\"line\">ChannelDuplexHandlerAdapter</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>SimpleChannelInboundHandler<br>通常我们编写的应用都是接受一个解码的消息并且通过应用逻辑处理我们的消息。那么创建一个ChannelHandler，你可以通过继承一个基类 SImpleChannleInboundHandler<br><t> T是你要处理的java类型，最重要的一个方法是channelRead0(Channel- HandlerContext,T)，记住不要堵塞线程</t></p>\n</li>\n</ul>\n<ul>\n<li>Bootstrapping<br>bootstrap 类提供了一个用于配置以及应用网络层的容器，用于连接一个给定特殊的端口与host</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>category</th>\n<th>Bootstrap</th>\n<th>Bootstraping</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>网络功能</td>\n<td>连接一个远程的host、port</td>\n<td>绑定本地端口</td>\n</tr>\n<tr>\n<td>EventLoopGroup的数量</td>\n<td>1</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<p>如图<img src=\"/images/netty_part1/2018-7-29-3.png\" alt=\"ChannelPipeline\"></p>\n<blockquote>\n<p>为什么server端需要两个channles、以及EventLoopGroup，因为一个channle接受\b创建新连接，一个负责接受正常的请求。</p>\n</blockquote>\n<h3 id=\"编码与解码-Encoders-and-Decoders\"><a href=\"#编码与解码-Encoders-and-Decoders\" class=\"headerlink\" title=\"编码与解码 Encoders and Decoders\"></a>编码与解码 Encoders and Decoders</h3><p>当数据入站的时候可能通过解码（即byte-&gt; java Object），出站的时候就更好相反，这是编码</p>\n<p>netty提供了类似于ByteToMessageDecoder MessageToByteEncoder这样的编解码，通常netty也提供了入站与出站的编解码代理类</p>\n<h3 id=\"本章总结\"><a href=\"#本章总结\" class=\"headerlink\" title=\"本章总结\"></a>本章总结</h3><p>在这章我们讨论了理解了netty的一席而技术以及架构要点，我们重新回顾了前面的一些具体细节</p>\n<p>特殊的我们讨论了，ChannleHandler的一个层次结构，并且介绍了编解码组件，描述了数据在网络层byte格式转换的相辅相成只是。</p>"},{"title":"netty 传输","date":"2018-07-30T00:36:02.000Z","_content":"\n### 简介\n传统的oio（old I/O）编程，与nio异步编程在Api级别差别比较大，但是netty在公共API做了很好的封装，这比在传统的使用JDK编程要更简单。\n\n\n#### 使用传统的jdk来实现blocking与non-blocking\n##### 实现blocking\n<!--more-->\n\n```\npublic class PlainOioServer {\n    public void serve(int port) throws IOException {\n        final ServerSocket socket = new ServerSocket(port);\n        try {\n            for(;;) {\n                final Socket clientSocket = socket.accept();\n                System.out.println(\n                        \"Accepted connection from \" + clientSocket);\n                new Thread(new Runnable() {\n                    @Override\n                    public void run() {\n                        OutputStream out;\n                        try {\n                            out = clientSocket.getOutputStream();\n                            out.write(\"Hi!\\r\\n\".getBytes(\n                                    Charset.forName(\"UTF-8\")));\n                            out.flush();\n                            clientSocket.close();\n                        } catch (IOException e) {\n                            e.printStackTrace();\n                        } finally {\n                            try {\n                                clientSocket.close();\n                            } catch (IOException ex) {\n                                // ignore on close\n                            }\n                        }\n                    }\n                }).start();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n* 使用OIO只能支持中等级别的并发，并不能支持上万的连接\n\n##### 实现NIO\n\n```\npublic class PlainNioServer {\n    public void serve(int port) throws IOException {\n        ServerSocketChannel serverChannel = ServerSocketChannel.open();\n        serverChannel.configureBlocking(false);\n        ServerSocket ss = serverChannel.socket();\n        InetSocketAddress address = new InetSocketAddress(port);\n        ss.bind(address);\n        Selector selector = Selector.open();\n        serverChannel.register(selector, SelectionKey.OP_ACCEPT);\n        final ByteBuffer msg = ByteBuffer.wrap(\"Hi!\\r\\n\".getBytes());\n        for (;;){\n            try {\n                selector.select();\n            } catch (IOException ex) {\n                ex.printStackTrace();\n                //handle exception\n                break;\n            }\n            Set<SelectionKey> readyKeys = selector.selectedKeys();\n            Iterator<SelectionKey> iterator = readyKeys.iterator();\n            while (iterator.hasNext()) {\n                SelectionKey key = iterator.next();\n                iterator.remove();\n                try {\n                    if (key.isAcceptable()) {\n                        ServerSocketChannel server =\n                                (ServerSocketChannel) key.channel();\n                        SocketChannel client = server.accept();\n                        client.configureBlocking(false);\n                        client.register(selector, SelectionKey.OP_WRITE |\n                                SelectionKey.OP_READ, msg.duplicate());\n                        System.out.println(\n                                \"Accepted connection from \" + client);\n                    }\n                    if (key.isWritable()) {\n                        SocketChannel client =\n                                (SocketChannel) key.channel();\n                        ByteBuffer buffer =\n                                (ByteBuffer) key.attachment();\n                        while (buffer.hasRemaining()) {\n                            if (client.write(buffer) == 0) {\n                                break;\n                            }\n                        }\n                        client.close();\n                    }\n                } catch (IOException ex) {\n                    key.cancel();\n                    try {\n                        key.channel().close();\n                    } catch (IOException cex) {\n                        // ignore on close\n                    }\n                }\n            }\n        }\n    }\n}\n\n```\n##### 比较\n可以看出传统的OIO与NIO相比来说差距很大，所以对于编程来说，是需要重写的。\n\n#### 使用netty来实现\n##### 同步\n\n```\npublic class NettyOioServer {\n    public void server(int port)\n            throws Exception {\n        final ByteBuf buf =\n                Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(\"Hi!\\r\\n\", Charset.forName(\"UTF-8\")));\n        EventLoopGroup group = new OioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(group)\n                    .channel(OioServerSocketChannel.class)\n                    .localAddress(new InetSocketAddress(port))\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        public void initChannel(SocketChannel ch)\n                                throws Exception {\n                                ch.pipeline().addLast(\n                                    new ChannelInboundHandlerAdapter() {\n                                        @Override\n                                        public void channelActive(\n                                                ChannelHandlerContext ctx)\n                                                throws Exception {\n                                            ctx.writeAndFlush(buf.duplicate())\n                                                    .addListener(\n                                                            ChannelFutureListener.CLOSE);\n                                        }\n                                    });\n                        }\n                    });\n            ChannelFuture f = b.bind().sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully().sync();\n        }\n    }\n}\n\n```\n\n##### 异步\n\n```\npublic class NettyNioServer {\n    public void server(int port) throws Exception {\n        final ByteBuf buf =\n                Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(\"Hi!\\r\\n\",\n                        Charset.forName(\"UTF-8\")));\n        NioEventLoopGroup group = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(group).channel(NioServerSocketChannel.class)\n                    .localAddress(new InetSocketAddress(port))\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                                      @Override\n                                      public void initChannel(SocketChannel ch)\n                                              throws Exception {\n                                              ch.pipeline().addLast(\n                                                  new ChannelInboundHandlerAdapter() {\n                                                      @Override\n                                                      public void channelActive(\n                                                              ChannelHandlerContext ctx) throws Exception {\n                                                                ctx.writeAndFlush(buf.duplicate())\n                                                                  .addListener(\n                                                                          ChannelFutureListener.CLOSE);\n                                                      }\n                                                  });\n                                      }\n                                  }\n                    );\n            ChannelFuture f = b.bind().sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully().sync();\n        }\n    }\n}\n\n```\n\n### transport API\n\n\n\nChannleHandler包含以下传统使用：\n* channel是线程安全的\n* 将数据转换类型\n* 提供异常通知\n* 提供channle active与 inactive的通知\n* 提供当channle注册或者从eventLoop注销\n\nlinux使用epoll 本地非阻塞传输、可以通过本地传输通过JVM、内部传输可以测试应用逻辑\n\n\n![channel method](/images/netty_part1/2018-7-30-1.png)\n\n\n#### 包含的传输\n\n![channel include](/images/netty_part1/2018-7-30-2.png)\n\n#### 状态的改变\n![Selection Operation bit-set](/images/netty_part1/2018-7-30-3.png)\n\n\n#### netty支持的OIO实现\n通过使用很短时间间隔获取结果，如果未获取到则抛出异常，来继续进行事件循环来实现OIO\n\n\n### 总结 summary\n在这一张主要讨论了传，输并讨论了传输行为的各种最小需求，因为不是所有的传输在给定的java版本以及同样类型适用于特定的os\n\n\n\n","source":"_posts/chapter4-2018-7-30.md","raw":"---\ntitle: netty 传输\ndate: 2018-07-30 08:36:02\ntags: netty\ncategories: [\"netty\",\"transport\"]\n---\n\n### 简介\n传统的oio（old I/O）编程，与nio异步编程在Api级别差别比较大，但是netty在公共API做了很好的封装，这比在传统的使用JDK编程要更简单。\n\n\n#### 使用传统的jdk来实现blocking与non-blocking\n##### 实现blocking\n<!--more-->\n\n```\npublic class PlainOioServer {\n    public void serve(int port) throws IOException {\n        final ServerSocket socket = new ServerSocket(port);\n        try {\n            for(;;) {\n                final Socket clientSocket = socket.accept();\n                System.out.println(\n                        \"Accepted connection from \" + clientSocket);\n                new Thread(new Runnable() {\n                    @Override\n                    public void run() {\n                        OutputStream out;\n                        try {\n                            out = clientSocket.getOutputStream();\n                            out.write(\"Hi!\\r\\n\".getBytes(\n                                    Charset.forName(\"UTF-8\")));\n                            out.flush();\n                            clientSocket.close();\n                        } catch (IOException e) {\n                            e.printStackTrace();\n                        } finally {\n                            try {\n                                clientSocket.close();\n                            } catch (IOException ex) {\n                                // ignore on close\n                            }\n                        }\n                    }\n                }).start();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n* 使用OIO只能支持中等级别的并发，并不能支持上万的连接\n\n##### 实现NIO\n\n```\npublic class PlainNioServer {\n    public void serve(int port) throws IOException {\n        ServerSocketChannel serverChannel = ServerSocketChannel.open();\n        serverChannel.configureBlocking(false);\n        ServerSocket ss = serverChannel.socket();\n        InetSocketAddress address = new InetSocketAddress(port);\n        ss.bind(address);\n        Selector selector = Selector.open();\n        serverChannel.register(selector, SelectionKey.OP_ACCEPT);\n        final ByteBuffer msg = ByteBuffer.wrap(\"Hi!\\r\\n\".getBytes());\n        for (;;){\n            try {\n                selector.select();\n            } catch (IOException ex) {\n                ex.printStackTrace();\n                //handle exception\n                break;\n            }\n            Set<SelectionKey> readyKeys = selector.selectedKeys();\n            Iterator<SelectionKey> iterator = readyKeys.iterator();\n            while (iterator.hasNext()) {\n                SelectionKey key = iterator.next();\n                iterator.remove();\n                try {\n                    if (key.isAcceptable()) {\n                        ServerSocketChannel server =\n                                (ServerSocketChannel) key.channel();\n                        SocketChannel client = server.accept();\n                        client.configureBlocking(false);\n                        client.register(selector, SelectionKey.OP_WRITE |\n                                SelectionKey.OP_READ, msg.duplicate());\n                        System.out.println(\n                                \"Accepted connection from \" + client);\n                    }\n                    if (key.isWritable()) {\n                        SocketChannel client =\n                                (SocketChannel) key.channel();\n                        ByteBuffer buffer =\n                                (ByteBuffer) key.attachment();\n                        while (buffer.hasRemaining()) {\n                            if (client.write(buffer) == 0) {\n                                break;\n                            }\n                        }\n                        client.close();\n                    }\n                } catch (IOException ex) {\n                    key.cancel();\n                    try {\n                        key.channel().close();\n                    } catch (IOException cex) {\n                        // ignore on close\n                    }\n                }\n            }\n        }\n    }\n}\n\n```\n##### 比较\n可以看出传统的OIO与NIO相比来说差距很大，所以对于编程来说，是需要重写的。\n\n#### 使用netty来实现\n##### 同步\n\n```\npublic class NettyOioServer {\n    public void server(int port)\n            throws Exception {\n        final ByteBuf buf =\n                Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(\"Hi!\\r\\n\", Charset.forName(\"UTF-8\")));\n        EventLoopGroup group = new OioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(group)\n                    .channel(OioServerSocketChannel.class)\n                    .localAddress(new InetSocketAddress(port))\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        public void initChannel(SocketChannel ch)\n                                throws Exception {\n                                ch.pipeline().addLast(\n                                    new ChannelInboundHandlerAdapter() {\n                                        @Override\n                                        public void channelActive(\n                                                ChannelHandlerContext ctx)\n                                                throws Exception {\n                                            ctx.writeAndFlush(buf.duplicate())\n                                                    .addListener(\n                                                            ChannelFutureListener.CLOSE);\n                                        }\n                                    });\n                        }\n                    });\n            ChannelFuture f = b.bind().sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully().sync();\n        }\n    }\n}\n\n```\n\n##### 异步\n\n```\npublic class NettyNioServer {\n    public void server(int port) throws Exception {\n        final ByteBuf buf =\n                Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(\"Hi!\\r\\n\",\n                        Charset.forName(\"UTF-8\")));\n        NioEventLoopGroup group = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(group).channel(NioServerSocketChannel.class)\n                    .localAddress(new InetSocketAddress(port))\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                                      @Override\n                                      public void initChannel(SocketChannel ch)\n                                              throws Exception {\n                                              ch.pipeline().addLast(\n                                                  new ChannelInboundHandlerAdapter() {\n                                                      @Override\n                                                      public void channelActive(\n                                                              ChannelHandlerContext ctx) throws Exception {\n                                                                ctx.writeAndFlush(buf.duplicate())\n                                                                  .addListener(\n                                                                          ChannelFutureListener.CLOSE);\n                                                      }\n                                                  });\n                                      }\n                                  }\n                    );\n            ChannelFuture f = b.bind().sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully().sync();\n        }\n    }\n}\n\n```\n\n### transport API\n\n\n\nChannleHandler包含以下传统使用：\n* channel是线程安全的\n* 将数据转换类型\n* 提供异常通知\n* 提供channle active与 inactive的通知\n* 提供当channle注册或者从eventLoop注销\n\nlinux使用epoll 本地非阻塞传输、可以通过本地传输通过JVM、内部传输可以测试应用逻辑\n\n\n![channel method](/images/netty_part1/2018-7-30-1.png)\n\n\n#### 包含的传输\n\n![channel include](/images/netty_part1/2018-7-30-2.png)\n\n#### 状态的改变\n![Selection Operation bit-set](/images/netty_part1/2018-7-30-3.png)\n\n\n#### netty支持的OIO实现\n通过使用很短时间间隔获取结果，如果未获取到则抛出异常，来继续进行事件循环来实现OIO\n\n\n### 总结 summary\n在这一张主要讨论了传，输并讨论了传输行为的各种最小需求，因为不是所有的传输在给定的java版本以及同样类型适用于特定的os\n\n\n\n","slug":"chapter4-2018-7-30","published":1,"updated":"2019-09-23T06:59:44.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0w29rjy0006uup2a08wnz6l","content":"<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>传统的oio（old I/O）编程，与nio异步编程在Api级别差别比较大，但是netty在公共API做了很好的封装，这比在传统的使用JDK编程要更简单。</p>\n<h4 id=\"使用传统的jdk来实现blocking与non-blocking\"><a href=\"#使用传统的jdk来实现blocking与non-blocking\" class=\"headerlink\" title=\"使用传统的jdk来实现blocking与non-blocking\"></a>使用传统的jdk来实现blocking与non-blocking</h4><h5 id=\"实现blocking\"><a href=\"#实现blocking\" class=\"headerlink\" title=\"实现blocking\"></a>实现blocking</h5><a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class PlainOioServer &#123;</span><br><span class=\"line\">    public void serve(int port) throws IOException &#123;</span><br><span class=\"line\">        final ServerSocket socket = new ServerSocket(port);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            for(;;) &#123;</span><br><span class=\"line\">                final Socket clientSocket = socket.accept();</span><br><span class=\"line\">                System.out.println(</span><br><span class=\"line\">                        &quot;Accepted connection from &quot; + clientSocket);</span><br><span class=\"line\">                new Thread(new Runnable() &#123;</span><br><span class=\"line\">                    @Override</span><br><span class=\"line\">                    public void run() &#123;</span><br><span class=\"line\">                        OutputStream out;</span><br><span class=\"line\">                        try &#123;</span><br><span class=\"line\">                            out = clientSocket.getOutputStream();</span><br><span class=\"line\">                            out.write(&quot;Hi!\\r\\n&quot;.getBytes(</span><br><span class=\"line\">                                    Charset.forName(&quot;UTF-8&quot;)));</span><br><span class=\"line\">                            out.flush();</span><br><span class=\"line\">                            clientSocket.close();</span><br><span class=\"line\">                        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                            e.printStackTrace();</span><br><span class=\"line\">                        &#125; finally &#123;</span><br><span class=\"line\">                            try &#123;</span><br><span class=\"line\">                                clientSocket.close();</span><br><span class=\"line\">                            &#125; catch (IOException ex) &#123;</span><br><span class=\"line\">                                // ignore on close</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;).start();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用OIO只能支持中等级别的并发，并不能支持上万的连接</li>\n</ul>\n<h5 id=\"实现NIO\"><a href=\"#实现NIO\" class=\"headerlink\" title=\"实现NIO\"></a>实现NIO</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class PlainNioServer &#123;</span><br><span class=\"line\">    public void serve(int port) throws IOException &#123;</span><br><span class=\"line\">        ServerSocketChannel serverChannel = ServerSocketChannel.open();</span><br><span class=\"line\">        serverChannel.configureBlocking(false);</span><br><span class=\"line\">        ServerSocket ss = serverChannel.socket();</span><br><span class=\"line\">        InetSocketAddress address = new InetSocketAddress(port);</span><br><span class=\"line\">        ss.bind(address);</span><br><span class=\"line\">        Selector selector = Selector.open();</span><br><span class=\"line\">        serverChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class=\"line\">        final ByteBuffer msg = ByteBuffer.wrap(&quot;Hi!\\r\\n&quot;.getBytes());</span><br><span class=\"line\">        for (;;)&#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                selector.select();</span><br><span class=\"line\">            &#125; catch (IOException ex) &#123;</span><br><span class=\"line\">                ex.printStackTrace();</span><br><span class=\"line\">                //handle exception</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Set&lt;SelectionKey&gt; readyKeys = selector.selectedKeys();</span><br><span class=\"line\">            Iterator&lt;SelectionKey&gt; iterator = readyKeys.iterator();</span><br><span class=\"line\">            while (iterator.hasNext()) &#123;</span><br><span class=\"line\">                SelectionKey key = iterator.next();</span><br><span class=\"line\">                iterator.remove();</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    if (key.isAcceptable()) &#123;</span><br><span class=\"line\">                        ServerSocketChannel server =</span><br><span class=\"line\">                                (ServerSocketChannel) key.channel();</span><br><span class=\"line\">                        SocketChannel client = server.accept();</span><br><span class=\"line\">                        client.configureBlocking(false);</span><br><span class=\"line\">                        client.register(selector, SelectionKey.OP_WRITE |</span><br><span class=\"line\">                                SelectionKey.OP_READ, msg.duplicate());</span><br><span class=\"line\">                        System.out.println(</span><br><span class=\"line\">                                &quot;Accepted connection from &quot; + client);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    if (key.isWritable()) &#123;</span><br><span class=\"line\">                        SocketChannel client =</span><br><span class=\"line\">                                (SocketChannel) key.channel();</span><br><span class=\"line\">                        ByteBuffer buffer =</span><br><span class=\"line\">                                (ByteBuffer) key.attachment();</span><br><span class=\"line\">                        while (buffer.hasRemaining()) &#123;</span><br><span class=\"line\">                            if (client.write(buffer) == 0) &#123;</span><br><span class=\"line\">                                break;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        client.close();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; catch (IOException ex) &#123;</span><br><span class=\"line\">                    key.cancel();</span><br><span class=\"line\">                    try &#123;</span><br><span class=\"line\">                        key.channel().close();</span><br><span class=\"line\">                    &#125; catch (IOException cex) &#123;</span><br><span class=\"line\">                        // ignore on close</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h5><p>可以看出传统的OIO与NIO相比来说差距很大，所以对于编程来说，是需要重写的。</p>\n<h4 id=\"使用netty来实现\"><a href=\"#使用netty来实现\" class=\"headerlink\" title=\"使用netty来实现\"></a>使用netty来实现</h4><h5 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class NettyOioServer &#123;</span><br><span class=\"line\">    public void server(int port)</span><br><span class=\"line\">            throws Exception &#123;</span><br><span class=\"line\">        final ByteBuf buf =</span><br><span class=\"line\">                Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(&quot;Hi!\\r\\n&quot;, Charset.forName(&quot;UTF-8&quot;)));</span><br><span class=\"line\">        EventLoopGroup group = new OioEventLoopGroup();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            ServerBootstrap b = new ServerBootstrap();</span><br><span class=\"line\">            b.group(group)</span><br><span class=\"line\">                    .channel(OioServerSocketChannel.class)</span><br><span class=\"line\">                    .localAddress(new InetSocketAddress(port))</span><br><span class=\"line\">                    .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\">                        @Override</span><br><span class=\"line\">                        public void initChannel(SocketChannel ch)</span><br><span class=\"line\">                                throws Exception &#123;</span><br><span class=\"line\">                                ch.pipeline().addLast(</span><br><span class=\"line\">                                    new ChannelInboundHandlerAdapter() &#123;</span><br><span class=\"line\">                                        @Override</span><br><span class=\"line\">                                        public void channelActive(</span><br><span class=\"line\">                                                ChannelHandlerContext ctx)</span><br><span class=\"line\">                                                throws Exception &#123;</span><br><span class=\"line\">                                            ctx.writeAndFlush(buf.duplicate())</span><br><span class=\"line\">                                                    .addListener(</span><br><span class=\"line\">                                                            ChannelFutureListener.CLOSE);</span><br><span class=\"line\">                                        &#125;</span><br><span class=\"line\">                                    &#125;);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">            ChannelFuture f = b.bind().sync();</span><br><span class=\"line\">            f.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            group.shutdownGracefully().sync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class NettyNioServer &#123;</span><br><span class=\"line\">    public void server(int port) throws Exception &#123;</span><br><span class=\"line\">        final ByteBuf buf =</span><br><span class=\"line\">                Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(&quot;Hi!\\r\\n&quot;,</span><br><span class=\"line\">                        Charset.forName(&quot;UTF-8&quot;)));</span><br><span class=\"line\">        NioEventLoopGroup group = new NioEventLoopGroup();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            ServerBootstrap b = new ServerBootstrap();</span><br><span class=\"line\">            b.group(group).channel(NioServerSocketChannel.class)</span><br><span class=\"line\">                    .localAddress(new InetSocketAddress(port))</span><br><span class=\"line\">                    .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\">                                      @Override</span><br><span class=\"line\">                                      public void initChannel(SocketChannel ch)</span><br><span class=\"line\">                                              throws Exception &#123;</span><br><span class=\"line\">                                              ch.pipeline().addLast(</span><br><span class=\"line\">                                                  new ChannelInboundHandlerAdapter() &#123;</span><br><span class=\"line\">                                                      @Override</span><br><span class=\"line\">                                                      public void channelActive(</span><br><span class=\"line\">                                                              ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class=\"line\">                                                                ctx.writeAndFlush(buf.duplicate())</span><br><span class=\"line\">                                                                  .addListener(</span><br><span class=\"line\">                                                                          ChannelFutureListener.CLOSE);</span><br><span class=\"line\">                                                      &#125;</span><br><span class=\"line\">                                                  &#125;);</span><br><span class=\"line\">                                      &#125;</span><br><span class=\"line\">                                  &#125;</span><br><span class=\"line\">                    );</span><br><span class=\"line\">            ChannelFuture f = b.bind().sync();</span><br><span class=\"line\">            f.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            group.shutdownGracefully().sync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"transport-API\"><a href=\"#transport-API\" class=\"headerlink\" title=\"transport API\"></a>transport API</h3><p>ChannleHandler包含以下传统使用：</p>\n<ul>\n<li>channel是线程安全的</li>\n<li>将数据转换类型</li>\n<li>提供异常通知</li>\n<li>提供channle active与 inactive的通知</li>\n<li>提供当channle注册或者从eventLoop注销</li>\n</ul>\n<p>linux使用epoll 本地非阻塞传输、可以通过本地传输通过JVM、内部传输可以测试应用逻辑</p>\n<p><img src=\"/images/netty_part1/2018-7-30-1.png\" alt=\"channel method\"></p>\n<h4 id=\"包含的传输\"><a href=\"#包含的传输\" class=\"headerlink\" title=\"包含的传输\"></a>包含的传输</h4><p><img src=\"/images/netty_part1/2018-7-30-2.png\" alt=\"channel include\"></p>\n<h4 id=\"状态的改变\"><a href=\"#状态的改变\" class=\"headerlink\" title=\"状态的改变\"></a>状态的改变</h4><p><img src=\"/images/netty_part1/2018-7-30-3.png\" alt=\"Selection Operation bit-set\"></p>\n<h4 id=\"netty支持的OIO实现\"><a href=\"#netty支持的OIO实现\" class=\"headerlink\" title=\"netty支持的OIO实现\"></a>netty支持的OIO实现</h4><p>通过使用很短时间间隔获取结果，如果未获取到则抛出异常，来继续进行事件循环来实现OIO</p>\n<h3 id=\"总结-summary\"><a href=\"#总结-summary\" class=\"headerlink\" title=\"总结 summary\"></a>总结 summary</h3><p>在这一张主要讨论了传，输并讨论了传输行为的各种最小需求，因为不是所有的传输在给定的java版本以及同样类型适用于特定的os</p>\n","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>传统的oio（old I/O）编程，与nio异步编程在Api级别差别比较大，但是netty在公共API做了很好的封装，这比在传统的使用JDK编程要更简单。</p>\n<h4 id=\"使用传统的jdk来实现blocking与non-blocking\"><a href=\"#使用传统的jdk来实现blocking与non-blocking\" class=\"headerlink\" title=\"使用传统的jdk来实现blocking与non-blocking\"></a>使用传统的jdk来实现blocking与non-blocking</h4><h5 id=\"实现blocking\"><a href=\"#实现blocking\" class=\"headerlink\" title=\"实现blocking\"></a>实现blocking</h5>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class PlainOioServer &#123;</span><br><span class=\"line\">    public void serve(int port) throws IOException &#123;</span><br><span class=\"line\">        final ServerSocket socket = new ServerSocket(port);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            for(;;) &#123;</span><br><span class=\"line\">                final Socket clientSocket = socket.accept();</span><br><span class=\"line\">                System.out.println(</span><br><span class=\"line\">                        &quot;Accepted connection from &quot; + clientSocket);</span><br><span class=\"line\">                new Thread(new Runnable() &#123;</span><br><span class=\"line\">                    @Override</span><br><span class=\"line\">                    public void run() &#123;</span><br><span class=\"line\">                        OutputStream out;</span><br><span class=\"line\">                        try &#123;</span><br><span class=\"line\">                            out = clientSocket.getOutputStream();</span><br><span class=\"line\">                            out.write(&quot;Hi!\\r\\n&quot;.getBytes(</span><br><span class=\"line\">                                    Charset.forName(&quot;UTF-8&quot;)));</span><br><span class=\"line\">                            out.flush();</span><br><span class=\"line\">                            clientSocket.close();</span><br><span class=\"line\">                        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                            e.printStackTrace();</span><br><span class=\"line\">                        &#125; finally &#123;</span><br><span class=\"line\">                            try &#123;</span><br><span class=\"line\">                                clientSocket.close();</span><br><span class=\"line\">                            &#125; catch (IOException ex) &#123;</span><br><span class=\"line\">                                // ignore on close</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;).start();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用OIO只能支持中等级别的并发，并不能支持上万的连接</li>\n</ul>\n<h5 id=\"实现NIO\"><a href=\"#实现NIO\" class=\"headerlink\" title=\"实现NIO\"></a>实现NIO</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class PlainNioServer &#123;</span><br><span class=\"line\">    public void serve(int port) throws IOException &#123;</span><br><span class=\"line\">        ServerSocketChannel serverChannel = ServerSocketChannel.open();</span><br><span class=\"line\">        serverChannel.configureBlocking(false);</span><br><span class=\"line\">        ServerSocket ss = serverChannel.socket();</span><br><span class=\"line\">        InetSocketAddress address = new InetSocketAddress(port);</span><br><span class=\"line\">        ss.bind(address);</span><br><span class=\"line\">        Selector selector = Selector.open();</span><br><span class=\"line\">        serverChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class=\"line\">        final ByteBuffer msg = ByteBuffer.wrap(&quot;Hi!\\r\\n&quot;.getBytes());</span><br><span class=\"line\">        for (;;)&#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                selector.select();</span><br><span class=\"line\">            &#125; catch (IOException ex) &#123;</span><br><span class=\"line\">                ex.printStackTrace();</span><br><span class=\"line\">                //handle exception</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Set&lt;SelectionKey&gt; readyKeys = selector.selectedKeys();</span><br><span class=\"line\">            Iterator&lt;SelectionKey&gt; iterator = readyKeys.iterator();</span><br><span class=\"line\">            while (iterator.hasNext()) &#123;</span><br><span class=\"line\">                SelectionKey key = iterator.next();</span><br><span class=\"line\">                iterator.remove();</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    if (key.isAcceptable()) &#123;</span><br><span class=\"line\">                        ServerSocketChannel server =</span><br><span class=\"line\">                                (ServerSocketChannel) key.channel();</span><br><span class=\"line\">                        SocketChannel client = server.accept();</span><br><span class=\"line\">                        client.configureBlocking(false);</span><br><span class=\"line\">                        client.register(selector, SelectionKey.OP_WRITE |</span><br><span class=\"line\">                                SelectionKey.OP_READ, msg.duplicate());</span><br><span class=\"line\">                        System.out.println(</span><br><span class=\"line\">                                &quot;Accepted connection from &quot; + client);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    if (key.isWritable()) &#123;</span><br><span class=\"line\">                        SocketChannel client =</span><br><span class=\"line\">                                (SocketChannel) key.channel();</span><br><span class=\"line\">                        ByteBuffer buffer =</span><br><span class=\"line\">                                (ByteBuffer) key.attachment();</span><br><span class=\"line\">                        while (buffer.hasRemaining()) &#123;</span><br><span class=\"line\">                            if (client.write(buffer) == 0) &#123;</span><br><span class=\"line\">                                break;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        client.close();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; catch (IOException ex) &#123;</span><br><span class=\"line\">                    key.cancel();</span><br><span class=\"line\">                    try &#123;</span><br><span class=\"line\">                        key.channel().close();</span><br><span class=\"line\">                    &#125; catch (IOException cex) &#123;</span><br><span class=\"line\">                        // ignore on close</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h5><p>可以看出传统的OIO与NIO相比来说差距很大，所以对于编程来说，是需要重写的。</p>\n<h4 id=\"使用netty来实现\"><a href=\"#使用netty来实现\" class=\"headerlink\" title=\"使用netty来实现\"></a>使用netty来实现</h4><h5 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class NettyOioServer &#123;</span><br><span class=\"line\">    public void server(int port)</span><br><span class=\"line\">            throws Exception &#123;</span><br><span class=\"line\">        final ByteBuf buf =</span><br><span class=\"line\">                Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(&quot;Hi!\\r\\n&quot;, Charset.forName(&quot;UTF-8&quot;)));</span><br><span class=\"line\">        EventLoopGroup group = new OioEventLoopGroup();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            ServerBootstrap b = new ServerBootstrap();</span><br><span class=\"line\">            b.group(group)</span><br><span class=\"line\">                    .channel(OioServerSocketChannel.class)</span><br><span class=\"line\">                    .localAddress(new InetSocketAddress(port))</span><br><span class=\"line\">                    .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\">                        @Override</span><br><span class=\"line\">                        public void initChannel(SocketChannel ch)</span><br><span class=\"line\">                                throws Exception &#123;</span><br><span class=\"line\">                                ch.pipeline().addLast(</span><br><span class=\"line\">                                    new ChannelInboundHandlerAdapter() &#123;</span><br><span class=\"line\">                                        @Override</span><br><span class=\"line\">                                        public void channelActive(</span><br><span class=\"line\">                                                ChannelHandlerContext ctx)</span><br><span class=\"line\">                                                throws Exception &#123;</span><br><span class=\"line\">                                            ctx.writeAndFlush(buf.duplicate())</span><br><span class=\"line\">                                                    .addListener(</span><br><span class=\"line\">                                                            ChannelFutureListener.CLOSE);</span><br><span class=\"line\">                                        &#125;</span><br><span class=\"line\">                                    &#125;);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">            ChannelFuture f = b.bind().sync();</span><br><span class=\"line\">            f.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            group.shutdownGracefully().sync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class NettyNioServer &#123;</span><br><span class=\"line\">    public void server(int port) throws Exception &#123;</span><br><span class=\"line\">        final ByteBuf buf =</span><br><span class=\"line\">                Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(&quot;Hi!\\r\\n&quot;,</span><br><span class=\"line\">                        Charset.forName(&quot;UTF-8&quot;)));</span><br><span class=\"line\">        NioEventLoopGroup group = new NioEventLoopGroup();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            ServerBootstrap b = new ServerBootstrap();</span><br><span class=\"line\">            b.group(group).channel(NioServerSocketChannel.class)</span><br><span class=\"line\">                    .localAddress(new InetSocketAddress(port))</span><br><span class=\"line\">                    .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\">                                      @Override</span><br><span class=\"line\">                                      public void initChannel(SocketChannel ch)</span><br><span class=\"line\">                                              throws Exception &#123;</span><br><span class=\"line\">                                              ch.pipeline().addLast(</span><br><span class=\"line\">                                                  new ChannelInboundHandlerAdapter() &#123;</span><br><span class=\"line\">                                                      @Override</span><br><span class=\"line\">                                                      public void channelActive(</span><br><span class=\"line\">                                                              ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class=\"line\">                                                                ctx.writeAndFlush(buf.duplicate())</span><br><span class=\"line\">                                                                  .addListener(</span><br><span class=\"line\">                                                                          ChannelFutureListener.CLOSE);</span><br><span class=\"line\">                                                      &#125;</span><br><span class=\"line\">                                                  &#125;);</span><br><span class=\"line\">                                      &#125;</span><br><span class=\"line\">                                  &#125;</span><br><span class=\"line\">                    );</span><br><span class=\"line\">            ChannelFuture f = b.bind().sync();</span><br><span class=\"line\">            f.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            group.shutdownGracefully().sync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"transport-API\"><a href=\"#transport-API\" class=\"headerlink\" title=\"transport API\"></a>transport API</h3><p>ChannleHandler包含以下传统使用：</p>\n<ul>\n<li>channel是线程安全的</li>\n<li>将数据转换类型</li>\n<li>提供异常通知</li>\n<li>提供channle active与 inactive的通知</li>\n<li>提供当channle注册或者从eventLoop注销</li>\n</ul>\n<p>linux使用epoll 本地非阻塞传输、可以通过本地传输通过JVM、内部传输可以测试应用逻辑</p>\n<p><img src=\"/images/netty_part1/2018-7-30-1.png\" alt=\"channel method\"></p>\n<h4 id=\"包含的传输\"><a href=\"#包含的传输\" class=\"headerlink\" title=\"包含的传输\"></a>包含的传输</h4><p><img src=\"/images/netty_part1/2018-7-30-2.png\" alt=\"channel include\"></p>\n<h4 id=\"状态的改变\"><a href=\"#状态的改变\" class=\"headerlink\" title=\"状态的改变\"></a>状态的改变</h4><p><img src=\"/images/netty_part1/2018-7-30-3.png\" alt=\"Selection Operation bit-set\"></p>\n<h4 id=\"netty支持的OIO实现\"><a href=\"#netty支持的OIO实现\" class=\"headerlink\" title=\"netty支持的OIO实现\"></a>netty支持的OIO实现</h4><p>通过使用很短时间间隔获取结果，如果未获取到则抛出异常，来继续进行事件循环来实现OIO</p>\n<h3 id=\"总结-summary\"><a href=\"#总结-summary\" class=\"headerlink\" title=\"总结 summary\"></a>总结 summary</h3><p>在这一张主要讨论了传，输并讨论了传输行为的各种最小需求，因为不是所有的传输在给定的java版本以及同样类型适用于特定的os</p>"},{"title":"netty ByteBuf","date":"2018-07-31T00:36:02.000Z","_content":"\n### 简介\n这章主要讲解数据的容器-ByteBuf ,以及相关的Api细节、使用用例和内存分配\n\n网络数据的基础单元总是byte（字节），jva nio 提供ByteBuffer作为字节的容器，但是这个类使用比较负责，而且用起来很笨重\n\nnetty提供了ByteBuf来承担这一个责任，更加好的API使用\n<!--more-->\n\n###ByteBuf API\nnetty API暴露了两部分 abstract class ByteBuf和 interface BYteBufHolder\n\n* 可扩展用户自定义的buffer类型\n* 透明的零复制通过内置的组成buffer 类型\n* 可以根据要求扩展容量\n* 读写切换不需要调用类似于ByteBuffer's flip()方法\n* 读写使用不同的索引\n* 可以链式调用方法\n* 相关计数支持\n* 支持池\n\n#### ByteBuf 怎么工作\n* ByteBuf有两个索引，一个读索引，一个写索引，当超出正常的索引范围，会触发IndexOutOfBoundsException\n* ByteBuf最大的容量是Integer.MAX_VALUE\n\n#### ByteBuf使用模式\n##### HEAP BUFFERS\n顾名思义：使用堆内存进行存储的buffer，在内存中作为一个backing array\n\n优点：\n    分配，以及回收很快\n    使用java GC\n\n##### DIRECT BUFFERS\n使用直接内存分配的buffer，就是使用本地的Api\n\n优点：\n    避免在本地I/O操作前后，拷贝buffer内容到中间状态\n    通过引用计数来进行释放\n\n缺点：\n    获取、回收比较昂贵\n\n##### Composite Buffers\n这个模式聚合了多个ByteBufs,你可以添加或删除你需要的ByteBuf,对外表示一个single\n\n例如一个响应分为header 与body 就可以构建一个Composite Buffers，轻松实现\n\n#### Byte 级别的操作\n##### 随机根据索引获取\n```\nByteBuf buffer = ...;\n        for (int i = 0; i < buffer.capacity(); i++) {\n            byte b = buffer.getByte(i);\n           System.out.println((char) b);\n       }\n\n```\n##### 序列存取数据\nByteBuf有两个读、写索引\n![ByteBuf构造](/images/netty_part1/2018-7-31-1.png)\n\n##### discardable bytes\n表示已经读取过的数据，通过执行read操作，可以通过调用discardReadBytes()来丢弃。\n\n一般不建议经常使用，可能导致内存拷贝，这时候内容部分已经移到开头了，通常，只有当内存很稀缺\n\n##### Readable bytes\n通常这部分存储真正的内容，readerIndex通常从0开始，你可以读取或者跳过等。\n\n读取全部数据\n```\nByteBuf buffer = ...;\nwhile (buffer.isReadable()) {\n    System.out.println(buffer.readByte());\n}\n\n```\n\n##### Writable bytes\n表示的是准备写入的区域，任意写入的操作都将会使writeIndex增加，\n\n写入\n```\nByteBuf buffer = ...;\nwhile (buffer.writableBytes() >= 4) {\n    buffer.writeInt(random.nextInt());\n}\n```\n\n##### Index Management\n ByteBuf readerIndex and writerIndex 通过调用 markReaderIndex(), markWriterIndex(), resetReaderIndex(), and reset- WriterIndex()重置读或者写索引 ，   readerIndex(int) 或者 writerIndex(int)都会将索引设置，因此请小心设置，可以通过调用clear()将读、写索引设置为0\n\n\n##### 搜索操作\n通常可以用IndexOf()判断在哪个位置，复杂搜索可以使用ByteBufProcessor，这个借口定义了很多有用的方法，例如：\n```\nforEachByte(ByteBufProcessor.FIND_NUL)\n```\n\n##### 获取 buffers\n以下操作都会返回新的buffer，但是底层依然是源ButeBuf，所以修改新Buffer会导致源变化\n```\nduplicate()\nslice()\nslice(int, int)\nUnpooled.unmodifiableBuffer(...)\norder(ByteOrder)\nreadSlice(int)\n```\n\n如果想深度拷贝，可以使用copy() 方法\n\n```\nCharset utf8 = Charset.forName(\"UTF-8\");\nByteBuf buf = Unpooled.copiedBuffer(\"Netty in Action rocks!\", utf8);\nByteBuf copy = buf.copy(0, 14);\nSystem.out.println(copy.toString(utf8));\nbuf.setByte(0, (byte)'J');\nassert buf.getByte(0) != copy.getByte(0);\n```\n\n##### 读写操作\nget() set() 不会改变索引\nread() write() 会改变索引\n![ByteBuf get/set](/images/netty_part1/2018-7-31-2.png)\n\n![ByteBuf read](/images/netty_part1/2018-7-31-3.png)\n\n![ByteBuf write](/images/netty_part1/2018-7-31-4.png)\n\n\n\n##### 更多的操作\n![ByteBuf 其他操作](/images/netty_part1/2018-7-31-5.png)\n\n\n### 接口ByteBufHolder\n定义了一个可以实现自己的属性的接口，例如一个http请求中，多个属性，就可以使用ByteBufHolder来实现\n\n### ByteBuf allocation\n本节主要讲述怎么管理ByteBuf的实例\n\n#### ByteBufAllocator\n为了减少分配、以及回收的成本，netty使用了池化的ByteBufAllocator接口\n\n提供了两种实现：ByteBufAllocator: PooledByteBufAllocator and UnpooledByteBufAllocator.\n顾名思义，前者每次使用已有的对象，后者每次返回一个新的对象\n![ByteBufAllocator](/images/netty_part1/2018-7-31-6.png)\n\n\n#### 非池化的 buffers(Unpooled)\n许多情况下我们并没有ByteBufAllocator的相关引用，netty提供了一个工具类，使用静态方法提供ByteBuf的实例\n![Unpooled](/images/netty_part1/2018-7-31-7.png)\n\n\n\n#### 工具类 ByteBufUtil\n用于操作ByteBuf，例如比较equal()  ,打印 hexdup()成16进制的信息\n\n\n### 引用计数 Reference counting\n引用计数是一个用于优化内存使用的技术，通过一个对象当其他对象不在拥有它的引用时，从而释放资源，netty是在版本4的时候实现的，使用ByteBuf、ByteBufHolder\n\nnetty通过实现接口，interface ReferenceCounted，引用计数主要用于池化对象的释放，避免过大的内存消耗\n\n```\nChannel channel = ...;\nByteBufAllocator allocator = channel.alloc();\n....\nByteBuf buffer = allocator.directBuffer();\nassert buffer.refCnt() == 1;\n\n\nByteBuf buffer = ...;\nboolean released = buffer.release();\n\n```\n\n当对象被释放了，再使用，会导致IllegalReferenceCountException.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/chapter5-2018-7-31.md","raw":"---\ntitle: netty ByteBuf\ndate: 2018-07-31 08:36:02\ntags: netty\ncategories: [\"netty\",\"ByteBuf\"]\n---\n\n### 简介\n这章主要讲解数据的容器-ByteBuf ,以及相关的Api细节、使用用例和内存分配\n\n网络数据的基础单元总是byte（字节），jva nio 提供ByteBuffer作为字节的容器，但是这个类使用比较负责，而且用起来很笨重\n\nnetty提供了ByteBuf来承担这一个责任，更加好的API使用\n<!--more-->\n\n###ByteBuf API\nnetty API暴露了两部分 abstract class ByteBuf和 interface BYteBufHolder\n\n* 可扩展用户自定义的buffer类型\n* 透明的零复制通过内置的组成buffer 类型\n* 可以根据要求扩展容量\n* 读写切换不需要调用类似于ByteBuffer's flip()方法\n* 读写使用不同的索引\n* 可以链式调用方法\n* 相关计数支持\n* 支持池\n\n#### ByteBuf 怎么工作\n* ByteBuf有两个索引，一个读索引，一个写索引，当超出正常的索引范围，会触发IndexOutOfBoundsException\n* ByteBuf最大的容量是Integer.MAX_VALUE\n\n#### ByteBuf使用模式\n##### HEAP BUFFERS\n顾名思义：使用堆内存进行存储的buffer，在内存中作为一个backing array\n\n优点：\n    分配，以及回收很快\n    使用java GC\n\n##### DIRECT BUFFERS\n使用直接内存分配的buffer，就是使用本地的Api\n\n优点：\n    避免在本地I/O操作前后，拷贝buffer内容到中间状态\n    通过引用计数来进行释放\n\n缺点：\n    获取、回收比较昂贵\n\n##### Composite Buffers\n这个模式聚合了多个ByteBufs,你可以添加或删除你需要的ByteBuf,对外表示一个single\n\n例如一个响应分为header 与body 就可以构建一个Composite Buffers，轻松实现\n\n#### Byte 级别的操作\n##### 随机根据索引获取\n```\nByteBuf buffer = ...;\n        for (int i = 0; i < buffer.capacity(); i++) {\n            byte b = buffer.getByte(i);\n           System.out.println((char) b);\n       }\n\n```\n##### 序列存取数据\nByteBuf有两个读、写索引\n![ByteBuf构造](/images/netty_part1/2018-7-31-1.png)\n\n##### discardable bytes\n表示已经读取过的数据，通过执行read操作，可以通过调用discardReadBytes()来丢弃。\n\n一般不建议经常使用，可能导致内存拷贝，这时候内容部分已经移到开头了，通常，只有当内存很稀缺\n\n##### Readable bytes\n通常这部分存储真正的内容，readerIndex通常从0开始，你可以读取或者跳过等。\n\n读取全部数据\n```\nByteBuf buffer = ...;\nwhile (buffer.isReadable()) {\n    System.out.println(buffer.readByte());\n}\n\n```\n\n##### Writable bytes\n表示的是准备写入的区域，任意写入的操作都将会使writeIndex增加，\n\n写入\n```\nByteBuf buffer = ...;\nwhile (buffer.writableBytes() >= 4) {\n    buffer.writeInt(random.nextInt());\n}\n```\n\n##### Index Management\n ByteBuf readerIndex and writerIndex 通过调用 markReaderIndex(), markWriterIndex(), resetReaderIndex(), and reset- WriterIndex()重置读或者写索引 ，   readerIndex(int) 或者 writerIndex(int)都会将索引设置，因此请小心设置，可以通过调用clear()将读、写索引设置为0\n\n\n##### 搜索操作\n通常可以用IndexOf()判断在哪个位置，复杂搜索可以使用ByteBufProcessor，这个借口定义了很多有用的方法，例如：\n```\nforEachByte(ByteBufProcessor.FIND_NUL)\n```\n\n##### 获取 buffers\n以下操作都会返回新的buffer，但是底层依然是源ButeBuf，所以修改新Buffer会导致源变化\n```\nduplicate()\nslice()\nslice(int, int)\nUnpooled.unmodifiableBuffer(...)\norder(ByteOrder)\nreadSlice(int)\n```\n\n如果想深度拷贝，可以使用copy() 方法\n\n```\nCharset utf8 = Charset.forName(\"UTF-8\");\nByteBuf buf = Unpooled.copiedBuffer(\"Netty in Action rocks!\", utf8);\nByteBuf copy = buf.copy(0, 14);\nSystem.out.println(copy.toString(utf8));\nbuf.setByte(0, (byte)'J');\nassert buf.getByte(0) != copy.getByte(0);\n```\n\n##### 读写操作\nget() set() 不会改变索引\nread() write() 会改变索引\n![ByteBuf get/set](/images/netty_part1/2018-7-31-2.png)\n\n![ByteBuf read](/images/netty_part1/2018-7-31-3.png)\n\n![ByteBuf write](/images/netty_part1/2018-7-31-4.png)\n\n\n\n##### 更多的操作\n![ByteBuf 其他操作](/images/netty_part1/2018-7-31-5.png)\n\n\n### 接口ByteBufHolder\n定义了一个可以实现自己的属性的接口，例如一个http请求中，多个属性，就可以使用ByteBufHolder来实现\n\n### ByteBuf allocation\n本节主要讲述怎么管理ByteBuf的实例\n\n#### ByteBufAllocator\n为了减少分配、以及回收的成本，netty使用了池化的ByteBufAllocator接口\n\n提供了两种实现：ByteBufAllocator: PooledByteBufAllocator and UnpooledByteBufAllocator.\n顾名思义，前者每次使用已有的对象，后者每次返回一个新的对象\n![ByteBufAllocator](/images/netty_part1/2018-7-31-6.png)\n\n\n#### 非池化的 buffers(Unpooled)\n许多情况下我们并没有ByteBufAllocator的相关引用，netty提供了一个工具类，使用静态方法提供ByteBuf的实例\n![Unpooled](/images/netty_part1/2018-7-31-7.png)\n\n\n\n#### 工具类 ByteBufUtil\n用于操作ByteBuf，例如比较equal()  ,打印 hexdup()成16进制的信息\n\n\n### 引用计数 Reference counting\n引用计数是一个用于优化内存使用的技术，通过一个对象当其他对象不在拥有它的引用时，从而释放资源，netty是在版本4的时候实现的，使用ByteBuf、ByteBufHolder\n\nnetty通过实现接口，interface ReferenceCounted，引用计数主要用于池化对象的释放，避免过大的内存消耗\n\n```\nChannel channel = ...;\nByteBufAllocator allocator = channel.alloc();\n....\nByteBuf buffer = allocator.directBuffer();\nassert buffer.refCnt() == 1;\n\n\nByteBuf buffer = ...;\nboolean released = buffer.release();\n\n```\n\n当对象被释放了，再使用，会导致IllegalReferenceCountException.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"chapter5-2018-7-31","published":1,"updated":"2019-09-23T06:59:38.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0w29rjz0007uup2xwygfldt","content":"<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>这章主要讲解数据的容器-ByteBuf ,以及相关的Api细节、使用用例和内存分配</p>\n<p>网络数据的基础单元总是byte（字节），jva nio 提供ByteBuffer作为字节的容器，但是这个类使用比较负责，而且用起来很笨重</p>\n<p>netty提供了ByteBuf来承担这一个责任，更加好的API使用<br><a id=\"more\"></a></p>\n<p>###ByteBuf API<br>netty API暴露了两部分 abstract class ByteBuf和 interface BYteBufHolder</p>\n<ul>\n<li>可扩展用户自定义的buffer类型</li>\n<li>透明的零复制通过内置的组成buffer 类型</li>\n<li>可以根据要求扩展容量</li>\n<li>读写切换不需要调用类似于ByteBuffer’s flip()方法</li>\n<li>读写使用不同的索引</li>\n<li>可以链式调用方法</li>\n<li>相关计数支持</li>\n<li>支持池</li>\n</ul>\n<h4 id=\"ByteBuf-怎么工作\"><a href=\"#ByteBuf-怎么工作\" class=\"headerlink\" title=\"ByteBuf 怎么工作\"></a>ByteBuf 怎么工作</h4><ul>\n<li>ByteBuf有两个索引，一个读索引，一个写索引，当超出正常的索引范围，会触发IndexOutOfBoundsException</li>\n<li>ByteBuf最大的容量是Integer.MAX_VALUE</li>\n</ul>\n<h4 id=\"ByteBuf使用模式\"><a href=\"#ByteBuf使用模式\" class=\"headerlink\" title=\"ByteBuf使用模式\"></a>ByteBuf使用模式</h4><h5 id=\"HEAP-BUFFERS\"><a href=\"#HEAP-BUFFERS\" class=\"headerlink\" title=\"HEAP BUFFERS\"></a>HEAP BUFFERS</h5><p>顾名思义：使用堆内存进行存储的buffer，在内存中作为一个backing array</p>\n<p>优点：<br>    分配，以及回收很快<br>    使用java GC</p>\n<h5 id=\"DIRECT-BUFFERS\"><a href=\"#DIRECT-BUFFERS\" class=\"headerlink\" title=\"DIRECT BUFFERS\"></a>DIRECT BUFFERS</h5><p>使用直接内存分配的buffer，就是使用本地的Api</p>\n<p>优点：<br>    避免在本地I/O操作前后，拷贝buffer内容到中间状态<br>    通过引用计数来进行释放</p>\n<p>缺点：<br>    获取、回收比较昂贵</p>\n<h5 id=\"Composite-Buffers\"><a href=\"#Composite-Buffers\" class=\"headerlink\" title=\"Composite Buffers\"></a>Composite Buffers</h5><p>这个模式聚合了多个ByteBufs,你可以添加或删除你需要的ByteBuf,对外表示一个single</p>\n<p>例如一个响应分为header 与body 就可以构建一个Composite Buffers，轻松实现</p>\n<h4 id=\"Byte-级别的操作\"><a href=\"#Byte-级别的操作\" class=\"headerlink\" title=\"Byte 级别的操作\"></a>Byte 级别的操作</h4><h5 id=\"随机根据索引获取\"><a href=\"#随机根据索引获取\" class=\"headerlink\" title=\"随机根据索引获取\"></a>随机根据索引获取</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ByteBuf buffer = ...;</span><br><span class=\"line\">        for (int i = 0; i &lt; buffer.capacity(); i++) &#123;</span><br><span class=\"line\">            byte b = buffer.getByte(i);</span><br><span class=\"line\">           System.out.println((char) b);</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"序列存取数据\"><a href=\"#序列存取数据\" class=\"headerlink\" title=\"序列存取数据\"></a>序列存取数据</h5><p>ByteBuf有两个读、写索引<br><img src=\"/images/netty_part1/2018-7-31-1.png\" alt=\"ByteBuf构造\"></p>\n<h5 id=\"discardable-bytes\"><a href=\"#discardable-bytes\" class=\"headerlink\" title=\"discardable bytes\"></a>discardable bytes</h5><p>表示已经读取过的数据，通过执行read操作，可以通过调用discardReadBytes()来丢弃。</p>\n<p>一般不建议经常使用，可能导致内存拷贝，这时候内容部分已经移到开头了，通常，只有当内存很稀缺</p>\n<h5 id=\"Readable-bytes\"><a href=\"#Readable-bytes\" class=\"headerlink\" title=\"Readable bytes\"></a>Readable bytes</h5><p>通常这部分存储真正的内容，readerIndex通常从0开始，你可以读取或者跳过等。</p>\n<p>读取全部数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ByteBuf buffer = ...;</span><br><span class=\"line\">while (buffer.isReadable()) &#123;</span><br><span class=\"line\">    System.out.println(buffer.readByte());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"Writable-bytes\"><a href=\"#Writable-bytes\" class=\"headerlink\" title=\"Writable bytes\"></a>Writable bytes</h5><p>表示的是准备写入的区域，任意写入的操作都将会使writeIndex增加，</p>\n<p>写入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ByteBuf buffer = ...;</span><br><span class=\"line\">while (buffer.writableBytes() &gt;= 4) &#123;</span><br><span class=\"line\">    buffer.writeInt(random.nextInt());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"Index-Management\"><a href=\"#Index-Management\" class=\"headerlink\" title=\"Index Management\"></a>Index Management</h5><p> ByteBuf readerIndex and writerIndex 通过调用 markReaderIndex(), markWriterIndex(), resetReaderIndex(), and reset- WriterIndex()重置读或者写索引 ，   readerIndex(int) 或者 writerIndex(int)都会将索引设置，因此请小心设置，可以通过调用clear()将读、写索引设置为0</p>\n<h5 id=\"搜索操作\"><a href=\"#搜索操作\" class=\"headerlink\" title=\"搜索操作\"></a>搜索操作</h5><p>通常可以用IndexOf()判断在哪个位置，复杂搜索可以使用ByteBufProcessor，这个借口定义了很多有用的方法，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forEachByte(ByteBufProcessor.FIND_NUL)</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"获取-buffers\"><a href=\"#获取-buffers\" class=\"headerlink\" title=\"获取 buffers\"></a>获取 buffers</h5><p>以下操作都会返回新的buffer，但是底层依然是源ButeBuf，所以修改新Buffer会导致源变化<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">duplicate()</span><br><span class=\"line\">slice()</span><br><span class=\"line\">slice(int, int)</span><br><span class=\"line\">Unpooled.unmodifiableBuffer(...)</span><br><span class=\"line\">order(ByteOrder)</span><br><span class=\"line\">readSlice(int)</span><br></pre></td></tr></table></figure></p>\n<p>如果想深度拷贝，可以使用copy() 方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Charset utf8 = Charset.forName(&quot;UTF-8&quot;);</span><br><span class=\"line\">ByteBuf buf = Unpooled.copiedBuffer(&quot;Netty in Action rocks!&quot;, utf8);</span><br><span class=\"line\">ByteBuf copy = buf.copy(0, 14);</span><br><span class=\"line\">System.out.println(copy.toString(utf8));</span><br><span class=\"line\">buf.setByte(0, (byte)&apos;J&apos;);</span><br><span class=\"line\">assert buf.getByte(0) != copy.getByte(0);</span><br></pre></td></tr></table></figure>\n<h5 id=\"读写操作\"><a href=\"#读写操作\" class=\"headerlink\" title=\"读写操作\"></a>读写操作</h5><p>get() set() 不会改变索引<br>read() write() 会改变索引<br><img src=\"/images/netty_part1/2018-7-31-2.png\" alt=\"ByteBuf get/set\"></p>\n<p><img src=\"/images/netty_part1/2018-7-31-3.png\" alt=\"ByteBuf read\"></p>\n<p><img src=\"/images/netty_part1/2018-7-31-4.png\" alt=\"ByteBuf write\"></p>\n<h5 id=\"更多的操作\"><a href=\"#更多的操作\" class=\"headerlink\" title=\"更多的操作\"></a>更多的操作</h5><p><img src=\"/images/netty_part1/2018-7-31-5.png\" alt=\"ByteBuf 其他操作\"></p>\n<h3 id=\"接口ByteBufHolder\"><a href=\"#接口ByteBufHolder\" class=\"headerlink\" title=\"接口ByteBufHolder\"></a>接口ByteBufHolder</h3><p>定义了一个可以实现自己的属性的接口，例如一个http请求中，多个属性，就可以使用ByteBufHolder来实现</p>\n<h3 id=\"ByteBuf-allocation\"><a href=\"#ByteBuf-allocation\" class=\"headerlink\" title=\"ByteBuf allocation\"></a>ByteBuf allocation</h3><p>本节主要讲述怎么管理ByteBuf的实例</p>\n<h4 id=\"ByteBufAllocator\"><a href=\"#ByteBufAllocator\" class=\"headerlink\" title=\"ByteBufAllocator\"></a>ByteBufAllocator</h4><p>为了减少分配、以及回收的成本，netty使用了池化的ByteBufAllocator接口</p>\n<p>提供了两种实现：ByteBufAllocator: PooledByteBufAllocator and UnpooledByteBufAllocator.<br>顾名思义，前者每次使用已有的对象，后者每次返回一个新的对象<br><img src=\"/images/netty_part1/2018-7-31-6.png\" alt=\"ByteBufAllocator\"></p>\n<h4 id=\"非池化的-buffers-Unpooled\"><a href=\"#非池化的-buffers-Unpooled\" class=\"headerlink\" title=\"非池化的 buffers(Unpooled)\"></a>非池化的 buffers(Unpooled)</h4><p>许多情况下我们并没有ByteBufAllocator的相关引用，netty提供了一个工具类，使用静态方法提供ByteBuf的实例<br><img src=\"/images/netty_part1/2018-7-31-7.png\" alt=\"Unpooled\"></p>\n<h4 id=\"工具类-ByteBufUtil\"><a href=\"#工具类-ByteBufUtil\" class=\"headerlink\" title=\"工具类 ByteBufUtil\"></a>工具类 ByteBufUtil</h4><p>用于操作ByteBuf，例如比较equal()  ,打印 hexdup()成16进制的信息</p>\n<h3 id=\"引用计数-Reference-counting\"><a href=\"#引用计数-Reference-counting\" class=\"headerlink\" title=\"引用计数 Reference counting\"></a>引用计数 Reference counting</h3><p>引用计数是一个用于优化内存使用的技术，通过一个对象当其他对象不在拥有它的引用时，从而释放资源，netty是在版本4的时候实现的，使用ByteBuf、ByteBufHolder</p>\n<p>netty通过实现接口，interface ReferenceCounted，引用计数主要用于池化对象的释放，避免过大的内存消耗</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Channel channel = ...;</span><br><span class=\"line\">ByteBufAllocator allocator = channel.alloc();</span><br><span class=\"line\">....</span><br><span class=\"line\">ByteBuf buffer = allocator.directBuffer();</span><br><span class=\"line\">assert buffer.refCnt() == 1;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ByteBuf buffer = ...;</span><br><span class=\"line\">boolean released = buffer.release();</span><br></pre></td></tr></table></figure>\n<p>当对象被释放了，再使用，会导致IllegalReferenceCountException.</p>\n","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>这章主要讲解数据的容器-ByteBuf ,以及相关的Api细节、使用用例和内存分配</p>\n<p>网络数据的基础单元总是byte（字节），jva nio 提供ByteBuffer作为字节的容器，但是这个类使用比较负责，而且用起来很笨重</p>\n<p>netty提供了ByteBuf来承担这一个责任，更加好的API使用<br>","more":"</p>\n<p>###ByteBuf API<br>netty API暴露了两部分 abstract class ByteBuf和 interface BYteBufHolder</p>\n<ul>\n<li>可扩展用户自定义的buffer类型</li>\n<li>透明的零复制通过内置的组成buffer 类型</li>\n<li>可以根据要求扩展容量</li>\n<li>读写切换不需要调用类似于ByteBuffer’s flip()方法</li>\n<li>读写使用不同的索引</li>\n<li>可以链式调用方法</li>\n<li>相关计数支持</li>\n<li>支持池</li>\n</ul>\n<h4 id=\"ByteBuf-怎么工作\"><a href=\"#ByteBuf-怎么工作\" class=\"headerlink\" title=\"ByteBuf 怎么工作\"></a>ByteBuf 怎么工作</h4><ul>\n<li>ByteBuf有两个索引，一个读索引，一个写索引，当超出正常的索引范围，会触发IndexOutOfBoundsException</li>\n<li>ByteBuf最大的容量是Integer.MAX_VALUE</li>\n</ul>\n<h4 id=\"ByteBuf使用模式\"><a href=\"#ByteBuf使用模式\" class=\"headerlink\" title=\"ByteBuf使用模式\"></a>ByteBuf使用模式</h4><h5 id=\"HEAP-BUFFERS\"><a href=\"#HEAP-BUFFERS\" class=\"headerlink\" title=\"HEAP BUFFERS\"></a>HEAP BUFFERS</h5><p>顾名思义：使用堆内存进行存储的buffer，在内存中作为一个backing array</p>\n<p>优点：<br>    分配，以及回收很快<br>    使用java GC</p>\n<h5 id=\"DIRECT-BUFFERS\"><a href=\"#DIRECT-BUFFERS\" class=\"headerlink\" title=\"DIRECT BUFFERS\"></a>DIRECT BUFFERS</h5><p>使用直接内存分配的buffer，就是使用本地的Api</p>\n<p>优点：<br>    避免在本地I/O操作前后，拷贝buffer内容到中间状态<br>    通过引用计数来进行释放</p>\n<p>缺点：<br>    获取、回收比较昂贵</p>\n<h5 id=\"Composite-Buffers\"><a href=\"#Composite-Buffers\" class=\"headerlink\" title=\"Composite Buffers\"></a>Composite Buffers</h5><p>这个模式聚合了多个ByteBufs,你可以添加或删除你需要的ByteBuf,对外表示一个single</p>\n<p>例如一个响应分为header 与body 就可以构建一个Composite Buffers，轻松实现</p>\n<h4 id=\"Byte-级别的操作\"><a href=\"#Byte-级别的操作\" class=\"headerlink\" title=\"Byte 级别的操作\"></a>Byte 级别的操作</h4><h5 id=\"随机根据索引获取\"><a href=\"#随机根据索引获取\" class=\"headerlink\" title=\"随机根据索引获取\"></a>随机根据索引获取</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ByteBuf buffer = ...;</span><br><span class=\"line\">        for (int i = 0; i &lt; buffer.capacity(); i++) &#123;</span><br><span class=\"line\">            byte b = buffer.getByte(i);</span><br><span class=\"line\">           System.out.println((char) b);</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"序列存取数据\"><a href=\"#序列存取数据\" class=\"headerlink\" title=\"序列存取数据\"></a>序列存取数据</h5><p>ByteBuf有两个读、写索引<br><img src=\"/images/netty_part1/2018-7-31-1.png\" alt=\"ByteBuf构造\"></p>\n<h5 id=\"discardable-bytes\"><a href=\"#discardable-bytes\" class=\"headerlink\" title=\"discardable bytes\"></a>discardable bytes</h5><p>表示已经读取过的数据，通过执行read操作，可以通过调用discardReadBytes()来丢弃。</p>\n<p>一般不建议经常使用，可能导致内存拷贝，这时候内容部分已经移到开头了，通常，只有当内存很稀缺</p>\n<h5 id=\"Readable-bytes\"><a href=\"#Readable-bytes\" class=\"headerlink\" title=\"Readable bytes\"></a>Readable bytes</h5><p>通常这部分存储真正的内容，readerIndex通常从0开始，你可以读取或者跳过等。</p>\n<p>读取全部数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ByteBuf buffer = ...;</span><br><span class=\"line\">while (buffer.isReadable()) &#123;</span><br><span class=\"line\">    System.out.println(buffer.readByte());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"Writable-bytes\"><a href=\"#Writable-bytes\" class=\"headerlink\" title=\"Writable bytes\"></a>Writable bytes</h5><p>表示的是准备写入的区域，任意写入的操作都将会使writeIndex增加，</p>\n<p>写入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ByteBuf buffer = ...;</span><br><span class=\"line\">while (buffer.writableBytes() &gt;= 4) &#123;</span><br><span class=\"line\">    buffer.writeInt(random.nextInt());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"Index-Management\"><a href=\"#Index-Management\" class=\"headerlink\" title=\"Index Management\"></a>Index Management</h5><p> ByteBuf readerIndex and writerIndex 通过调用 markReaderIndex(), markWriterIndex(), resetReaderIndex(), and reset- WriterIndex()重置读或者写索引 ，   readerIndex(int) 或者 writerIndex(int)都会将索引设置，因此请小心设置，可以通过调用clear()将读、写索引设置为0</p>\n<h5 id=\"搜索操作\"><a href=\"#搜索操作\" class=\"headerlink\" title=\"搜索操作\"></a>搜索操作</h5><p>通常可以用IndexOf()判断在哪个位置，复杂搜索可以使用ByteBufProcessor，这个借口定义了很多有用的方法，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forEachByte(ByteBufProcessor.FIND_NUL)</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"获取-buffers\"><a href=\"#获取-buffers\" class=\"headerlink\" title=\"获取 buffers\"></a>获取 buffers</h5><p>以下操作都会返回新的buffer，但是底层依然是源ButeBuf，所以修改新Buffer会导致源变化<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">duplicate()</span><br><span class=\"line\">slice()</span><br><span class=\"line\">slice(int, int)</span><br><span class=\"line\">Unpooled.unmodifiableBuffer(...)</span><br><span class=\"line\">order(ByteOrder)</span><br><span class=\"line\">readSlice(int)</span><br></pre></td></tr></table></figure></p>\n<p>如果想深度拷贝，可以使用copy() 方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Charset utf8 = Charset.forName(&quot;UTF-8&quot;);</span><br><span class=\"line\">ByteBuf buf = Unpooled.copiedBuffer(&quot;Netty in Action rocks!&quot;, utf8);</span><br><span class=\"line\">ByteBuf copy = buf.copy(0, 14);</span><br><span class=\"line\">System.out.println(copy.toString(utf8));</span><br><span class=\"line\">buf.setByte(0, (byte)&apos;J&apos;);</span><br><span class=\"line\">assert buf.getByte(0) != copy.getByte(0);</span><br></pre></td></tr></table></figure>\n<h5 id=\"读写操作\"><a href=\"#读写操作\" class=\"headerlink\" title=\"读写操作\"></a>读写操作</h5><p>get() set() 不会改变索引<br>read() write() 会改变索引<br><img src=\"/images/netty_part1/2018-7-31-2.png\" alt=\"ByteBuf get/set\"></p>\n<p><img src=\"/images/netty_part1/2018-7-31-3.png\" alt=\"ByteBuf read\"></p>\n<p><img src=\"/images/netty_part1/2018-7-31-4.png\" alt=\"ByteBuf write\"></p>\n<h5 id=\"更多的操作\"><a href=\"#更多的操作\" class=\"headerlink\" title=\"更多的操作\"></a>更多的操作</h5><p><img src=\"/images/netty_part1/2018-7-31-5.png\" alt=\"ByteBuf 其他操作\"></p>\n<h3 id=\"接口ByteBufHolder\"><a href=\"#接口ByteBufHolder\" class=\"headerlink\" title=\"接口ByteBufHolder\"></a>接口ByteBufHolder</h3><p>定义了一个可以实现自己的属性的接口，例如一个http请求中，多个属性，就可以使用ByteBufHolder来实现</p>\n<h3 id=\"ByteBuf-allocation\"><a href=\"#ByteBuf-allocation\" class=\"headerlink\" title=\"ByteBuf allocation\"></a>ByteBuf allocation</h3><p>本节主要讲述怎么管理ByteBuf的实例</p>\n<h4 id=\"ByteBufAllocator\"><a href=\"#ByteBufAllocator\" class=\"headerlink\" title=\"ByteBufAllocator\"></a>ByteBufAllocator</h4><p>为了减少分配、以及回收的成本，netty使用了池化的ByteBufAllocator接口</p>\n<p>提供了两种实现：ByteBufAllocator: PooledByteBufAllocator and UnpooledByteBufAllocator.<br>顾名思义，前者每次使用已有的对象，后者每次返回一个新的对象<br><img src=\"/images/netty_part1/2018-7-31-6.png\" alt=\"ByteBufAllocator\"></p>\n<h4 id=\"非池化的-buffers-Unpooled\"><a href=\"#非池化的-buffers-Unpooled\" class=\"headerlink\" title=\"非池化的 buffers(Unpooled)\"></a>非池化的 buffers(Unpooled)</h4><p>许多情况下我们并没有ByteBufAllocator的相关引用，netty提供了一个工具类，使用静态方法提供ByteBuf的实例<br><img src=\"/images/netty_part1/2018-7-31-7.png\" alt=\"Unpooled\"></p>\n<h4 id=\"工具类-ByteBufUtil\"><a href=\"#工具类-ByteBufUtil\" class=\"headerlink\" title=\"工具类 ByteBufUtil\"></a>工具类 ByteBufUtil</h4><p>用于操作ByteBuf，例如比较equal()  ,打印 hexdup()成16进制的信息</p>\n<h3 id=\"引用计数-Reference-counting\"><a href=\"#引用计数-Reference-counting\" class=\"headerlink\" title=\"引用计数 Reference counting\"></a>引用计数 Reference counting</h3><p>引用计数是一个用于优化内存使用的技术，通过一个对象当其他对象不在拥有它的引用时，从而释放资源，netty是在版本4的时候实现的，使用ByteBuf、ByteBufHolder</p>\n<p>netty通过实现接口，interface ReferenceCounted，引用计数主要用于池化对象的释放，避免过大的内存消耗</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Channel channel = ...;</span><br><span class=\"line\">ByteBufAllocator allocator = channel.alloc();</span><br><span class=\"line\">....</span><br><span class=\"line\">ByteBuf buffer = allocator.directBuffer();</span><br><span class=\"line\">assert buffer.refCnt() == 1;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ByteBuf buffer = ...;</span><br><span class=\"line\">boolean released = buffer.release();</span><br></pre></td></tr></table></figure>\n<p>当对象被释放了，再使用，会导致IllegalReferenceCountException.</p>"},{"title":"netty ChannelHandler and ChannelPipeline","date":"2018-08-01T00:36:02.000Z","_content":"\n\n### channelHandler 家族\n\n#### Channel的生命周期\nChannel接口定义了一个简单但是有力的状态模型，与相关的ChannelInboundHandler API,下面四种状态：\n\n* ChannelUnregistered   当channel创建的时候，但是还没有注册到eventLoop\n* ChannelRegistered     Channel注册到EventLoop\n* ChannelActive         当Channel是活跃的时候（连接到远程），当前状态就是可以接受以及发送数据\n* ChannelInactive       当Channel不在连接到远程\n\n> 正常的Channel的生命周期，当这些响应的状态发生后，会产生响应的事件（event），而这些事件将会在ChannlePipeline中从头至尾经过各个ChannelHandler\n<!--more-->\n\n```\nChannelRegistered->ChannelActive->ChannelInactive->ChannelUnregistered\n```\n\n### ChannleHandler的生命周期\nChannelHandler的生命周期发生在add、remove、发生异常的时候\n\n* handlerAdded      当ChannelHandler添加到ChannelPipeline \n* handlerRemoved    当ChannelHandler从 ChannelPipeline 移除\n* exceptionCaught   在处理的过程中发生异常\n\n\nChannelInboundHandler—处理所有的入站数据以及所有类型的状态改变\n\nChannelOutboundHandler—处理所有出站的数据以及对所有的操作进行拦截\n\n#### ChannelInboundHandler接口\n![netty-6](/images/netty_part1/2018-8-1-5.png)\n\n当使用ChannelInboundHandler覆盖channelRead()方法时，记得要主动释放池化的 ByteBuf实例，使用ReferenceCountUtil.release()这个方法来释放\n\n```\n@Sharable\npublic class DiscardHandler extends ChannelInboundHandlerAdapter {\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) {\n\n        ReferenceCountUtil.release(msg);\n    }\n}\nDiscards received message\n```\n\n当然你也可以使用SimpleChannelInboundHandler，这个不需要你主动释放，它会自动释放\n\n```\n@Sharable\npublic class SimpleDiscardHandler\nExtends SimpleChannel- InboundHandler\n     extends SimpleChannelInboundHandler<Object> {\n    @Override\n    public void channelRead0(ChannelHandlerContext ctx,\nObject msg) {\n        // No need to do anything special\n    }\n}\n```\n\n#### ChannelOutboundHandler接口\n出站操作以及数据处理，通常入参包括Channel, ChannelPipeline, and ChannelHandlerContext\n![netty-6](/images/netty_part1/2018-8-1-6.png)\n\n![netty-6](/images/netty_part1/2018-8-1-7.png)\n\n\nCHANNELPROMISE VS. CHANNELFUTURE \n大多数的出站Channel方法使用ChannelPromise作为参数，当操作完成时候被通知，ChannelPromise是ChannelFuture的子类，他定义了一系列方法，像setSuccess() 或者setFailure()，这样可以使得ChannelFuture不可变\n\n#### ChannelHandler adapters\n\n![netty-6](/images/netty_part1/2018-8-1-8.png)\n\n由图可知，adapters实现了ChannelHandler了以及进站、出站的默认实现\n\n#### 资源管理\nnetty默认提供了资源管理类class Resource- LeakDetector，使用这个类可以诊断程序中是否有内存泄漏（主要是ByteBuf）\n\n如果有泄漏检测到，可以看到如下日志\n```\nLEAK: ByteBuf.release() was not called before it's garbage-collected. Enable\nadvanced leak reporting to find out where the leak occurred. To enable\nadvanced leak reporting, specify the JVM option\n'-Dio.netty.leakDetectionLevel=ADVANCED' or call\nResourceLeakDetector.setLevel().\n```\n\n泄漏等级\n![netty-6](/images/netty_part1/2018-8-1-9.png)\n\n### ChannelPipeline 接口\n每一个新的channel都有一个ChannelPipeline\n\n一个event会出现在入站ChannelInboundHandler或者出站ChannelOutboundHandler中，随后它将向下一个hnadler转发，通过ChannelHandlerContext实现\n\nchannelPipeline总是从头到尾的，如果时间类型不符合某个handler，那么会自动跳过该handler\n\n#### 修改ChannelPipeline\n这是相关的方法\n![netty-6](/images/netty_part1/2018-8-1-10.png)\n\n![netty-6](/images/netty_part1/2018-8-1-11.png)\n\n\n```\nChannelPipeline pipeline = ..;\nFirstHandler firstHandler = new FirstHandler();\npipeline.addLast(\"handler1\", firstHandler);\npipeline.addFirst(\"handler2\", new SecondHandler());\npipeline.addLast(\"handler3\", new ThirdHandler());\n...\npipeline.remove(\"handler3\");\npipeline.remove(firstHandler);\npipeline.replace(\"handler2\", \"handler4\", new FourthHandler());\n```\n\nChannelPipeline执行是不能阻塞的，如果因为以前的旧代码兼容，我们可以使用自定义的EventExecutorGroup来添加到ChannelPipeline链上\n\n\n#### 发出时间 firing events\n当ChannelPipeline 发出的有关ChannelInboundHandlers事件的相关API\n![netty-6](/images/netty_part1/2018-8-1-12.png)\n\n\n当ChannelPipeline 发出的有关ChannelOutboundHandlers事件的相关API\n![netty-6](/images/netty_part1/2018-8-1-13.png)\n\n\n#### ChannelPipeline本章总结\n* 一个ChannelPipeline 持有ChannelHandlers 与Channel协调\n* 一个ChannelPipeline 可以动态删减ChannelHandlers \n* ChannelPipeline拥有富足的API，用于入站、出站的所有事件响应\n\n\n### ChannelHandlerContext 接口\nChannelHandlerContext是管理ChannelHandler与它的ChannelPipeline\n\nChannelHandlerContext有很多的方法、主要用于操作Channel、ChannelPipeline，但是不同的是，他的方法将用于整个pipe链，同样的方法被ChannelHandlerContext调用，它将开始在当前的ChannelHandler，并将调动pipe链中下一个ChannelHandler处理该事件\n\n#### 使用ChannelHandlerContext\n\nChannelHandlerContext API\n![netty-6](/images/netty_part1/2018-8-1-14.png)\n![netty-6](/images/netty_part1/2018-8-1-15.png)\n\nChannelHandlerContext、ChannelPipeline、Channel的关系\n![netty-6](/images/netty_part1/2018-8-1-16.png)\n\n只在感兴趣的事件后执行，在channelHandler中获取ChannelHandlerContext，然后执行读写，即可\n![netty-6](/images/netty_part1/2018-8-1-17.png)\n\n\n#### ChannelHandler与ChannelHandlerContext的高级使用\n使用@Sharable注解我们的handler，可以使得handler在多个Pipeline中使用\n\nChannelHandler要保证线程安全，因此不该带有状态\n\nChannelHandlerContext是线程安全的\n\n\n```\n//保存ChannelHandlerContext的引用\npublic class WriteHandler extends ChannelHandlerAdapter {\n    private ChannelHandlerContext ctx;\n    @Override\n    public void handlerAdded(ChannelHandlerContext ctx) {\n        this.ctx = ctx;\n    }\n    public void send(String msg) {\n        ctx.writeAndFlush(msg);\n} }\n```\n\n### 异常处理\n\n#### 处理入站异常\n您要覆盖ChannelInboundHandler以下方法\n\n```\npublic void exceptionCaught(\n    ChannelHandlerContext ctx, Throwable cause) throws Exception\n\n\n\n//例如\npublic class InboundExceptionHandler extends ChannelInboundHandlerAdapter {\n            @Override\n            public void exceptionCaught(ChannelHandlerContext ctx,\n                Throwable cause) {\n                cause.printStackTrace();\n                ctx.close();\n} }\n\n```\n\n通常我们实现的ChannelInboundHandler总是处于链条的最后，因此我们总是要确保处理异常！，如果没有处理，netty会打印相关日志\n\n#### 处理出站异常\n通常出站操作会返回ChannelFuture、或者ChannelPromise\n\n以下为两种处理方法\n\n```\nChannelPromise setSuccess();\nChannelPromise setFailure(Throwable cause);\n```\n\n```\nChannelFuture future = channel.write(someMessage);\nfuture.addListener(new ChannelFutureListener() {\n    @Override\n    public void operationComplete(ChannelFuture f) {\n        if (!f.isSuccess()) {\n            f.cause().printStackTrace();\n            f.channel().close();\n} }\n});\n```\n\n```\npublic class OutboundExceptionHandler extends ChannelOutboundHandlerAdapter {\n    @Override\n    public void write(ChannelHandlerContext ctx, Object msg,\n        ChannelPromise promise) {\n        promise.addListener(new ChannelFutureListener() {\n            @Override\n            public void operationComplete(ChannelFuture f) {\n                if (!f.isSuccess()) {\n                    f.cause().printStackTrace();\n                    f.channel().close();\n} }\n}); }\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/chapter6-2018-8-1.md","raw":"---\ntitle: netty ChannelHandler and ChannelPipeline\ndate: 2018-08-01 08:36:02\ntags: netty\ncategories: [\"netty\",\"channel\"]\n---\n\n\n### channelHandler 家族\n\n#### Channel的生命周期\nChannel接口定义了一个简单但是有力的状态模型，与相关的ChannelInboundHandler API,下面四种状态：\n\n* ChannelUnregistered   当channel创建的时候，但是还没有注册到eventLoop\n* ChannelRegistered     Channel注册到EventLoop\n* ChannelActive         当Channel是活跃的时候（连接到远程），当前状态就是可以接受以及发送数据\n* ChannelInactive       当Channel不在连接到远程\n\n> 正常的Channel的生命周期，当这些响应的状态发生后，会产生响应的事件（event），而这些事件将会在ChannlePipeline中从头至尾经过各个ChannelHandler\n<!--more-->\n\n```\nChannelRegistered->ChannelActive->ChannelInactive->ChannelUnregistered\n```\n\n### ChannleHandler的生命周期\nChannelHandler的生命周期发生在add、remove、发生异常的时候\n\n* handlerAdded      当ChannelHandler添加到ChannelPipeline \n* handlerRemoved    当ChannelHandler从 ChannelPipeline 移除\n* exceptionCaught   在处理的过程中发生异常\n\n\nChannelInboundHandler—处理所有的入站数据以及所有类型的状态改变\n\nChannelOutboundHandler—处理所有出站的数据以及对所有的操作进行拦截\n\n#### ChannelInboundHandler接口\n![netty-6](/images/netty_part1/2018-8-1-5.png)\n\n当使用ChannelInboundHandler覆盖channelRead()方法时，记得要主动释放池化的 ByteBuf实例，使用ReferenceCountUtil.release()这个方法来释放\n\n```\n@Sharable\npublic class DiscardHandler extends ChannelInboundHandlerAdapter {\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) {\n\n        ReferenceCountUtil.release(msg);\n    }\n}\nDiscards received message\n```\n\n当然你也可以使用SimpleChannelInboundHandler，这个不需要你主动释放，它会自动释放\n\n```\n@Sharable\npublic class SimpleDiscardHandler\nExtends SimpleChannel- InboundHandler\n     extends SimpleChannelInboundHandler<Object> {\n    @Override\n    public void channelRead0(ChannelHandlerContext ctx,\nObject msg) {\n        // No need to do anything special\n    }\n}\n```\n\n#### ChannelOutboundHandler接口\n出站操作以及数据处理，通常入参包括Channel, ChannelPipeline, and ChannelHandlerContext\n![netty-6](/images/netty_part1/2018-8-1-6.png)\n\n![netty-6](/images/netty_part1/2018-8-1-7.png)\n\n\nCHANNELPROMISE VS. CHANNELFUTURE \n大多数的出站Channel方法使用ChannelPromise作为参数，当操作完成时候被通知，ChannelPromise是ChannelFuture的子类，他定义了一系列方法，像setSuccess() 或者setFailure()，这样可以使得ChannelFuture不可变\n\n#### ChannelHandler adapters\n\n![netty-6](/images/netty_part1/2018-8-1-8.png)\n\n由图可知，adapters实现了ChannelHandler了以及进站、出站的默认实现\n\n#### 资源管理\nnetty默认提供了资源管理类class Resource- LeakDetector，使用这个类可以诊断程序中是否有内存泄漏（主要是ByteBuf）\n\n如果有泄漏检测到，可以看到如下日志\n```\nLEAK: ByteBuf.release() was not called before it's garbage-collected. Enable\nadvanced leak reporting to find out where the leak occurred. To enable\nadvanced leak reporting, specify the JVM option\n'-Dio.netty.leakDetectionLevel=ADVANCED' or call\nResourceLeakDetector.setLevel().\n```\n\n泄漏等级\n![netty-6](/images/netty_part1/2018-8-1-9.png)\n\n### ChannelPipeline 接口\n每一个新的channel都有一个ChannelPipeline\n\n一个event会出现在入站ChannelInboundHandler或者出站ChannelOutboundHandler中，随后它将向下一个hnadler转发，通过ChannelHandlerContext实现\n\nchannelPipeline总是从头到尾的，如果时间类型不符合某个handler，那么会自动跳过该handler\n\n#### 修改ChannelPipeline\n这是相关的方法\n![netty-6](/images/netty_part1/2018-8-1-10.png)\n\n![netty-6](/images/netty_part1/2018-8-1-11.png)\n\n\n```\nChannelPipeline pipeline = ..;\nFirstHandler firstHandler = new FirstHandler();\npipeline.addLast(\"handler1\", firstHandler);\npipeline.addFirst(\"handler2\", new SecondHandler());\npipeline.addLast(\"handler3\", new ThirdHandler());\n...\npipeline.remove(\"handler3\");\npipeline.remove(firstHandler);\npipeline.replace(\"handler2\", \"handler4\", new FourthHandler());\n```\n\nChannelPipeline执行是不能阻塞的，如果因为以前的旧代码兼容，我们可以使用自定义的EventExecutorGroup来添加到ChannelPipeline链上\n\n\n#### 发出时间 firing events\n当ChannelPipeline 发出的有关ChannelInboundHandlers事件的相关API\n![netty-6](/images/netty_part1/2018-8-1-12.png)\n\n\n当ChannelPipeline 发出的有关ChannelOutboundHandlers事件的相关API\n![netty-6](/images/netty_part1/2018-8-1-13.png)\n\n\n#### ChannelPipeline本章总结\n* 一个ChannelPipeline 持有ChannelHandlers 与Channel协调\n* 一个ChannelPipeline 可以动态删减ChannelHandlers \n* ChannelPipeline拥有富足的API，用于入站、出站的所有事件响应\n\n\n### ChannelHandlerContext 接口\nChannelHandlerContext是管理ChannelHandler与它的ChannelPipeline\n\nChannelHandlerContext有很多的方法、主要用于操作Channel、ChannelPipeline，但是不同的是，他的方法将用于整个pipe链，同样的方法被ChannelHandlerContext调用，它将开始在当前的ChannelHandler，并将调动pipe链中下一个ChannelHandler处理该事件\n\n#### 使用ChannelHandlerContext\n\nChannelHandlerContext API\n![netty-6](/images/netty_part1/2018-8-1-14.png)\n![netty-6](/images/netty_part1/2018-8-1-15.png)\n\nChannelHandlerContext、ChannelPipeline、Channel的关系\n![netty-6](/images/netty_part1/2018-8-1-16.png)\n\n只在感兴趣的事件后执行，在channelHandler中获取ChannelHandlerContext，然后执行读写，即可\n![netty-6](/images/netty_part1/2018-8-1-17.png)\n\n\n#### ChannelHandler与ChannelHandlerContext的高级使用\n使用@Sharable注解我们的handler，可以使得handler在多个Pipeline中使用\n\nChannelHandler要保证线程安全，因此不该带有状态\n\nChannelHandlerContext是线程安全的\n\n\n```\n//保存ChannelHandlerContext的引用\npublic class WriteHandler extends ChannelHandlerAdapter {\n    private ChannelHandlerContext ctx;\n    @Override\n    public void handlerAdded(ChannelHandlerContext ctx) {\n        this.ctx = ctx;\n    }\n    public void send(String msg) {\n        ctx.writeAndFlush(msg);\n} }\n```\n\n### 异常处理\n\n#### 处理入站异常\n您要覆盖ChannelInboundHandler以下方法\n\n```\npublic void exceptionCaught(\n    ChannelHandlerContext ctx, Throwable cause) throws Exception\n\n\n\n//例如\npublic class InboundExceptionHandler extends ChannelInboundHandlerAdapter {\n            @Override\n            public void exceptionCaught(ChannelHandlerContext ctx,\n                Throwable cause) {\n                cause.printStackTrace();\n                ctx.close();\n} }\n\n```\n\n通常我们实现的ChannelInboundHandler总是处于链条的最后，因此我们总是要确保处理异常！，如果没有处理，netty会打印相关日志\n\n#### 处理出站异常\n通常出站操作会返回ChannelFuture、或者ChannelPromise\n\n以下为两种处理方法\n\n```\nChannelPromise setSuccess();\nChannelPromise setFailure(Throwable cause);\n```\n\n```\nChannelFuture future = channel.write(someMessage);\nfuture.addListener(new ChannelFutureListener() {\n    @Override\n    public void operationComplete(ChannelFuture f) {\n        if (!f.isSuccess()) {\n            f.cause().printStackTrace();\n            f.channel().close();\n} }\n});\n```\n\n```\npublic class OutboundExceptionHandler extends ChannelOutboundHandlerAdapter {\n    @Override\n    public void write(ChannelHandlerContext ctx, Object msg,\n        ChannelPromise promise) {\n        promise.addListener(new ChannelFutureListener() {\n            @Override\n            public void operationComplete(ChannelFuture f) {\n                if (!f.isSuccess()) {\n                    f.cause().printStackTrace();\n                    f.channel().close();\n} }\n}); }\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"chapter6-2018-8-1","published":1,"updated":"2019-09-23T06:59:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0w29rk2000buup2781y904n","content":"<h3 id=\"channelHandler-家族\"><a href=\"#channelHandler-家族\" class=\"headerlink\" title=\"channelHandler 家族\"></a>channelHandler 家族</h3><h4 id=\"Channel的生命周期\"><a href=\"#Channel的生命周期\" class=\"headerlink\" title=\"Channel的生命周期\"></a>Channel的生命周期</h4><p>Channel接口定义了一个简单但是有力的状态模型，与相关的ChannelInboundHandler API,下面四种状态：</p>\n<ul>\n<li>ChannelUnregistered   当channel创建的时候，但是还没有注册到eventLoop</li>\n<li>ChannelRegistered     Channel注册到EventLoop</li>\n<li>ChannelActive         当Channel是活跃的时候（连接到远程），当前状态就是可以接受以及发送数据</li>\n<li>ChannelInactive       当Channel不在连接到远程</li>\n</ul>\n<blockquote>\n<p>正常的Channel的生命周期，当这些响应的状态发生后，会产生响应的事件（event），而这些事件将会在ChannlePipeline中从头至尾经过各个ChannelHandler<br><a id=\"more\"></a></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ChannelRegistered-&gt;ChannelActive-&gt;ChannelInactive-&gt;ChannelUnregistered</span><br></pre></td></tr></table></figure>\n<h3 id=\"ChannleHandler的生命周期\"><a href=\"#ChannleHandler的生命周期\" class=\"headerlink\" title=\"ChannleHandler的生命周期\"></a>ChannleHandler的生命周期</h3><p>ChannelHandler的生命周期发生在add、remove、发生异常的时候</p>\n<ul>\n<li>handlerAdded      当ChannelHandler添加到ChannelPipeline </li>\n<li>handlerRemoved    当ChannelHandler从 ChannelPipeline 移除</li>\n<li>exceptionCaught   在处理的过程中发生异常</li>\n</ul>\n<p>ChannelInboundHandler—处理所有的入站数据以及所有类型的状态改变</p>\n<p>ChannelOutboundHandler—处理所有出站的数据以及对所有的操作进行拦截</p>\n<h4 id=\"ChannelInboundHandler接口\"><a href=\"#ChannelInboundHandler接口\" class=\"headerlink\" title=\"ChannelInboundHandler接口\"></a>ChannelInboundHandler接口</h4><p><img src=\"/images/netty_part1/2018-8-1-5.png\" alt=\"netty-6\"></p>\n<p>当使用ChannelInboundHandler覆盖channelRead()方法时，记得要主动释放池化的 ByteBuf实例，使用ReferenceCountUtil.release()这个方法来释放</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Sharable</span><br><span class=\"line\">public class DiscardHandler extends ChannelInboundHandlerAdapter &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void channelRead(ChannelHandlerContext ctx, Object msg) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ReferenceCountUtil.release(msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Discards received message</span><br></pre></td></tr></table></figure>\n<p>当然你也可以使用SimpleChannelInboundHandler，这个不需要你主动释放，它会自动释放</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Sharable</span><br><span class=\"line\">public class SimpleDiscardHandler</span><br><span class=\"line\">Extends SimpleChannel- InboundHandler</span><br><span class=\"line\">     extends SimpleChannelInboundHandler&lt;Object&gt; &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void channelRead0(ChannelHandlerContext ctx,</span><br><span class=\"line\">Object msg) &#123;</span><br><span class=\"line\">        // No need to do anything special</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"ChannelOutboundHandler接口\"><a href=\"#ChannelOutboundHandler接口\" class=\"headerlink\" title=\"ChannelOutboundHandler接口\"></a>ChannelOutboundHandler接口</h4><p>出站操作以及数据处理，通常入参包括Channel, ChannelPipeline, and ChannelHandlerContext<br><img src=\"/images/netty_part1/2018-8-1-6.png\" alt=\"netty-6\"></p>\n<p><img src=\"/images/netty_part1/2018-8-1-7.png\" alt=\"netty-6\"></p>\n<p>CHANNELPROMISE VS. CHANNELFUTURE<br>大多数的出站Channel方法使用ChannelPromise作为参数，当操作完成时候被通知，ChannelPromise是ChannelFuture的子类，他定义了一系列方法，像setSuccess() 或者setFailure()，这样可以使得ChannelFuture不可变</p>\n<h4 id=\"ChannelHandler-adapters\"><a href=\"#ChannelHandler-adapters\" class=\"headerlink\" title=\"ChannelHandler adapters\"></a>ChannelHandler adapters</h4><p><img src=\"/images/netty_part1/2018-8-1-8.png\" alt=\"netty-6\"></p>\n<p>由图可知，adapters实现了ChannelHandler了以及进站、出站的默认实现</p>\n<h4 id=\"资源管理\"><a href=\"#资源管理\" class=\"headerlink\" title=\"资源管理\"></a>资源管理</h4><p>netty默认提供了资源管理类class Resource- LeakDetector，使用这个类可以诊断程序中是否有内存泄漏（主要是ByteBuf）</p>\n<p>如果有泄漏检测到，可以看到如下日志<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LEAK: ByteBuf.release() was not called before it&apos;s garbage-collected. Enable</span><br><span class=\"line\">advanced leak reporting to find out where the leak occurred. To enable</span><br><span class=\"line\">advanced leak reporting, specify the JVM option</span><br><span class=\"line\">&apos;-Dio.netty.leakDetectionLevel=ADVANCED&apos; or call</span><br><span class=\"line\">ResourceLeakDetector.setLevel().</span><br></pre></td></tr></table></figure></p>\n<p>泄漏等级<br><img src=\"/images/netty_part1/2018-8-1-9.png\" alt=\"netty-6\"></p>\n<h3 id=\"ChannelPipeline-接口\"><a href=\"#ChannelPipeline-接口\" class=\"headerlink\" title=\"ChannelPipeline 接口\"></a>ChannelPipeline 接口</h3><p>每一个新的channel都有一个ChannelPipeline</p>\n<p>一个event会出现在入站ChannelInboundHandler或者出站ChannelOutboundHandler中，随后它将向下一个hnadler转发，通过ChannelHandlerContext实现</p>\n<p>channelPipeline总是从头到尾的，如果时间类型不符合某个handler，那么会自动跳过该handler</p>\n<h4 id=\"修改ChannelPipeline\"><a href=\"#修改ChannelPipeline\" class=\"headerlink\" title=\"修改ChannelPipeline\"></a>修改ChannelPipeline</h4><p>这是相关的方法<br><img src=\"/images/netty_part1/2018-8-1-10.png\" alt=\"netty-6\"></p>\n<p><img src=\"/images/netty_part1/2018-8-1-11.png\" alt=\"netty-6\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ChannelPipeline pipeline = ..;</span><br><span class=\"line\">FirstHandler firstHandler = new FirstHandler();</span><br><span class=\"line\">pipeline.addLast(&quot;handler1&quot;, firstHandler);</span><br><span class=\"line\">pipeline.addFirst(&quot;handler2&quot;, new SecondHandler());</span><br><span class=\"line\">pipeline.addLast(&quot;handler3&quot;, new ThirdHandler());</span><br><span class=\"line\">...</span><br><span class=\"line\">pipeline.remove(&quot;handler3&quot;);</span><br><span class=\"line\">pipeline.remove(firstHandler);</span><br><span class=\"line\">pipeline.replace(&quot;handler2&quot;, &quot;handler4&quot;, new FourthHandler());</span><br></pre></td></tr></table></figure>\n<p>ChannelPipeline执行是不能阻塞的，如果因为以前的旧代码兼容，我们可以使用自定义的EventExecutorGroup来添加到ChannelPipeline链上</p>\n<h4 id=\"发出时间-firing-events\"><a href=\"#发出时间-firing-events\" class=\"headerlink\" title=\"发出时间 firing events\"></a>发出时间 firing events</h4><p>当ChannelPipeline 发出的有关ChannelInboundHandlers事件的相关API<br><img src=\"/images/netty_part1/2018-8-1-12.png\" alt=\"netty-6\"></p>\n<p>当ChannelPipeline 发出的有关ChannelOutboundHandlers事件的相关API<br><img src=\"/images/netty_part1/2018-8-1-13.png\" alt=\"netty-6\"></p>\n<h4 id=\"ChannelPipeline本章总结\"><a href=\"#ChannelPipeline本章总结\" class=\"headerlink\" title=\"ChannelPipeline本章总结\"></a>ChannelPipeline本章总结</h4><ul>\n<li>一个ChannelPipeline 持有ChannelHandlers 与Channel协调</li>\n<li>一个ChannelPipeline 可以动态删减ChannelHandlers </li>\n<li>ChannelPipeline拥有富足的API，用于入站、出站的所有事件响应</li>\n</ul>\n<h3 id=\"ChannelHandlerContext-接口\"><a href=\"#ChannelHandlerContext-接口\" class=\"headerlink\" title=\"ChannelHandlerContext 接口\"></a>ChannelHandlerContext 接口</h3><p>ChannelHandlerContext是管理ChannelHandler与它的ChannelPipeline</p>\n<p>ChannelHandlerContext有很多的方法、主要用于操作Channel、ChannelPipeline，但是不同的是，他的方法将用于整个pipe链，同样的方法被ChannelHandlerContext调用，它将开始在当前的ChannelHandler，并将调动pipe链中下一个ChannelHandler处理该事件</p>\n<h4 id=\"使用ChannelHandlerContext\"><a href=\"#使用ChannelHandlerContext\" class=\"headerlink\" title=\"使用ChannelHandlerContext\"></a>使用ChannelHandlerContext</h4><p>ChannelHandlerContext API<br><img src=\"/images/netty_part1/2018-8-1-14.png\" alt=\"netty-6\"><br><img src=\"/images/netty_part1/2018-8-1-15.png\" alt=\"netty-6\"></p>\n<p>ChannelHandlerContext、ChannelPipeline、Channel的关系<br><img src=\"/images/netty_part1/2018-8-1-16.png\" alt=\"netty-6\"></p>\n<p>只在感兴趣的事件后执行，在channelHandler中获取ChannelHandlerContext，然后执行读写，即可<br><img src=\"/images/netty_part1/2018-8-1-17.png\" alt=\"netty-6\"></p>\n<h4 id=\"ChannelHandler与ChannelHandlerContext的高级使用\"><a href=\"#ChannelHandler与ChannelHandlerContext的高级使用\" class=\"headerlink\" title=\"ChannelHandler与ChannelHandlerContext的高级使用\"></a>ChannelHandler与ChannelHandlerContext的高级使用</h4><p>使用@Sharable注解我们的handler，可以使得handler在多个Pipeline中使用</p>\n<p>ChannelHandler要保证线程安全，因此不该带有状态</p>\n<p>ChannelHandlerContext是线程安全的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//保存ChannelHandlerContext的引用</span><br><span class=\"line\">public class WriteHandler extends ChannelHandlerAdapter &#123;</span><br><span class=\"line\">    private ChannelHandlerContext ctx;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void handlerAdded(ChannelHandlerContext ctx) &#123;</span><br><span class=\"line\">        this.ctx = ctx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void send(String msg) &#123;</span><br><span class=\"line\">        ctx.writeAndFlush(msg);</span><br><span class=\"line\">&#125; &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h3><h4 id=\"处理入站异常\"><a href=\"#处理入站异常\" class=\"headerlink\" title=\"处理入站异常\"></a>处理入站异常</h4><p>您要覆盖ChannelInboundHandler以下方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void exceptionCaught(</span><br><span class=\"line\">    ChannelHandlerContext ctx, Throwable cause) throws Exception</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//例如</span><br><span class=\"line\">public class InboundExceptionHandler extends ChannelInboundHandlerAdapter &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void exceptionCaught(ChannelHandlerContext ctx,</span><br><span class=\"line\">                Throwable cause) &#123;</span><br><span class=\"line\">                cause.printStackTrace();</span><br><span class=\"line\">                ctx.close();</span><br><span class=\"line\">&#125; &#125;</span><br></pre></td></tr></table></figure>\n<p>通常我们实现的ChannelInboundHandler总是处于链条的最后，因此我们总是要确保处理异常！，如果没有处理，netty会打印相关日志</p>\n<h4 id=\"处理出站异常\"><a href=\"#处理出站异常\" class=\"headerlink\" title=\"处理出站异常\"></a>处理出站异常</h4><p>通常出站操作会返回ChannelFuture、或者ChannelPromise</p>\n<p>以下为两种处理方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ChannelPromise setSuccess();</span><br><span class=\"line\">ChannelPromise setFailure(Throwable cause);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ChannelFuture future = channel.write(someMessage);</span><br><span class=\"line\">future.addListener(new ChannelFutureListener() &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void operationComplete(ChannelFuture f) &#123;</span><br><span class=\"line\">        if (!f.isSuccess()) &#123;</span><br><span class=\"line\">            f.cause().printStackTrace();</span><br><span class=\"line\">            f.channel().close();</span><br><span class=\"line\">&#125; &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class OutboundExceptionHandler extends ChannelOutboundHandlerAdapter &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void write(ChannelHandlerContext ctx, Object msg,</span><br><span class=\"line\">        ChannelPromise promise) &#123;</span><br><span class=\"line\">        promise.addListener(new ChannelFutureListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void operationComplete(ChannelFuture f) &#123;</span><br><span class=\"line\">                if (!f.isSuccess()) &#123;</span><br><span class=\"line\">                    f.cause().printStackTrace();</span><br><span class=\"line\">                    f.channel().close();</span><br><span class=\"line\">&#125; &#125;</span><br><span class=\"line\">&#125;); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"<h3 id=\"channelHandler-家族\"><a href=\"#channelHandler-家族\" class=\"headerlink\" title=\"channelHandler 家族\"></a>channelHandler 家族</h3><h4 id=\"Channel的生命周期\"><a href=\"#Channel的生命周期\" class=\"headerlink\" title=\"Channel的生命周期\"></a>Channel的生命周期</h4><p>Channel接口定义了一个简单但是有力的状态模型，与相关的ChannelInboundHandler API,下面四种状态：</p>\n<ul>\n<li>ChannelUnregistered   当channel创建的时候，但是还没有注册到eventLoop</li>\n<li>ChannelRegistered     Channel注册到EventLoop</li>\n<li>ChannelActive         当Channel是活跃的时候（连接到远程），当前状态就是可以接受以及发送数据</li>\n<li>ChannelInactive       当Channel不在连接到远程</li>\n</ul>\n<blockquote>\n<p>正常的Channel的生命周期，当这些响应的状态发生后，会产生响应的事件（event），而这些事件将会在ChannlePipeline中从头至尾经过各个ChannelHandler<br>","more":"</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ChannelRegistered-&gt;ChannelActive-&gt;ChannelInactive-&gt;ChannelUnregistered</span><br></pre></td></tr></table></figure>\n<h3 id=\"ChannleHandler的生命周期\"><a href=\"#ChannleHandler的生命周期\" class=\"headerlink\" title=\"ChannleHandler的生命周期\"></a>ChannleHandler的生命周期</h3><p>ChannelHandler的生命周期发生在add、remove、发生异常的时候</p>\n<ul>\n<li>handlerAdded      当ChannelHandler添加到ChannelPipeline </li>\n<li>handlerRemoved    当ChannelHandler从 ChannelPipeline 移除</li>\n<li>exceptionCaught   在处理的过程中发生异常</li>\n</ul>\n<p>ChannelInboundHandler—处理所有的入站数据以及所有类型的状态改变</p>\n<p>ChannelOutboundHandler—处理所有出站的数据以及对所有的操作进行拦截</p>\n<h4 id=\"ChannelInboundHandler接口\"><a href=\"#ChannelInboundHandler接口\" class=\"headerlink\" title=\"ChannelInboundHandler接口\"></a>ChannelInboundHandler接口</h4><p><img src=\"/images/netty_part1/2018-8-1-5.png\" alt=\"netty-6\"></p>\n<p>当使用ChannelInboundHandler覆盖channelRead()方法时，记得要主动释放池化的 ByteBuf实例，使用ReferenceCountUtil.release()这个方法来释放</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Sharable</span><br><span class=\"line\">public class DiscardHandler extends ChannelInboundHandlerAdapter &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void channelRead(ChannelHandlerContext ctx, Object msg) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ReferenceCountUtil.release(msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Discards received message</span><br></pre></td></tr></table></figure>\n<p>当然你也可以使用SimpleChannelInboundHandler，这个不需要你主动释放，它会自动释放</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Sharable</span><br><span class=\"line\">public class SimpleDiscardHandler</span><br><span class=\"line\">Extends SimpleChannel- InboundHandler</span><br><span class=\"line\">     extends SimpleChannelInboundHandler&lt;Object&gt; &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void channelRead0(ChannelHandlerContext ctx,</span><br><span class=\"line\">Object msg) &#123;</span><br><span class=\"line\">        // No need to do anything special</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"ChannelOutboundHandler接口\"><a href=\"#ChannelOutboundHandler接口\" class=\"headerlink\" title=\"ChannelOutboundHandler接口\"></a>ChannelOutboundHandler接口</h4><p>出站操作以及数据处理，通常入参包括Channel, ChannelPipeline, and ChannelHandlerContext<br><img src=\"/images/netty_part1/2018-8-1-6.png\" alt=\"netty-6\"></p>\n<p><img src=\"/images/netty_part1/2018-8-1-7.png\" alt=\"netty-6\"></p>\n<p>CHANNELPROMISE VS. CHANNELFUTURE<br>大多数的出站Channel方法使用ChannelPromise作为参数，当操作完成时候被通知，ChannelPromise是ChannelFuture的子类，他定义了一系列方法，像setSuccess() 或者setFailure()，这样可以使得ChannelFuture不可变</p>\n<h4 id=\"ChannelHandler-adapters\"><a href=\"#ChannelHandler-adapters\" class=\"headerlink\" title=\"ChannelHandler adapters\"></a>ChannelHandler adapters</h4><p><img src=\"/images/netty_part1/2018-8-1-8.png\" alt=\"netty-6\"></p>\n<p>由图可知，adapters实现了ChannelHandler了以及进站、出站的默认实现</p>\n<h4 id=\"资源管理\"><a href=\"#资源管理\" class=\"headerlink\" title=\"资源管理\"></a>资源管理</h4><p>netty默认提供了资源管理类class Resource- LeakDetector，使用这个类可以诊断程序中是否有内存泄漏（主要是ByteBuf）</p>\n<p>如果有泄漏检测到，可以看到如下日志<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LEAK: ByteBuf.release() was not called before it&apos;s garbage-collected. Enable</span><br><span class=\"line\">advanced leak reporting to find out where the leak occurred. To enable</span><br><span class=\"line\">advanced leak reporting, specify the JVM option</span><br><span class=\"line\">&apos;-Dio.netty.leakDetectionLevel=ADVANCED&apos; or call</span><br><span class=\"line\">ResourceLeakDetector.setLevel().</span><br></pre></td></tr></table></figure></p>\n<p>泄漏等级<br><img src=\"/images/netty_part1/2018-8-1-9.png\" alt=\"netty-6\"></p>\n<h3 id=\"ChannelPipeline-接口\"><a href=\"#ChannelPipeline-接口\" class=\"headerlink\" title=\"ChannelPipeline 接口\"></a>ChannelPipeline 接口</h3><p>每一个新的channel都有一个ChannelPipeline</p>\n<p>一个event会出现在入站ChannelInboundHandler或者出站ChannelOutboundHandler中，随后它将向下一个hnadler转发，通过ChannelHandlerContext实现</p>\n<p>channelPipeline总是从头到尾的，如果时间类型不符合某个handler，那么会自动跳过该handler</p>\n<h4 id=\"修改ChannelPipeline\"><a href=\"#修改ChannelPipeline\" class=\"headerlink\" title=\"修改ChannelPipeline\"></a>修改ChannelPipeline</h4><p>这是相关的方法<br><img src=\"/images/netty_part1/2018-8-1-10.png\" alt=\"netty-6\"></p>\n<p><img src=\"/images/netty_part1/2018-8-1-11.png\" alt=\"netty-6\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ChannelPipeline pipeline = ..;</span><br><span class=\"line\">FirstHandler firstHandler = new FirstHandler();</span><br><span class=\"line\">pipeline.addLast(&quot;handler1&quot;, firstHandler);</span><br><span class=\"line\">pipeline.addFirst(&quot;handler2&quot;, new SecondHandler());</span><br><span class=\"line\">pipeline.addLast(&quot;handler3&quot;, new ThirdHandler());</span><br><span class=\"line\">...</span><br><span class=\"line\">pipeline.remove(&quot;handler3&quot;);</span><br><span class=\"line\">pipeline.remove(firstHandler);</span><br><span class=\"line\">pipeline.replace(&quot;handler2&quot;, &quot;handler4&quot;, new FourthHandler());</span><br></pre></td></tr></table></figure>\n<p>ChannelPipeline执行是不能阻塞的，如果因为以前的旧代码兼容，我们可以使用自定义的EventExecutorGroup来添加到ChannelPipeline链上</p>\n<h4 id=\"发出时间-firing-events\"><a href=\"#发出时间-firing-events\" class=\"headerlink\" title=\"发出时间 firing events\"></a>发出时间 firing events</h4><p>当ChannelPipeline 发出的有关ChannelInboundHandlers事件的相关API<br><img src=\"/images/netty_part1/2018-8-1-12.png\" alt=\"netty-6\"></p>\n<p>当ChannelPipeline 发出的有关ChannelOutboundHandlers事件的相关API<br><img src=\"/images/netty_part1/2018-8-1-13.png\" alt=\"netty-6\"></p>\n<h4 id=\"ChannelPipeline本章总结\"><a href=\"#ChannelPipeline本章总结\" class=\"headerlink\" title=\"ChannelPipeline本章总结\"></a>ChannelPipeline本章总结</h4><ul>\n<li>一个ChannelPipeline 持有ChannelHandlers 与Channel协调</li>\n<li>一个ChannelPipeline 可以动态删减ChannelHandlers </li>\n<li>ChannelPipeline拥有富足的API，用于入站、出站的所有事件响应</li>\n</ul>\n<h3 id=\"ChannelHandlerContext-接口\"><a href=\"#ChannelHandlerContext-接口\" class=\"headerlink\" title=\"ChannelHandlerContext 接口\"></a>ChannelHandlerContext 接口</h3><p>ChannelHandlerContext是管理ChannelHandler与它的ChannelPipeline</p>\n<p>ChannelHandlerContext有很多的方法、主要用于操作Channel、ChannelPipeline，但是不同的是，他的方法将用于整个pipe链，同样的方法被ChannelHandlerContext调用，它将开始在当前的ChannelHandler，并将调动pipe链中下一个ChannelHandler处理该事件</p>\n<h4 id=\"使用ChannelHandlerContext\"><a href=\"#使用ChannelHandlerContext\" class=\"headerlink\" title=\"使用ChannelHandlerContext\"></a>使用ChannelHandlerContext</h4><p>ChannelHandlerContext API<br><img src=\"/images/netty_part1/2018-8-1-14.png\" alt=\"netty-6\"><br><img src=\"/images/netty_part1/2018-8-1-15.png\" alt=\"netty-6\"></p>\n<p>ChannelHandlerContext、ChannelPipeline、Channel的关系<br><img src=\"/images/netty_part1/2018-8-1-16.png\" alt=\"netty-6\"></p>\n<p>只在感兴趣的事件后执行，在channelHandler中获取ChannelHandlerContext，然后执行读写，即可<br><img src=\"/images/netty_part1/2018-8-1-17.png\" alt=\"netty-6\"></p>\n<h4 id=\"ChannelHandler与ChannelHandlerContext的高级使用\"><a href=\"#ChannelHandler与ChannelHandlerContext的高级使用\" class=\"headerlink\" title=\"ChannelHandler与ChannelHandlerContext的高级使用\"></a>ChannelHandler与ChannelHandlerContext的高级使用</h4><p>使用@Sharable注解我们的handler，可以使得handler在多个Pipeline中使用</p>\n<p>ChannelHandler要保证线程安全，因此不该带有状态</p>\n<p>ChannelHandlerContext是线程安全的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//保存ChannelHandlerContext的引用</span><br><span class=\"line\">public class WriteHandler extends ChannelHandlerAdapter &#123;</span><br><span class=\"line\">    private ChannelHandlerContext ctx;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void handlerAdded(ChannelHandlerContext ctx) &#123;</span><br><span class=\"line\">        this.ctx = ctx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void send(String msg) &#123;</span><br><span class=\"line\">        ctx.writeAndFlush(msg);</span><br><span class=\"line\">&#125; &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h3><h4 id=\"处理入站异常\"><a href=\"#处理入站异常\" class=\"headerlink\" title=\"处理入站异常\"></a>处理入站异常</h4><p>您要覆盖ChannelInboundHandler以下方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void exceptionCaught(</span><br><span class=\"line\">    ChannelHandlerContext ctx, Throwable cause) throws Exception</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//例如</span><br><span class=\"line\">public class InboundExceptionHandler extends ChannelInboundHandlerAdapter &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void exceptionCaught(ChannelHandlerContext ctx,</span><br><span class=\"line\">                Throwable cause) &#123;</span><br><span class=\"line\">                cause.printStackTrace();</span><br><span class=\"line\">                ctx.close();</span><br><span class=\"line\">&#125; &#125;</span><br></pre></td></tr></table></figure>\n<p>通常我们实现的ChannelInboundHandler总是处于链条的最后，因此我们总是要确保处理异常！，如果没有处理，netty会打印相关日志</p>\n<h4 id=\"处理出站异常\"><a href=\"#处理出站异常\" class=\"headerlink\" title=\"处理出站异常\"></a>处理出站异常</h4><p>通常出站操作会返回ChannelFuture、或者ChannelPromise</p>\n<p>以下为两种处理方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ChannelPromise setSuccess();</span><br><span class=\"line\">ChannelPromise setFailure(Throwable cause);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ChannelFuture future = channel.write(someMessage);</span><br><span class=\"line\">future.addListener(new ChannelFutureListener() &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void operationComplete(ChannelFuture f) &#123;</span><br><span class=\"line\">        if (!f.isSuccess()) &#123;</span><br><span class=\"line\">            f.cause().printStackTrace();</span><br><span class=\"line\">            f.channel().close();</span><br><span class=\"line\">&#125; &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class OutboundExceptionHandler extends ChannelOutboundHandlerAdapter &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void write(ChannelHandlerContext ctx, Object msg,</span><br><span class=\"line\">        ChannelPromise promise) &#123;</span><br><span class=\"line\">        promise.addListener(new ChannelFutureListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void operationComplete(ChannelFuture f) &#123;</span><br><span class=\"line\">                if (!f.isSuccess()) &#123;</span><br><span class=\"line\">                    f.cause().printStackTrace();</span><br><span class=\"line\">                    f.channel().close();</span><br><span class=\"line\">&#125; &#125;</span><br><span class=\"line\">&#125;); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"netty EventLoop与Thread","date":"2018-08-02T00:36:02.000Z","_content":"\n### 线程模型\n传统的线程池模型：jDK1.5之后的Executor的API，表现入下：\n\n![netty-7](/images/netty_part1/2018-8-2-1.png)\n\n* 一个线程从池子中的free列表选中，并且指派一个提交的任务（实现了Runnable接口的任务）\n* 当任务完成的时候，这个线程将返回到list中，并且变得可用\n<!--more-->\n\n\n#### 总结\n传统的这种池化以及可重用提升了线程的创建于销毁，但是并没有排除线程上下文的切换\n\n\n\n### EventLoop 接口\n当连接发生的整个生命周期，运行一个任务处理事件，是一个基础的网络框架的功能。相应的架构通常是作为一个事件循环，netty是使用EventLoop这个接口实现的，如下图：\n![netty-7](/images/netty_part1/2018-8-2-2.png)\n\n一个EventLoop确定绑定在一个Thread上并且不会改变，一个EventLoop会被分配多个Channels\n![netty-7](/images/netty_part1/2018-8-2-3.png)\n\n通常Events以及任务是执行在一个FIFO序列中，这个排除数据出错的可能性，并且保证任务处理的正确顺序\n\n\n#### I/O 以及事件处理在netty4中\n所有的I/O操作以及事件处理都通过线程被指派在EventLoop上\n\n\n#### I/O 以及事件处理在netty3中\n所有的入站都由EventLoop执行，但是出站的操作是由调用它的线程处理，这个导致了一个问题，可能会导致异步操作，例如同时发生了两个出站的写操作，在不同的线程\n\n另一个消极的方面是当一个入站事件产生了出站事件，但是出站的时候发生了异常，在netty3中，你需要调用线程来处理，增加了线程切换\n\n在netty4中，解决了这个问题，提供了简单的执行架构，并且排除了在ChannelHandler上进行同步操作\n\n\n### 任务调度\n偶尔你需要延迟（推迟）执行一个任务，或者周期性的执行，你可能需要注册一个任务例如5分钟连接一次。一个通用的用例是心跳消息对远端执行。如果没有响应，你知道将要关闭这个channel\n\n#### JDK的任务调度\n在JDk1.5之前，通常使用java.util.Timer，随后JDk1.5之后使用java.util.concurrent，定义了一个ScheduledExecutorService，\n![netty-7](/images/netty_part1/2018-8-2-4.png)\n\n```\n ScheduledExecutorService executor =\n    Executors.newScheduledThreadPool(10);\nScheduledFuture<?> future = executor.schedule(\n    new Runnable() {\n    @Override\n    public void run() {\n        System.out.println(\"60 seconds later\");\n\n      }\n}, 60, TimeUnit.SECONDS);\n......\nexecutor.shutdown();\n```\n\n#### netty的任务调度使用的是EventLoop\n```\nChannel ch = ...\nScheduledFuture<?> future = ch.eventLoop().schedule(\n    new Runnable() {\n    @Override\n    public void run() {\n        System.out.println(\"60 seconds later\");\n    }\n}, 60, TimeUnit.SECONDS);\n```\n\n```\nChannel ch = ...\nScheduledFuture<?> future = ch.eventLoop().scheduleAtFixedRate(\n   new Runnable() {\n@Override\npublic void run() {\n    System.out.println(\"Run every 60 seconds\");\n}\n\n }, 60, 60, TimeUnit.Seconds);\n```\n\n\n### 实现细节\n这一节主要讲解重要元素线程模型以及调度实现的细节\n\n#### 线程管理\n\n![netty-7](/images/netty_part1/2018-8-2-5.png)\n\n\n#### 事件循环与线程的分配\n异步实现仅使用一点EventLoops，在单签的线程模型中，可能持有多个Channels，这个允许多个Channels可以用一个很小数量的线程，而不是每个线程都有一个channel\n\n如下：\n\n![netty-7](/images/netty_part1/2018-8-2-6.png)\n\n\n一旦一个Channel已经被分配到了一个EventLoop，它将会在整个生命周期中使用EventLooop响应的线程\n\n一个EventLoop需要使用ThreadLocal来保证线程安全，因为一个EvnetLoop通常持有多各Channel\n\nOIO\n![netty-7](/images/netty_part1/2018-8-2-7.png)\n\n\n","source":"_posts/chapter7-2018-8-2.md","raw":"---\ntitle: netty EventLoop与Thread\ndate: 2018-08-02 08:36:02\ntags: netty\ncategories: [\"netty\",\"EventLoop\"]\n---\n\n### 线程模型\n传统的线程池模型：jDK1.5之后的Executor的API，表现入下：\n\n![netty-7](/images/netty_part1/2018-8-2-1.png)\n\n* 一个线程从池子中的free列表选中，并且指派一个提交的任务（实现了Runnable接口的任务）\n* 当任务完成的时候，这个线程将返回到list中，并且变得可用\n<!--more-->\n\n\n#### 总结\n传统的这种池化以及可重用提升了线程的创建于销毁，但是并没有排除线程上下文的切换\n\n\n\n### EventLoop 接口\n当连接发生的整个生命周期，运行一个任务处理事件，是一个基础的网络框架的功能。相应的架构通常是作为一个事件循环，netty是使用EventLoop这个接口实现的，如下图：\n![netty-7](/images/netty_part1/2018-8-2-2.png)\n\n一个EventLoop确定绑定在一个Thread上并且不会改变，一个EventLoop会被分配多个Channels\n![netty-7](/images/netty_part1/2018-8-2-3.png)\n\n通常Events以及任务是执行在一个FIFO序列中，这个排除数据出错的可能性，并且保证任务处理的正确顺序\n\n\n#### I/O 以及事件处理在netty4中\n所有的I/O操作以及事件处理都通过线程被指派在EventLoop上\n\n\n#### I/O 以及事件处理在netty3中\n所有的入站都由EventLoop执行，但是出站的操作是由调用它的线程处理，这个导致了一个问题，可能会导致异步操作，例如同时发生了两个出站的写操作，在不同的线程\n\n另一个消极的方面是当一个入站事件产生了出站事件，但是出站的时候发生了异常，在netty3中，你需要调用线程来处理，增加了线程切换\n\n在netty4中，解决了这个问题，提供了简单的执行架构，并且排除了在ChannelHandler上进行同步操作\n\n\n### 任务调度\n偶尔你需要延迟（推迟）执行一个任务，或者周期性的执行，你可能需要注册一个任务例如5分钟连接一次。一个通用的用例是心跳消息对远端执行。如果没有响应，你知道将要关闭这个channel\n\n#### JDK的任务调度\n在JDk1.5之前，通常使用java.util.Timer，随后JDk1.5之后使用java.util.concurrent，定义了一个ScheduledExecutorService，\n![netty-7](/images/netty_part1/2018-8-2-4.png)\n\n```\n ScheduledExecutorService executor =\n    Executors.newScheduledThreadPool(10);\nScheduledFuture<?> future = executor.schedule(\n    new Runnable() {\n    @Override\n    public void run() {\n        System.out.println(\"60 seconds later\");\n\n      }\n}, 60, TimeUnit.SECONDS);\n......\nexecutor.shutdown();\n```\n\n#### netty的任务调度使用的是EventLoop\n```\nChannel ch = ...\nScheduledFuture<?> future = ch.eventLoop().schedule(\n    new Runnable() {\n    @Override\n    public void run() {\n        System.out.println(\"60 seconds later\");\n    }\n}, 60, TimeUnit.SECONDS);\n```\n\n```\nChannel ch = ...\nScheduledFuture<?> future = ch.eventLoop().scheduleAtFixedRate(\n   new Runnable() {\n@Override\npublic void run() {\n    System.out.println(\"Run every 60 seconds\");\n}\n\n }, 60, 60, TimeUnit.Seconds);\n```\n\n\n### 实现细节\n这一节主要讲解重要元素线程模型以及调度实现的细节\n\n#### 线程管理\n\n![netty-7](/images/netty_part1/2018-8-2-5.png)\n\n\n#### 事件循环与线程的分配\n异步实现仅使用一点EventLoops，在单签的线程模型中，可能持有多个Channels，这个允许多个Channels可以用一个很小数量的线程，而不是每个线程都有一个channel\n\n如下：\n\n![netty-7](/images/netty_part1/2018-8-2-6.png)\n\n\n一旦一个Channel已经被分配到了一个EventLoop，它将会在整个生命周期中使用EventLooop响应的线程\n\n一个EventLoop需要使用ThreadLocal来保证线程安全，因为一个EvnetLoop通常持有多各Channel\n\nOIO\n![netty-7](/images/netty_part1/2018-8-2-7.png)\n\n\n","slug":"chapter7-2018-8-2","published":1,"updated":"2019-09-23T06:59:36.421Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0w29rk4000duup21p2gdxbs","content":"<h3 id=\"线程模型\"><a href=\"#线程模型\" class=\"headerlink\" title=\"线程模型\"></a>线程模型</h3><p>传统的线程池模型：jDK1.5之后的Executor的API，表现入下：</p>\n<p><img src=\"/images/netty_part1/2018-8-2-1.png\" alt=\"netty-7\"></p>\n<ul>\n<li>一个线程从池子中的free列表选中，并且指派一个提交的任务（实现了Runnable接口的任务）</li>\n<li>当任务完成的时候，这个线程将返回到list中，并且变得可用<a id=\"more\"></a>\n</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>传统的这种池化以及可重用提升了线程的创建于销毁，但是并没有排除线程上下文的切换</p>\n<h3 id=\"EventLoop-接口\"><a href=\"#EventLoop-接口\" class=\"headerlink\" title=\"EventLoop 接口\"></a>EventLoop 接口</h3><p>当连接发生的整个生命周期，运行一个任务处理事件，是一个基础的网络框架的功能。相应的架构通常是作为一个事件循环，netty是使用EventLoop这个接口实现的，如下图：<br><img src=\"/images/netty_part1/2018-8-2-2.png\" alt=\"netty-7\"></p>\n<p>一个EventLoop确定绑定在一个Thread上并且不会改变，一个EventLoop会被分配多个Channels<br><img src=\"/images/netty_part1/2018-8-2-3.png\" alt=\"netty-7\"></p>\n<p>通常Events以及任务是执行在一个FIFO序列中，这个排除数据出错的可能性，并且保证任务处理的正确顺序</p>\n<h4 id=\"I-O-以及事件处理在netty4中\"><a href=\"#I-O-以及事件处理在netty4中\" class=\"headerlink\" title=\"I/O 以及事件处理在netty4中\"></a>I/O 以及事件处理在netty4中</h4><p>所有的I/O操作以及事件处理都通过线程被指派在EventLoop上</p>\n<h4 id=\"I-O-以及事件处理在netty3中\"><a href=\"#I-O-以及事件处理在netty3中\" class=\"headerlink\" title=\"I/O 以及事件处理在netty3中\"></a>I/O 以及事件处理在netty3中</h4><p>所有的入站都由EventLoop执行，但是出站的操作是由调用它的线程处理，这个导致了一个问题，可能会导致异步操作，例如同时发生了两个出站的写操作，在不同的线程</p>\n<p>另一个消极的方面是当一个入站事件产生了出站事件，但是出站的时候发生了异常，在netty3中，你需要调用线程来处理，增加了线程切换</p>\n<p>在netty4中，解决了这个问题，提供了简单的执行架构，并且排除了在ChannelHandler上进行同步操作</p>\n<h3 id=\"任务调度\"><a href=\"#任务调度\" class=\"headerlink\" title=\"任务调度\"></a>任务调度</h3><p>偶尔你需要延迟（推迟）执行一个任务，或者周期性的执行，你可能需要注册一个任务例如5分钟连接一次。一个通用的用例是心跳消息对远端执行。如果没有响应，你知道将要关闭这个channel</p>\n<h4 id=\"JDK的任务调度\"><a href=\"#JDK的任务调度\" class=\"headerlink\" title=\"JDK的任务调度\"></a>JDK的任务调度</h4><p>在JDk1.5之前，通常使用java.util.Timer，随后JDk1.5之后使用java.util.concurrent，定义了一个ScheduledExecutorService，<br><img src=\"/images/netty_part1/2018-8-2-4.png\" alt=\"netty-7\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ScheduledExecutorService executor =</span><br><span class=\"line\">    Executors.newScheduledThreadPool(10);</span><br><span class=\"line\">ScheduledFuture&lt;?&gt; future = executor.schedule(</span><br><span class=\"line\">    new Runnable() &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        System.out.println(&quot;60 seconds later&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;, 60, TimeUnit.SECONDS);</span><br><span class=\"line\">......</span><br><span class=\"line\">executor.shutdown();</span><br></pre></td></tr></table></figure>\n<h4 id=\"netty的任务调度使用的是EventLoop\"><a href=\"#netty的任务调度使用的是EventLoop\" class=\"headerlink\" title=\"netty的任务调度使用的是EventLoop\"></a>netty的任务调度使用的是EventLoop</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Channel ch = ...</span><br><span class=\"line\">ScheduledFuture&lt;?&gt; future = ch.eventLoop().schedule(</span><br><span class=\"line\">    new Runnable() &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        System.out.println(&quot;60 seconds later&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, 60, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Channel ch = ...</span><br><span class=\"line\">ScheduledFuture&lt;?&gt; future = ch.eventLoop().scheduleAtFixedRate(</span><br><span class=\"line\">   new Runnable() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void run() &#123;</span><br><span class=\"line\">    System.out.println(&quot;Run every 60 seconds&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;, 60, 60, TimeUnit.Seconds);</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现细节\"><a href=\"#实现细节\" class=\"headerlink\" title=\"实现细节\"></a>实现细节</h3><p>这一节主要讲解重要元素线程模型以及调度实现的细节</p>\n<h4 id=\"线程管理\"><a href=\"#线程管理\" class=\"headerlink\" title=\"线程管理\"></a>线程管理</h4><p><img src=\"/images/netty_part1/2018-8-2-5.png\" alt=\"netty-7\"></p>\n<h4 id=\"事件循环与线程的分配\"><a href=\"#事件循环与线程的分配\" class=\"headerlink\" title=\"事件循环与线程的分配\"></a>事件循环与线程的分配</h4><p>异步实现仅使用一点EventLoops，在单签的线程模型中，可能持有多个Channels，这个允许多个Channels可以用一个很小数量的线程，而不是每个线程都有一个channel</p>\n<p>如下：</p>\n<p><img src=\"/images/netty_part1/2018-8-2-6.png\" alt=\"netty-7\"></p>\n<p>一旦一个Channel已经被分配到了一个EventLoop，它将会在整个生命周期中使用EventLooop响应的线程</p>\n<p>一个EventLoop需要使用ThreadLocal来保证线程安全，因为一个EvnetLoop通常持有多各Channel</p>\n<p>OIO<br><img src=\"/images/netty_part1/2018-8-2-7.png\" alt=\"netty-7\"></p>\n","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"<h3 id=\"线程模型\"><a href=\"#线程模型\" class=\"headerlink\" title=\"线程模型\"></a>线程模型</h3><p>传统的线程池模型：jDK1.5之后的Executor的API，表现入下：</p>\n<p><img src=\"/images/netty_part1/2018-8-2-1.png\" alt=\"netty-7\"></p>\n<ul>\n<li>一个线程从池子中的free列表选中，并且指派一个提交的任务（实现了Runnable接口的任务）</li>\n<li>当任务完成的时候，这个线程将返回到list中，并且变得可用","more":"</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>传统的这种池化以及可重用提升了线程的创建于销毁，但是并没有排除线程上下文的切换</p>\n<h3 id=\"EventLoop-接口\"><a href=\"#EventLoop-接口\" class=\"headerlink\" title=\"EventLoop 接口\"></a>EventLoop 接口</h3><p>当连接发生的整个生命周期，运行一个任务处理事件，是一个基础的网络框架的功能。相应的架构通常是作为一个事件循环，netty是使用EventLoop这个接口实现的，如下图：<br><img src=\"/images/netty_part1/2018-8-2-2.png\" alt=\"netty-7\"></p>\n<p>一个EventLoop确定绑定在一个Thread上并且不会改变，一个EventLoop会被分配多个Channels<br><img src=\"/images/netty_part1/2018-8-2-3.png\" alt=\"netty-7\"></p>\n<p>通常Events以及任务是执行在一个FIFO序列中，这个排除数据出错的可能性，并且保证任务处理的正确顺序</p>\n<h4 id=\"I-O-以及事件处理在netty4中\"><a href=\"#I-O-以及事件处理在netty4中\" class=\"headerlink\" title=\"I/O 以及事件处理在netty4中\"></a>I/O 以及事件处理在netty4中</h4><p>所有的I/O操作以及事件处理都通过线程被指派在EventLoop上</p>\n<h4 id=\"I-O-以及事件处理在netty3中\"><a href=\"#I-O-以及事件处理在netty3中\" class=\"headerlink\" title=\"I/O 以及事件处理在netty3中\"></a>I/O 以及事件处理在netty3中</h4><p>所有的入站都由EventLoop执行，但是出站的操作是由调用它的线程处理，这个导致了一个问题，可能会导致异步操作，例如同时发生了两个出站的写操作，在不同的线程</p>\n<p>另一个消极的方面是当一个入站事件产生了出站事件，但是出站的时候发生了异常，在netty3中，你需要调用线程来处理，增加了线程切换</p>\n<p>在netty4中，解决了这个问题，提供了简单的执行架构，并且排除了在ChannelHandler上进行同步操作</p>\n<h3 id=\"任务调度\"><a href=\"#任务调度\" class=\"headerlink\" title=\"任务调度\"></a>任务调度</h3><p>偶尔你需要延迟（推迟）执行一个任务，或者周期性的执行，你可能需要注册一个任务例如5分钟连接一次。一个通用的用例是心跳消息对远端执行。如果没有响应，你知道将要关闭这个channel</p>\n<h4 id=\"JDK的任务调度\"><a href=\"#JDK的任务调度\" class=\"headerlink\" title=\"JDK的任务调度\"></a>JDK的任务调度</h4><p>在JDk1.5之前，通常使用java.util.Timer，随后JDk1.5之后使用java.util.concurrent，定义了一个ScheduledExecutorService，<br><img src=\"/images/netty_part1/2018-8-2-4.png\" alt=\"netty-7\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ScheduledExecutorService executor =</span><br><span class=\"line\">    Executors.newScheduledThreadPool(10);</span><br><span class=\"line\">ScheduledFuture&lt;?&gt; future = executor.schedule(</span><br><span class=\"line\">    new Runnable() &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        System.out.println(&quot;60 seconds later&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;, 60, TimeUnit.SECONDS);</span><br><span class=\"line\">......</span><br><span class=\"line\">executor.shutdown();</span><br></pre></td></tr></table></figure>\n<h4 id=\"netty的任务调度使用的是EventLoop\"><a href=\"#netty的任务调度使用的是EventLoop\" class=\"headerlink\" title=\"netty的任务调度使用的是EventLoop\"></a>netty的任务调度使用的是EventLoop</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Channel ch = ...</span><br><span class=\"line\">ScheduledFuture&lt;?&gt; future = ch.eventLoop().schedule(</span><br><span class=\"line\">    new Runnable() &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        System.out.println(&quot;60 seconds later&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, 60, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Channel ch = ...</span><br><span class=\"line\">ScheduledFuture&lt;?&gt; future = ch.eventLoop().scheduleAtFixedRate(</span><br><span class=\"line\">   new Runnable() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void run() &#123;</span><br><span class=\"line\">    System.out.println(&quot;Run every 60 seconds&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;, 60, 60, TimeUnit.Seconds);</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现细节\"><a href=\"#实现细节\" class=\"headerlink\" title=\"实现细节\"></a>实现细节</h3><p>这一节主要讲解重要元素线程模型以及调度实现的细节</p>\n<h4 id=\"线程管理\"><a href=\"#线程管理\" class=\"headerlink\" title=\"线程管理\"></a>线程管理</h4><p><img src=\"/images/netty_part1/2018-8-2-5.png\" alt=\"netty-7\"></p>\n<h4 id=\"事件循环与线程的分配\"><a href=\"#事件循环与线程的分配\" class=\"headerlink\" title=\"事件循环与线程的分配\"></a>事件循环与线程的分配</h4><p>异步实现仅使用一点EventLoops，在单签的线程模型中，可能持有多个Channels，这个允许多个Channels可以用一个很小数量的线程，而不是每个线程都有一个channel</p>\n<p>如下：</p>\n<p><img src=\"/images/netty_part1/2018-8-2-6.png\" alt=\"netty-7\"></p>\n<p>一旦一个Channel已经被分配到了一个EventLoop，它将会在整个生命周期中使用EventLooop响应的线程</p>\n<p>一个EventLoop需要使用ThreadLocal来保证线程安全，因为一个EvnetLoop通常持有多各Channel</p>\n<p>OIO<br><img src=\"/images/netty_part1/2018-8-2-7.png\" alt=\"netty-7\"></p>"},{"title":"netty Bootstrap","date":"2018-08-03T00:36:02.000Z","_content":"\n本章主要覆盖以下方面\n* Bootstraping 客户端与服务端\n* 在一个channle中的Bootstraping 客户端\n* 添加channelHandlers\n* 使用ChannelOptions以及属性\n<!--more-->\n\n![netty-8](/images/netty_part1/2018-8-3-1.png)\n\n\n### Bootstrap 类\n一个server端的Bootstrap，如上图所示，主要用于接收连接，并且创建一个子Channels与客户端服务，然而客户端只需要一个，因此不需要父级的channel。对于udp的服务端也一样如此\n\n```\npublic abstract class AbstractBootstrap\n            <B extends AbstractBootstrap<B,C>,C extends Channel>\n\n\n public class Bootstrap\n            extends AbstractBootstrap<Bootstrap,Channel>\n\n public class ServerBootstrap\n            extends AbstractBootstrap<ServerBootstrap,ServerChannel>\n\n```\n\n### Bootstraping 客户端以及无连接协议\n以下是Bootstraping的API\n\n![netty-8](/images/netty_part1/2018-8-3-2.png)\n![netty-8](/images/netty_part1/2018-8-3-3.png)\n\n\n#### 引导客户端\nBootstrap 类主要负责为客户端创建channels以及为应用指定连接协议\n\n![netty-8](/images/netty_part1/2018-8-3-4.png)\n\n\n例如以下为使用NIO TCP连接\n\n```\nEventLoopGroup group = new NioEventLoopGroup();\nBootstrap bootstrap = new Bootstrap();\n//Sets the EventLoopGroup that provides EventLoops for processing Channel events\nbootstrap.group(group)\n         .channel(NioSocketChannel.class)\n    .handler(new SimpleChannelInboundHandler<ByteBuf>() {\n        @Override\n        protected void channeRead0(\n            ChannelHandlerContext channelHandlerContext,\n            ByteBuf byteBuf) throws Exception {\n            System.out.println(\"Received data\");\n} } );\nChannelFuture future = bootstrap.connect(\n    new InetSocketAddress(\"www.manning.com\", 80));\n    //Specifies the Channel implementation to be used\n    //Sets the handler for Channel events and data\n    //Connects to the remote host\n         \nfuture.addListener(new ChannelFutureListener() {\n    @Override\n    public void operationComplete(ChannelFuture channelFuture)\n        throws Exception {\n        if (channelFuture.isSuccess()) {\n            System.out.println(\"Connection established\");\n        } else {\n            System.err.println(\"Connection attempt failed\");\n            channelFuture.cause().printStackTrace();\n        }\n} } );\n\n\n```\n\n#### Channel 与 EventLoopGroup 组合\nchannel与EventLoopGroup要对应起来，是NIO的channel就要对应NIo的EventLoopGroup\n\n当Bootstrap bind() 或者 connect() 的时候，一定要先设置以下三项\n\n* group()\n* channel() 或者 channelFactory()\n* handler\n\n\n### Bootstrapping 服务端 \n这一节主要讲述Bootstrapping 服务端的相关APi以及使用用例\n\n![netty-8](/images/netty_part1/2018-8-3-5.png)\n\n#### \n你可以发现服务端的Bootstrapping与客户端存在差别，例如childHandler，childAttr以及childOption，以上这些操作传统的server应用都有，特别是ServerChannel要实现创建相关的子channel，主要用于已经接入的连接。所以ServerChannel管理一些数量的子channel\n\n下图为例：\n\n![netty-8](/images/netty_part1/2018-8-3-6.png)\n\n\n```\nNioEventLoopGroup group = new NioEventLoopGroup();\nServerBootstrap bootstrap = new ServerBootstrap();\n//Sets the EventLoopGroup that provides EventLoops for processing Channel events\nbootstrap.group(group)\n     .channel(NioServerSocketChannel.class)\n.childHandler(new SimpleChannelInboundHandler<ByteBuf>() {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx,\n              ByteBuf byteBuf) throws Exception {\n        System.out.println(\"Received data\");\n    }\n} );\n//Sets a ChannelInboundHandler for I/O and data for the accepted channels\n\nChannelFuture future = bootstrap.bind(new InetSocketAddress(8080));\nfuture.addListener(new ChannelFutureListener() throws Exception {\n    @Override\n    public void operationComplete(ChannelFuture channelFuture){\n//Binds the channel with the configured bootstrap\n   } } );\n\nif (channelFuture.isSuccess()) {\n    System.out.println(\"Server bound\");\n} else {\n    System.err.println(\"Bound attempt failed\");\n    channelFuture.cause().printStackTrace();\n}\n```\n\n### 从channle中引导客户端\n如果你的程序既有服务，又有客户端场景，因此我们可能需要创建Bootstrap的客户端，由此连接到远程peer，但是这个是最没有效率的解决方法，这种方法可能需要你定义另一个EventLoop，这样就会产生额外的线程，以及上下文切换。\n一个更好的方法是共享已经介入的channel的EventLoop，通过Bootstrap的group方法，因为所有的channles斗湖被分配到一个EventLoop使用同样的线程，这避免了额外的线程创建。\n\n如下图所示：\n![netty-8](/images/netty_part1/2018-8-3-7.png) \n\n```\npublic class BootstrapSharingEventLoopGroup {\n\n    /**\n     * Listing 8.5 Bootstrapping a server\n     * */\n    public void bootstrap() {\n        ServerBootstrap bootstrap = new ServerBootstrap();\n        bootstrap.group(new NioEventLoopGroup(), new NioEventLoopGroup())\n            .channel(NioServerSocketChannel.class)\n            .childHandler(\n                new SimpleChannelInboundHandler<ByteBuf>() {\n                    ChannelFuture connectFuture;\n                    @Override\n                    public void channelActive(ChannelHandlerContext ctx)\n                        throws Exception {\n                        Bootstrap bootstrap = new Bootstrap();\n                        bootstrap.channel(NioSocketChannel.class).handler(\n                            new SimpleChannelInboundHandler<ByteBuf>() {\n                                @Override\n                                protected void channelRead0(\n                                    ChannelHandlerContext ctx, ByteBuf in)\n                                    throws Exception {\n                                    System.out.println(\"Received data\");\n                                }\n                            });\n                        bootstrap.group(ctx.channel().eventLoop());\n                        connectFuture = bootstrap.connect(\n                            new InetSocketAddress(\"www.manning.com\", 80));\n                    }\n\n                    @Override\n                    protected void channelRead0(\n                        ChannelHandlerContext channelHandlerContext,\n                            ByteBuf byteBuf) throws Exception {\n                        if (connectFuture.isDone()) {\n                            // do something with the data\n                        }\n                    }\n                });\n        ChannelFuture future = bootstrap.bind(new InetSocketAddress(8080));\n        future.addListener(new ChannelFutureListener() {\n            @Override\n            public void operationComplete(ChannelFuture channelFuture)\n                throws Exception {\n                if (channelFuture.isSuccess()) {\n                    System.out.println(\"Server bound\");\n                } else {\n                    System.err.println(\"Bind attempt failed\");\n                    channelFuture.cause().printStackTrace();\n                }\n            }\n        });\n    }\n}\n\n```\n\n**主要是无论什么时候都要考虑重用EventLoop**\n\n### 在一个bootstrap中添加多个ChannelHandler\n上文所示主要是使用handler与childHandler中只能绑定一个ChannelHandler，如何绑定多个呢？\n\n答案是使用netty提供的一个ChannelInboundHandlerAdapter 的子类ChannelInitializer这个类\n```\npublic abstract class ChannelInitializer<C extends Channel>\n            extends ChannelInboundHandlerAdapter\n\n\n        //使用这个方法\n        protected abstract void initChannel(C ch) throws Exception;\n```\n\n当有channle绑定到EvnetLoop的时候，这个initChannel方法就会调用，然后在方法完成后，会将自己从ChannelPipeline中去除\n\n```\npublic class BootstrapWithInitializer {\n\n    /**\n     * Listing 8.6 Bootstrapping and using ChannelInitializer\n     * */\n    public void bootstrap() throws InterruptedException {\n        ServerBootstrap bootstrap = new ServerBootstrap();\n        bootstrap.group(new NioEventLoopGroup(), new NioEventLoopGroup())\n            .channel(NioServerSocketChannel.class)\n            .childHandler(new ChannelInitializerImpl());\n        ChannelFuture future = bootstrap.bind(new InetSocketAddress(8080));\n        future.sync();\n    }\n\n    final class ChannelInitializerImpl extends ChannelInitializer<Channel> {\n        @Override\n        protected void initChannel(Channel ch) throws Exception {\n            ChannelPipeline pipeline = ch.pipeline();\n            pipeline.addLast(new HttpClientCodec());\n            pipeline.addLast(new HttpObjectAggregator(Integer.MAX_VALUE));\n\n        }\n    }\n}\n\n```\n### 使用netty 的ChannelOptions以及attributes\n手动配置每个channel是单调乏味的。我们可以使用option()方法对Bootstrap配置ChannelOptions，ChannelOptions提供了相关keep-alive、timeout以及buffer的设置等。\n\n\n```\npublic class BootstrapClientWithOptionsAndAttrs {\n\n    /**\n     * Listing 8.7 Using attributes\n     * */\n    public void bootstrap() {\n        final AttributeKey<Integer> id = AttributeKey.newInstance(\"ID\");\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.group(new NioEventLoopGroup())\n            .channel(NioSocketChannel.class)\n            .handler(\n                new SimpleChannelInboundHandler<ByteBuf>() {\n                    @Override\n                    public void channelRegistered(ChannelHandlerContext ctx)\n                        throws Exception {\n                        Integer idValue = ctx.channel().attr(id).get();\n                        // do something with the idValue\n                    }\n\n                    @Override\n                    protected void channelRead0(\n                        ChannelHandlerContext channelHandlerContext,\n                        ByteBuf byteBuf) throws Exception {\n                        System.out.println(\"Received data\");\n                    }\n                }\n            );\n        bootstrap.option(ChannelOption.SO_KEEPALIVE, true)\n            .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 5000);\n        bootstrap.attr(id, 123456);\n        ChannelFuture future = bootstrap.connect(\n            new InetSocketAddress(\"www.manning.com\", 80));\n        future.syncUninterruptibly();\n    }\n}\n```\n\n### 引导一个UDP的channels  DatagramChannels\n前面的channel例子都是基于Tcp的，但是netty也提供了UDP的实现，区别主要在于connnect以及bind\n\n···\n public void bootstrap() {\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.group(new OioEventLoopGroup()).channel(\n            OioDatagramChannel.class).handler(\n            new SimpleChannelInboundHandler<DatagramPacket>() {\n                @Override\n                public void channelRead0(ChannelHandlerContext ctx,\n                    DatagramPacket msg) throws Exception {\n                    // Do something with the packet\n                }\n            }\n        );\n        ChannelFuture future = bootstrap.bind(new InetSocketAddress(0));\n        future.addListener(new ChannelFutureListener() {\n            @Override\n            public void operationComplete(ChannelFuture channelFuture)\n               throws Exception {\n               if (channelFuture.isSuccess()) {\n                   System.out.println(\"Channel bound\");\n               } else {\n                   System.err.println(\"Bind attempt failed\");\n                   channelFuture.cause().printStackTrace();\n               }\n            }\n        });\n    }\n}\n···\n\n\n### 关闭\n如何优雅的关闭\n\n```\nEventLoopGroup group = new NioEventLoopGroup();\nBootstrap bootstrap = new Bootstrap();\nbootstrap.group(group)\n      .channel(NioSocketChannel.class);\n...\nFuture<?> future = group.shutdownGracefully();\n// block until the group has shutdown\nfuture.syncUninterruptibly()\n```\n\n不建议：可选的，你可以使用channel.close() 确定关闭所有活跃的channel，然后再关闭EventLoop。\n\n但是在所有的例子中，记住先关闭EventLoop\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/chapter8-2018-8-3.md","raw":"---\ntitle: netty Bootstrap\ndate: 2018-08-03 08:36:02\ntags: netty\ncategories: [\"netty\",\"Bootstrap\"]\n---\n\n本章主要覆盖以下方面\n* Bootstraping 客户端与服务端\n* 在一个channle中的Bootstraping 客户端\n* 添加channelHandlers\n* 使用ChannelOptions以及属性\n<!--more-->\n\n![netty-8](/images/netty_part1/2018-8-3-1.png)\n\n\n### Bootstrap 类\n一个server端的Bootstrap，如上图所示，主要用于接收连接，并且创建一个子Channels与客户端服务，然而客户端只需要一个，因此不需要父级的channel。对于udp的服务端也一样如此\n\n```\npublic abstract class AbstractBootstrap\n            <B extends AbstractBootstrap<B,C>,C extends Channel>\n\n\n public class Bootstrap\n            extends AbstractBootstrap<Bootstrap,Channel>\n\n public class ServerBootstrap\n            extends AbstractBootstrap<ServerBootstrap,ServerChannel>\n\n```\n\n### Bootstraping 客户端以及无连接协议\n以下是Bootstraping的API\n\n![netty-8](/images/netty_part1/2018-8-3-2.png)\n![netty-8](/images/netty_part1/2018-8-3-3.png)\n\n\n#### 引导客户端\nBootstrap 类主要负责为客户端创建channels以及为应用指定连接协议\n\n![netty-8](/images/netty_part1/2018-8-3-4.png)\n\n\n例如以下为使用NIO TCP连接\n\n```\nEventLoopGroup group = new NioEventLoopGroup();\nBootstrap bootstrap = new Bootstrap();\n//Sets the EventLoopGroup that provides EventLoops for processing Channel events\nbootstrap.group(group)\n         .channel(NioSocketChannel.class)\n    .handler(new SimpleChannelInboundHandler<ByteBuf>() {\n        @Override\n        protected void channeRead0(\n            ChannelHandlerContext channelHandlerContext,\n            ByteBuf byteBuf) throws Exception {\n            System.out.println(\"Received data\");\n} } );\nChannelFuture future = bootstrap.connect(\n    new InetSocketAddress(\"www.manning.com\", 80));\n    //Specifies the Channel implementation to be used\n    //Sets the handler for Channel events and data\n    //Connects to the remote host\n         \nfuture.addListener(new ChannelFutureListener() {\n    @Override\n    public void operationComplete(ChannelFuture channelFuture)\n        throws Exception {\n        if (channelFuture.isSuccess()) {\n            System.out.println(\"Connection established\");\n        } else {\n            System.err.println(\"Connection attempt failed\");\n            channelFuture.cause().printStackTrace();\n        }\n} } );\n\n\n```\n\n#### Channel 与 EventLoopGroup 组合\nchannel与EventLoopGroup要对应起来，是NIO的channel就要对应NIo的EventLoopGroup\n\n当Bootstrap bind() 或者 connect() 的时候，一定要先设置以下三项\n\n* group()\n* channel() 或者 channelFactory()\n* handler\n\n\n### Bootstrapping 服务端 \n这一节主要讲述Bootstrapping 服务端的相关APi以及使用用例\n\n![netty-8](/images/netty_part1/2018-8-3-5.png)\n\n#### \n你可以发现服务端的Bootstrapping与客户端存在差别，例如childHandler，childAttr以及childOption，以上这些操作传统的server应用都有，特别是ServerChannel要实现创建相关的子channel，主要用于已经接入的连接。所以ServerChannel管理一些数量的子channel\n\n下图为例：\n\n![netty-8](/images/netty_part1/2018-8-3-6.png)\n\n\n```\nNioEventLoopGroup group = new NioEventLoopGroup();\nServerBootstrap bootstrap = new ServerBootstrap();\n//Sets the EventLoopGroup that provides EventLoops for processing Channel events\nbootstrap.group(group)\n     .channel(NioServerSocketChannel.class)\n.childHandler(new SimpleChannelInboundHandler<ByteBuf>() {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx,\n              ByteBuf byteBuf) throws Exception {\n        System.out.println(\"Received data\");\n    }\n} );\n//Sets a ChannelInboundHandler for I/O and data for the accepted channels\n\nChannelFuture future = bootstrap.bind(new InetSocketAddress(8080));\nfuture.addListener(new ChannelFutureListener() throws Exception {\n    @Override\n    public void operationComplete(ChannelFuture channelFuture){\n//Binds the channel with the configured bootstrap\n   } } );\n\nif (channelFuture.isSuccess()) {\n    System.out.println(\"Server bound\");\n} else {\n    System.err.println(\"Bound attempt failed\");\n    channelFuture.cause().printStackTrace();\n}\n```\n\n### 从channle中引导客户端\n如果你的程序既有服务，又有客户端场景，因此我们可能需要创建Bootstrap的客户端，由此连接到远程peer，但是这个是最没有效率的解决方法，这种方法可能需要你定义另一个EventLoop，这样就会产生额外的线程，以及上下文切换。\n一个更好的方法是共享已经介入的channel的EventLoop，通过Bootstrap的group方法，因为所有的channles斗湖被分配到一个EventLoop使用同样的线程，这避免了额外的线程创建。\n\n如下图所示：\n![netty-8](/images/netty_part1/2018-8-3-7.png) \n\n```\npublic class BootstrapSharingEventLoopGroup {\n\n    /**\n     * Listing 8.5 Bootstrapping a server\n     * */\n    public void bootstrap() {\n        ServerBootstrap bootstrap = new ServerBootstrap();\n        bootstrap.group(new NioEventLoopGroup(), new NioEventLoopGroup())\n            .channel(NioServerSocketChannel.class)\n            .childHandler(\n                new SimpleChannelInboundHandler<ByteBuf>() {\n                    ChannelFuture connectFuture;\n                    @Override\n                    public void channelActive(ChannelHandlerContext ctx)\n                        throws Exception {\n                        Bootstrap bootstrap = new Bootstrap();\n                        bootstrap.channel(NioSocketChannel.class).handler(\n                            new SimpleChannelInboundHandler<ByteBuf>() {\n                                @Override\n                                protected void channelRead0(\n                                    ChannelHandlerContext ctx, ByteBuf in)\n                                    throws Exception {\n                                    System.out.println(\"Received data\");\n                                }\n                            });\n                        bootstrap.group(ctx.channel().eventLoop());\n                        connectFuture = bootstrap.connect(\n                            new InetSocketAddress(\"www.manning.com\", 80));\n                    }\n\n                    @Override\n                    protected void channelRead0(\n                        ChannelHandlerContext channelHandlerContext,\n                            ByteBuf byteBuf) throws Exception {\n                        if (connectFuture.isDone()) {\n                            // do something with the data\n                        }\n                    }\n                });\n        ChannelFuture future = bootstrap.bind(new InetSocketAddress(8080));\n        future.addListener(new ChannelFutureListener() {\n            @Override\n            public void operationComplete(ChannelFuture channelFuture)\n                throws Exception {\n                if (channelFuture.isSuccess()) {\n                    System.out.println(\"Server bound\");\n                } else {\n                    System.err.println(\"Bind attempt failed\");\n                    channelFuture.cause().printStackTrace();\n                }\n            }\n        });\n    }\n}\n\n```\n\n**主要是无论什么时候都要考虑重用EventLoop**\n\n### 在一个bootstrap中添加多个ChannelHandler\n上文所示主要是使用handler与childHandler中只能绑定一个ChannelHandler，如何绑定多个呢？\n\n答案是使用netty提供的一个ChannelInboundHandlerAdapter 的子类ChannelInitializer这个类\n```\npublic abstract class ChannelInitializer<C extends Channel>\n            extends ChannelInboundHandlerAdapter\n\n\n        //使用这个方法\n        protected abstract void initChannel(C ch) throws Exception;\n```\n\n当有channle绑定到EvnetLoop的时候，这个initChannel方法就会调用，然后在方法完成后，会将自己从ChannelPipeline中去除\n\n```\npublic class BootstrapWithInitializer {\n\n    /**\n     * Listing 8.6 Bootstrapping and using ChannelInitializer\n     * */\n    public void bootstrap() throws InterruptedException {\n        ServerBootstrap bootstrap = new ServerBootstrap();\n        bootstrap.group(new NioEventLoopGroup(), new NioEventLoopGroup())\n            .channel(NioServerSocketChannel.class)\n            .childHandler(new ChannelInitializerImpl());\n        ChannelFuture future = bootstrap.bind(new InetSocketAddress(8080));\n        future.sync();\n    }\n\n    final class ChannelInitializerImpl extends ChannelInitializer<Channel> {\n        @Override\n        protected void initChannel(Channel ch) throws Exception {\n            ChannelPipeline pipeline = ch.pipeline();\n            pipeline.addLast(new HttpClientCodec());\n            pipeline.addLast(new HttpObjectAggregator(Integer.MAX_VALUE));\n\n        }\n    }\n}\n\n```\n### 使用netty 的ChannelOptions以及attributes\n手动配置每个channel是单调乏味的。我们可以使用option()方法对Bootstrap配置ChannelOptions，ChannelOptions提供了相关keep-alive、timeout以及buffer的设置等。\n\n\n```\npublic class BootstrapClientWithOptionsAndAttrs {\n\n    /**\n     * Listing 8.7 Using attributes\n     * */\n    public void bootstrap() {\n        final AttributeKey<Integer> id = AttributeKey.newInstance(\"ID\");\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.group(new NioEventLoopGroup())\n            .channel(NioSocketChannel.class)\n            .handler(\n                new SimpleChannelInboundHandler<ByteBuf>() {\n                    @Override\n                    public void channelRegistered(ChannelHandlerContext ctx)\n                        throws Exception {\n                        Integer idValue = ctx.channel().attr(id).get();\n                        // do something with the idValue\n                    }\n\n                    @Override\n                    protected void channelRead0(\n                        ChannelHandlerContext channelHandlerContext,\n                        ByteBuf byteBuf) throws Exception {\n                        System.out.println(\"Received data\");\n                    }\n                }\n            );\n        bootstrap.option(ChannelOption.SO_KEEPALIVE, true)\n            .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 5000);\n        bootstrap.attr(id, 123456);\n        ChannelFuture future = bootstrap.connect(\n            new InetSocketAddress(\"www.manning.com\", 80));\n        future.syncUninterruptibly();\n    }\n}\n```\n\n### 引导一个UDP的channels  DatagramChannels\n前面的channel例子都是基于Tcp的，但是netty也提供了UDP的实现，区别主要在于connnect以及bind\n\n···\n public void bootstrap() {\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.group(new OioEventLoopGroup()).channel(\n            OioDatagramChannel.class).handler(\n            new SimpleChannelInboundHandler<DatagramPacket>() {\n                @Override\n                public void channelRead0(ChannelHandlerContext ctx,\n                    DatagramPacket msg) throws Exception {\n                    // Do something with the packet\n                }\n            }\n        );\n        ChannelFuture future = bootstrap.bind(new InetSocketAddress(0));\n        future.addListener(new ChannelFutureListener() {\n            @Override\n            public void operationComplete(ChannelFuture channelFuture)\n               throws Exception {\n               if (channelFuture.isSuccess()) {\n                   System.out.println(\"Channel bound\");\n               } else {\n                   System.err.println(\"Bind attempt failed\");\n                   channelFuture.cause().printStackTrace();\n               }\n            }\n        });\n    }\n}\n···\n\n\n### 关闭\n如何优雅的关闭\n\n```\nEventLoopGroup group = new NioEventLoopGroup();\nBootstrap bootstrap = new Bootstrap();\nbootstrap.group(group)\n      .channel(NioSocketChannel.class);\n...\nFuture<?> future = group.shutdownGracefully();\n// block until the group has shutdown\nfuture.syncUninterruptibly()\n```\n\n不建议：可选的，你可以使用channel.close() 确定关闭所有活跃的channel，然后再关闭EventLoop。\n\n但是在所有的例子中，记住先关闭EventLoop\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n","slug":"chapter8-2018-8-3","published":1,"updated":"2019-09-23T06:59:35.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0w29rk6000huup2d4pqdrvs","content":"<p>本章主要覆盖以下方面</p>\n<ul>\n<li>Bootstraping 客户端与服务端</li>\n<li>在一个channle中的Bootstraping 客户端</li>\n<li>添加channelHandlers</li>\n<li>使用ChannelOptions以及属性<a id=\"more\"></a>\n</li>\n</ul>\n<p><img src=\"/images/netty_part1/2018-8-3-1.png\" alt=\"netty-8\"></p>\n<h3 id=\"Bootstrap-类\"><a href=\"#Bootstrap-类\" class=\"headerlink\" title=\"Bootstrap 类\"></a>Bootstrap 类</h3><p>一个server端的Bootstrap，如上图所示，主要用于接收连接，并且创建一个子Channels与客户端服务，然而客户端只需要一个，因此不需要父级的channel。对于udp的服务端也一样如此</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class AbstractBootstrap</span><br><span class=\"line\">            &lt;B extends AbstractBootstrap&lt;B,C&gt;,C extends Channel&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> public class Bootstrap</span><br><span class=\"line\">            extends AbstractBootstrap&lt;Bootstrap,Channel&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> public class ServerBootstrap</span><br><span class=\"line\">            extends AbstractBootstrap&lt;ServerBootstrap,ServerChannel&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Bootstraping-客户端以及无连接协议\"><a href=\"#Bootstraping-客户端以及无连接协议\" class=\"headerlink\" title=\"Bootstraping 客户端以及无连接协议\"></a>Bootstraping 客户端以及无连接协议</h3><p>以下是Bootstraping的API</p>\n<p><img src=\"/images/netty_part1/2018-8-3-2.png\" alt=\"netty-8\"><br><img src=\"/images/netty_part1/2018-8-3-3.png\" alt=\"netty-8\"></p>\n<h4 id=\"引导客户端\"><a href=\"#引导客户端\" class=\"headerlink\" title=\"引导客户端\"></a>引导客户端</h4><p>Bootstrap 类主要负责为客户端创建channels以及为应用指定连接协议</p>\n<p><img src=\"/images/netty_part1/2018-8-3-4.png\" alt=\"netty-8\"></p>\n<p>例如以下为使用NIO TCP连接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EventLoopGroup group = new NioEventLoopGroup();</span><br><span class=\"line\">Bootstrap bootstrap = new Bootstrap();</span><br><span class=\"line\">//Sets the EventLoopGroup that provides EventLoops for processing Channel events</span><br><span class=\"line\">bootstrap.group(group)</span><br><span class=\"line\">         .channel(NioSocketChannel.class)</span><br><span class=\"line\">    .handler(new SimpleChannelInboundHandler&lt;ByteBuf&gt;() &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected void channeRead0(</span><br><span class=\"line\">            ChannelHandlerContext channelHandlerContext,</span><br><span class=\"line\">            ByteBuf byteBuf) throws Exception &#123;</span><br><span class=\"line\">            System.out.println(&quot;Received data&quot;);</span><br><span class=\"line\">&#125; &#125; );</span><br><span class=\"line\">ChannelFuture future = bootstrap.connect(</span><br><span class=\"line\">    new InetSocketAddress(&quot;www.manning.com&quot;, 80));</span><br><span class=\"line\">    //Specifies the Channel implementation to be used</span><br><span class=\"line\">    //Sets the handler for Channel events and data</span><br><span class=\"line\">    //Connects to the remote host</span><br><span class=\"line\">         </span><br><span class=\"line\">future.addListener(new ChannelFutureListener() &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void operationComplete(ChannelFuture channelFuture)</span><br><span class=\"line\">        throws Exception &#123;</span><br><span class=\"line\">        if (channelFuture.isSuccess()) &#123;</span><br><span class=\"line\">            System.out.println(&quot;Connection established&quot;);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            System.err.println(&quot;Connection attempt failed&quot;);</span><br><span class=\"line\">            channelFuture.cause().printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125; &#125; );</span><br></pre></td></tr></table></figure>\n<h4 id=\"Channel-与-EventLoopGroup-组合\"><a href=\"#Channel-与-EventLoopGroup-组合\" class=\"headerlink\" title=\"Channel 与 EventLoopGroup 组合\"></a>Channel 与 EventLoopGroup 组合</h4><p>channel与EventLoopGroup要对应起来，是NIO的channel就要对应NIo的EventLoopGroup</p>\n<p>当Bootstrap bind() 或者 connect() 的时候，一定要先设置以下三项</p>\n<ul>\n<li>group()</li>\n<li>channel() 或者 channelFactory()</li>\n<li>handler</li>\n</ul>\n<h3 id=\"Bootstrapping-服务端\"><a href=\"#Bootstrapping-服务端\" class=\"headerlink\" title=\"Bootstrapping 服务端\"></a>Bootstrapping 服务端</h3><p>这一节主要讲述Bootstrapping 服务端的相关APi以及使用用例</p>\n<p><img src=\"/images/netty_part1/2018-8-3-5.png\" alt=\"netty-8\"></p>\n<p>####<br>你可以发现服务端的Bootstrapping与客户端存在差别，例如childHandler，childAttr以及childOption，以上这些操作传统的server应用都有，特别是ServerChannel要实现创建相关的子channel，主要用于已经接入的连接。所以ServerChannel管理一些数量的子channel</p>\n<p>下图为例：</p>\n<p><img src=\"/images/netty_part1/2018-8-3-6.png\" alt=\"netty-8\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NioEventLoopGroup group = new NioEventLoopGroup();</span><br><span class=\"line\">ServerBootstrap bootstrap = new ServerBootstrap();</span><br><span class=\"line\">//Sets the EventLoopGroup that provides EventLoops for processing Channel events</span><br><span class=\"line\">bootstrap.group(group)</span><br><span class=\"line\">     .channel(NioServerSocketChannel.class)</span><br><span class=\"line\">.childHandler(new SimpleChannelInboundHandler&lt;ByteBuf&gt;() &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void channelRead0(ChannelHandlerContext ctx,</span><br><span class=\"line\">              ByteBuf byteBuf) throws Exception &#123;</span><br><span class=\"line\">        System.out.println(&quot;Received data&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; );</span><br><span class=\"line\">//Sets a ChannelInboundHandler for I/O and data for the accepted channels</span><br><span class=\"line\"></span><br><span class=\"line\">ChannelFuture future = bootstrap.bind(new InetSocketAddress(8080));</span><br><span class=\"line\">future.addListener(new ChannelFutureListener() throws Exception &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void operationComplete(ChannelFuture channelFuture)&#123;</span><br><span class=\"line\">//Binds the channel with the configured bootstrap</span><br><span class=\"line\">   &#125; &#125; );</span><br><span class=\"line\"></span><br><span class=\"line\">if (channelFuture.isSuccess()) &#123;</span><br><span class=\"line\">    System.out.println(&quot;Server bound&quot;);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    System.err.println(&quot;Bound attempt failed&quot;);</span><br><span class=\"line\">    channelFuture.cause().printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"从channle中引导客户端\"><a href=\"#从channle中引导客户端\" class=\"headerlink\" title=\"从channle中引导客户端\"></a>从channle中引导客户端</h3><p>如果你的程序既有服务，又有客户端场景，因此我们可能需要创建Bootstrap的客户端，由此连接到远程peer，但是这个是最没有效率的解决方法，这种方法可能需要你定义另一个EventLoop，这样就会产生额外的线程，以及上下文切换。<br>一个更好的方法是共享已经介入的channel的EventLoop，通过Bootstrap的group方法，因为所有的channles斗湖被分配到一个EventLoop使用同样的线程，这避免了额外的线程创建。</p>\n<p>如下图所示：<br><img src=\"/images/netty_part1/2018-8-3-7.png\" alt=\"netty-8\"> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BootstrapSharingEventLoopGroup &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Listing 8.5 Bootstrapping a server</span><br><span class=\"line\">     * */</span><br><span class=\"line\">    public void bootstrap() &#123;</span><br><span class=\"line\">        ServerBootstrap bootstrap = new ServerBootstrap();</span><br><span class=\"line\">        bootstrap.group(new NioEventLoopGroup(), new NioEventLoopGroup())</span><br><span class=\"line\">            .channel(NioServerSocketChannel.class)</span><br><span class=\"line\">            .childHandler(</span><br><span class=\"line\">                new SimpleChannelInboundHandler&lt;ByteBuf&gt;() &#123;</span><br><span class=\"line\">                    ChannelFuture connectFuture;</span><br><span class=\"line\">                    @Override</span><br><span class=\"line\">                    public void channelActive(ChannelHandlerContext ctx)</span><br><span class=\"line\">                        throws Exception &#123;</span><br><span class=\"line\">                        Bootstrap bootstrap = new Bootstrap();</span><br><span class=\"line\">                        bootstrap.channel(NioSocketChannel.class).handler(</span><br><span class=\"line\">                            new SimpleChannelInboundHandler&lt;ByteBuf&gt;() &#123;</span><br><span class=\"line\">                                @Override</span><br><span class=\"line\">                                protected void channelRead0(</span><br><span class=\"line\">                                    ChannelHandlerContext ctx, ByteBuf in)</span><br><span class=\"line\">                                    throws Exception &#123;</span><br><span class=\"line\">                                    System.out.println(&quot;Received data&quot;);</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;);</span><br><span class=\"line\">                        bootstrap.group(ctx.channel().eventLoop());</span><br><span class=\"line\">                        connectFuture = bootstrap.connect(</span><br><span class=\"line\">                            new InetSocketAddress(&quot;www.manning.com&quot;, 80));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    @Override</span><br><span class=\"line\">                    protected void channelRead0(</span><br><span class=\"line\">                        ChannelHandlerContext channelHandlerContext,</span><br><span class=\"line\">                            ByteBuf byteBuf) throws Exception &#123;</span><br><span class=\"line\">                        if (connectFuture.isDone()) &#123;</span><br><span class=\"line\">                            // do something with the data</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">        ChannelFuture future = bootstrap.bind(new InetSocketAddress(8080));</span><br><span class=\"line\">        future.addListener(new ChannelFutureListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void operationComplete(ChannelFuture channelFuture)</span><br><span class=\"line\">                throws Exception &#123;</span><br><span class=\"line\">                if (channelFuture.isSuccess()) &#123;</span><br><span class=\"line\">                    System.out.println(&quot;Server bound&quot;);</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    System.err.println(&quot;Bind attempt failed&quot;);</span><br><span class=\"line\">                    channelFuture.cause().printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>主要是无论什么时候都要考虑重用EventLoop</strong></p>\n<h3 id=\"在一个bootstrap中添加多个ChannelHandler\"><a href=\"#在一个bootstrap中添加多个ChannelHandler\" class=\"headerlink\" title=\"在一个bootstrap中添加多个ChannelHandler\"></a>在一个bootstrap中添加多个ChannelHandler</h3><p>上文所示主要是使用handler与childHandler中只能绑定一个ChannelHandler，如何绑定多个呢？</p>\n<p>答案是使用netty提供的一个ChannelInboundHandlerAdapter 的子类ChannelInitializer这个类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class ChannelInitializer&lt;C extends Channel&gt;</span><br><span class=\"line\">            extends ChannelInboundHandlerAdapter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        //使用这个方法</span><br><span class=\"line\">        protected abstract void initChannel(C ch) throws Exception;</span><br></pre></td></tr></table></figure></p>\n<p>当有channle绑定到EvnetLoop的时候，这个initChannel方法就会调用，然后在方法完成后，会将自己从ChannelPipeline中去除</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BootstrapWithInitializer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Listing 8.6 Bootstrapping and using ChannelInitializer</span><br><span class=\"line\">     * */</span><br><span class=\"line\">    public void bootstrap() throws InterruptedException &#123;</span><br><span class=\"line\">        ServerBootstrap bootstrap = new ServerBootstrap();</span><br><span class=\"line\">        bootstrap.group(new NioEventLoopGroup(), new NioEventLoopGroup())</span><br><span class=\"line\">            .channel(NioServerSocketChannel.class)</span><br><span class=\"line\">            .childHandler(new ChannelInitializerImpl());</span><br><span class=\"line\">        ChannelFuture future = bootstrap.bind(new InetSocketAddress(8080));</span><br><span class=\"line\">        future.sync();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    final class ChannelInitializerImpl extends ChannelInitializer&lt;Channel&gt; &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected void initChannel(Channel ch) throws Exception &#123;</span><br><span class=\"line\">            ChannelPipeline pipeline = ch.pipeline();</span><br><span class=\"line\">            pipeline.addLast(new HttpClientCodec());</span><br><span class=\"line\">            pipeline.addLast(new HttpObjectAggregator(Integer.MAX_VALUE));</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用netty-的ChannelOptions以及attributes\"><a href=\"#使用netty-的ChannelOptions以及attributes\" class=\"headerlink\" title=\"使用netty 的ChannelOptions以及attributes\"></a>使用netty 的ChannelOptions以及attributes</h3><p>手动配置每个channel是单调乏味的。我们可以使用option()方法对Bootstrap配置ChannelOptions，ChannelOptions提供了相关keep-alive、timeout以及buffer的设置等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BootstrapClientWithOptionsAndAttrs &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Listing 8.7 Using attributes</span><br><span class=\"line\">     * */</span><br><span class=\"line\">    public void bootstrap() &#123;</span><br><span class=\"line\">        final AttributeKey&lt;Integer&gt; id = AttributeKey.newInstance(&quot;ID&quot;);</span><br><span class=\"line\">        Bootstrap bootstrap = new Bootstrap();</span><br><span class=\"line\">        bootstrap.group(new NioEventLoopGroup())</span><br><span class=\"line\">            .channel(NioSocketChannel.class)</span><br><span class=\"line\">            .handler(</span><br><span class=\"line\">                new SimpleChannelInboundHandler&lt;ByteBuf&gt;() &#123;</span><br><span class=\"line\">                    @Override</span><br><span class=\"line\">                    public void channelRegistered(ChannelHandlerContext ctx)</span><br><span class=\"line\">                        throws Exception &#123;</span><br><span class=\"line\">                        Integer idValue = ctx.channel().attr(id).get();</span><br><span class=\"line\">                        // do something with the idValue</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    @Override</span><br><span class=\"line\">                    protected void channelRead0(</span><br><span class=\"line\">                        ChannelHandlerContext channelHandlerContext,</span><br><span class=\"line\">                        ByteBuf byteBuf) throws Exception &#123;</span><br><span class=\"line\">                        System.out.println(&quot;Received data&quot;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            );</span><br><span class=\"line\">        bootstrap.option(ChannelOption.SO_KEEPALIVE, true)</span><br><span class=\"line\">            .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 5000);</span><br><span class=\"line\">        bootstrap.attr(id, 123456);</span><br><span class=\"line\">        ChannelFuture future = bootstrap.connect(</span><br><span class=\"line\">            new InetSocketAddress(&quot;www.manning.com&quot;, 80));</span><br><span class=\"line\">        future.syncUninterruptibly();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"引导一个UDP的channels-DatagramChannels\"><a href=\"#引导一个UDP的channels-DatagramChannels\" class=\"headerlink\" title=\"引导一个UDP的channels  DatagramChannels\"></a>引导一个UDP的channels  DatagramChannels</h3><p>前面的channel例子都是基于Tcp的，但是netty也提供了UDP的实现，区别主要在于connnect以及bind</p>\n<p>···<br> public void bootstrap() {<br>        Bootstrap bootstrap = new Bootstrap();<br>        bootstrap.group(new OioEventLoopGroup()).channel(<br>            OioDatagramChannel.class).handler(<br>            new SimpleChannelInboundHandler<datagrampacket>() {<br>                @Override<br>                public void channelRead0(ChannelHandlerContext ctx,<br>                    DatagramPacket msg) throws Exception {<br>                    // Do something with the packet<br>                }<br>            }<br>        );<br>        ChannelFuture future = bootstrap.bind(new InetSocketAddress(0));<br>        future.addListener(new ChannelFutureListener() {<br>            @Override<br>            public void operationComplete(ChannelFuture channelFuture)<br>               throws Exception {<br>               if (channelFuture.isSuccess()) {<br>                   System.out.println(“Channel bound”);<br>               } else {<br>                   System.err.println(“Bind attempt failed”);<br>                   channelFuture.cause().printStackTrace();<br>               }<br>            }<br>        });<br>    }<br>}<br>···</datagrampacket></p>\n<h3 id=\"关闭\"><a href=\"#关闭\" class=\"headerlink\" title=\"关闭\"></a>关闭</h3><p>如何优雅的关闭</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EventLoopGroup group = new NioEventLoopGroup();</span><br><span class=\"line\">Bootstrap bootstrap = new Bootstrap();</span><br><span class=\"line\">bootstrap.group(group)</span><br><span class=\"line\">      .channel(NioSocketChannel.class);</span><br><span class=\"line\">...</span><br><span class=\"line\">Future&lt;?&gt; future = group.shutdownGracefully();</span><br><span class=\"line\">// block until the group has shutdown</span><br><span class=\"line\">future.syncUninterruptibly()</span><br></pre></td></tr></table></figure>\n<p>不建议：可选的，你可以使用channel.close() 确定关闭所有活跃的channel，然后再关闭EventLoop。</p>\n<p>但是在所有的例子中，记住先关闭EventLoop</p>\n","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"<p>本章主要覆盖以下方面</p>\n<ul>\n<li>Bootstraping 客户端与服务端</li>\n<li>在一个channle中的Bootstraping 客户端</li>\n<li>添加channelHandlers</li>\n<li>使用ChannelOptions以及属性","more":"</li>\n</ul>\n<p><img src=\"/images/netty_part1/2018-8-3-1.png\" alt=\"netty-8\"></p>\n<h3 id=\"Bootstrap-类\"><a href=\"#Bootstrap-类\" class=\"headerlink\" title=\"Bootstrap 类\"></a>Bootstrap 类</h3><p>一个server端的Bootstrap，如上图所示，主要用于接收连接，并且创建一个子Channels与客户端服务，然而客户端只需要一个，因此不需要父级的channel。对于udp的服务端也一样如此</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class AbstractBootstrap</span><br><span class=\"line\">            &lt;B extends AbstractBootstrap&lt;B,C&gt;,C extends Channel&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> public class Bootstrap</span><br><span class=\"line\">            extends AbstractBootstrap&lt;Bootstrap,Channel&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> public class ServerBootstrap</span><br><span class=\"line\">            extends AbstractBootstrap&lt;ServerBootstrap,ServerChannel&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Bootstraping-客户端以及无连接协议\"><a href=\"#Bootstraping-客户端以及无连接协议\" class=\"headerlink\" title=\"Bootstraping 客户端以及无连接协议\"></a>Bootstraping 客户端以及无连接协议</h3><p>以下是Bootstraping的API</p>\n<p><img src=\"/images/netty_part1/2018-8-3-2.png\" alt=\"netty-8\"><br><img src=\"/images/netty_part1/2018-8-3-3.png\" alt=\"netty-8\"></p>\n<h4 id=\"引导客户端\"><a href=\"#引导客户端\" class=\"headerlink\" title=\"引导客户端\"></a>引导客户端</h4><p>Bootstrap 类主要负责为客户端创建channels以及为应用指定连接协议</p>\n<p><img src=\"/images/netty_part1/2018-8-3-4.png\" alt=\"netty-8\"></p>\n<p>例如以下为使用NIO TCP连接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EventLoopGroup group = new NioEventLoopGroup();</span><br><span class=\"line\">Bootstrap bootstrap = new Bootstrap();</span><br><span class=\"line\">//Sets the EventLoopGroup that provides EventLoops for processing Channel events</span><br><span class=\"line\">bootstrap.group(group)</span><br><span class=\"line\">         .channel(NioSocketChannel.class)</span><br><span class=\"line\">    .handler(new SimpleChannelInboundHandler&lt;ByteBuf&gt;() &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected void channeRead0(</span><br><span class=\"line\">            ChannelHandlerContext channelHandlerContext,</span><br><span class=\"line\">            ByteBuf byteBuf) throws Exception &#123;</span><br><span class=\"line\">            System.out.println(&quot;Received data&quot;);</span><br><span class=\"line\">&#125; &#125; );</span><br><span class=\"line\">ChannelFuture future = bootstrap.connect(</span><br><span class=\"line\">    new InetSocketAddress(&quot;www.manning.com&quot;, 80));</span><br><span class=\"line\">    //Specifies the Channel implementation to be used</span><br><span class=\"line\">    //Sets the handler for Channel events and data</span><br><span class=\"line\">    //Connects to the remote host</span><br><span class=\"line\">         </span><br><span class=\"line\">future.addListener(new ChannelFutureListener() &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void operationComplete(ChannelFuture channelFuture)</span><br><span class=\"line\">        throws Exception &#123;</span><br><span class=\"line\">        if (channelFuture.isSuccess()) &#123;</span><br><span class=\"line\">            System.out.println(&quot;Connection established&quot;);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            System.err.println(&quot;Connection attempt failed&quot;);</span><br><span class=\"line\">            channelFuture.cause().printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125; &#125; );</span><br></pre></td></tr></table></figure>\n<h4 id=\"Channel-与-EventLoopGroup-组合\"><a href=\"#Channel-与-EventLoopGroup-组合\" class=\"headerlink\" title=\"Channel 与 EventLoopGroup 组合\"></a>Channel 与 EventLoopGroup 组合</h4><p>channel与EventLoopGroup要对应起来，是NIO的channel就要对应NIo的EventLoopGroup</p>\n<p>当Bootstrap bind() 或者 connect() 的时候，一定要先设置以下三项</p>\n<ul>\n<li>group()</li>\n<li>channel() 或者 channelFactory()</li>\n<li>handler</li>\n</ul>\n<h3 id=\"Bootstrapping-服务端\"><a href=\"#Bootstrapping-服务端\" class=\"headerlink\" title=\"Bootstrapping 服务端\"></a>Bootstrapping 服务端</h3><p>这一节主要讲述Bootstrapping 服务端的相关APi以及使用用例</p>\n<p><img src=\"/images/netty_part1/2018-8-3-5.png\" alt=\"netty-8\"></p>\n<p>####<br>你可以发现服务端的Bootstrapping与客户端存在差别，例如childHandler，childAttr以及childOption，以上这些操作传统的server应用都有，特别是ServerChannel要实现创建相关的子channel，主要用于已经接入的连接。所以ServerChannel管理一些数量的子channel</p>\n<p>下图为例：</p>\n<p><img src=\"/images/netty_part1/2018-8-3-6.png\" alt=\"netty-8\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NioEventLoopGroup group = new NioEventLoopGroup();</span><br><span class=\"line\">ServerBootstrap bootstrap = new ServerBootstrap();</span><br><span class=\"line\">//Sets the EventLoopGroup that provides EventLoops for processing Channel events</span><br><span class=\"line\">bootstrap.group(group)</span><br><span class=\"line\">     .channel(NioServerSocketChannel.class)</span><br><span class=\"line\">.childHandler(new SimpleChannelInboundHandler&lt;ByteBuf&gt;() &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void channelRead0(ChannelHandlerContext ctx,</span><br><span class=\"line\">              ByteBuf byteBuf) throws Exception &#123;</span><br><span class=\"line\">        System.out.println(&quot;Received data&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; );</span><br><span class=\"line\">//Sets a ChannelInboundHandler for I/O and data for the accepted channels</span><br><span class=\"line\"></span><br><span class=\"line\">ChannelFuture future = bootstrap.bind(new InetSocketAddress(8080));</span><br><span class=\"line\">future.addListener(new ChannelFutureListener() throws Exception &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void operationComplete(ChannelFuture channelFuture)&#123;</span><br><span class=\"line\">//Binds the channel with the configured bootstrap</span><br><span class=\"line\">   &#125; &#125; );</span><br><span class=\"line\"></span><br><span class=\"line\">if (channelFuture.isSuccess()) &#123;</span><br><span class=\"line\">    System.out.println(&quot;Server bound&quot;);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    System.err.println(&quot;Bound attempt failed&quot;);</span><br><span class=\"line\">    channelFuture.cause().printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"从channle中引导客户端\"><a href=\"#从channle中引导客户端\" class=\"headerlink\" title=\"从channle中引导客户端\"></a>从channle中引导客户端</h3><p>如果你的程序既有服务，又有客户端场景，因此我们可能需要创建Bootstrap的客户端，由此连接到远程peer，但是这个是最没有效率的解决方法，这种方法可能需要你定义另一个EventLoop，这样就会产生额外的线程，以及上下文切换。<br>一个更好的方法是共享已经介入的channel的EventLoop，通过Bootstrap的group方法，因为所有的channles斗湖被分配到一个EventLoop使用同样的线程，这避免了额外的线程创建。</p>\n<p>如下图所示：<br><img src=\"/images/netty_part1/2018-8-3-7.png\" alt=\"netty-8\"> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BootstrapSharingEventLoopGroup &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Listing 8.5 Bootstrapping a server</span><br><span class=\"line\">     * */</span><br><span class=\"line\">    public void bootstrap() &#123;</span><br><span class=\"line\">        ServerBootstrap bootstrap = new ServerBootstrap();</span><br><span class=\"line\">        bootstrap.group(new NioEventLoopGroup(), new NioEventLoopGroup())</span><br><span class=\"line\">            .channel(NioServerSocketChannel.class)</span><br><span class=\"line\">            .childHandler(</span><br><span class=\"line\">                new SimpleChannelInboundHandler&lt;ByteBuf&gt;() &#123;</span><br><span class=\"line\">                    ChannelFuture connectFuture;</span><br><span class=\"line\">                    @Override</span><br><span class=\"line\">                    public void channelActive(ChannelHandlerContext ctx)</span><br><span class=\"line\">                        throws Exception &#123;</span><br><span class=\"line\">                        Bootstrap bootstrap = new Bootstrap();</span><br><span class=\"line\">                        bootstrap.channel(NioSocketChannel.class).handler(</span><br><span class=\"line\">                            new SimpleChannelInboundHandler&lt;ByteBuf&gt;() &#123;</span><br><span class=\"line\">                                @Override</span><br><span class=\"line\">                                protected void channelRead0(</span><br><span class=\"line\">                                    ChannelHandlerContext ctx, ByteBuf in)</span><br><span class=\"line\">                                    throws Exception &#123;</span><br><span class=\"line\">                                    System.out.println(&quot;Received data&quot;);</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;);</span><br><span class=\"line\">                        bootstrap.group(ctx.channel().eventLoop());</span><br><span class=\"line\">                        connectFuture = bootstrap.connect(</span><br><span class=\"line\">                            new InetSocketAddress(&quot;www.manning.com&quot;, 80));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    @Override</span><br><span class=\"line\">                    protected void channelRead0(</span><br><span class=\"line\">                        ChannelHandlerContext channelHandlerContext,</span><br><span class=\"line\">                            ByteBuf byteBuf) throws Exception &#123;</span><br><span class=\"line\">                        if (connectFuture.isDone()) &#123;</span><br><span class=\"line\">                            // do something with the data</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">        ChannelFuture future = bootstrap.bind(new InetSocketAddress(8080));</span><br><span class=\"line\">        future.addListener(new ChannelFutureListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void operationComplete(ChannelFuture channelFuture)</span><br><span class=\"line\">                throws Exception &#123;</span><br><span class=\"line\">                if (channelFuture.isSuccess()) &#123;</span><br><span class=\"line\">                    System.out.println(&quot;Server bound&quot;);</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    System.err.println(&quot;Bind attempt failed&quot;);</span><br><span class=\"line\">                    channelFuture.cause().printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>主要是无论什么时候都要考虑重用EventLoop</strong></p>\n<h3 id=\"在一个bootstrap中添加多个ChannelHandler\"><a href=\"#在一个bootstrap中添加多个ChannelHandler\" class=\"headerlink\" title=\"在一个bootstrap中添加多个ChannelHandler\"></a>在一个bootstrap中添加多个ChannelHandler</h3><p>上文所示主要是使用handler与childHandler中只能绑定一个ChannelHandler，如何绑定多个呢？</p>\n<p>答案是使用netty提供的一个ChannelInboundHandlerAdapter 的子类ChannelInitializer这个类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class ChannelInitializer&lt;C extends Channel&gt;</span><br><span class=\"line\">            extends ChannelInboundHandlerAdapter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        //使用这个方法</span><br><span class=\"line\">        protected abstract void initChannel(C ch) throws Exception;</span><br></pre></td></tr></table></figure></p>\n<p>当有channle绑定到EvnetLoop的时候，这个initChannel方法就会调用，然后在方法完成后，会将自己从ChannelPipeline中去除</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BootstrapWithInitializer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Listing 8.6 Bootstrapping and using ChannelInitializer</span><br><span class=\"line\">     * */</span><br><span class=\"line\">    public void bootstrap() throws InterruptedException &#123;</span><br><span class=\"line\">        ServerBootstrap bootstrap = new ServerBootstrap();</span><br><span class=\"line\">        bootstrap.group(new NioEventLoopGroup(), new NioEventLoopGroup())</span><br><span class=\"line\">            .channel(NioServerSocketChannel.class)</span><br><span class=\"line\">            .childHandler(new ChannelInitializerImpl());</span><br><span class=\"line\">        ChannelFuture future = bootstrap.bind(new InetSocketAddress(8080));</span><br><span class=\"line\">        future.sync();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    final class ChannelInitializerImpl extends ChannelInitializer&lt;Channel&gt; &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected void initChannel(Channel ch) throws Exception &#123;</span><br><span class=\"line\">            ChannelPipeline pipeline = ch.pipeline();</span><br><span class=\"line\">            pipeline.addLast(new HttpClientCodec());</span><br><span class=\"line\">            pipeline.addLast(new HttpObjectAggregator(Integer.MAX_VALUE));</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用netty-的ChannelOptions以及attributes\"><a href=\"#使用netty-的ChannelOptions以及attributes\" class=\"headerlink\" title=\"使用netty 的ChannelOptions以及attributes\"></a>使用netty 的ChannelOptions以及attributes</h3><p>手动配置每个channel是单调乏味的。我们可以使用option()方法对Bootstrap配置ChannelOptions，ChannelOptions提供了相关keep-alive、timeout以及buffer的设置等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BootstrapClientWithOptionsAndAttrs &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Listing 8.7 Using attributes</span><br><span class=\"line\">     * */</span><br><span class=\"line\">    public void bootstrap() &#123;</span><br><span class=\"line\">        final AttributeKey&lt;Integer&gt; id = AttributeKey.newInstance(&quot;ID&quot;);</span><br><span class=\"line\">        Bootstrap bootstrap = new Bootstrap();</span><br><span class=\"line\">        bootstrap.group(new NioEventLoopGroup())</span><br><span class=\"line\">            .channel(NioSocketChannel.class)</span><br><span class=\"line\">            .handler(</span><br><span class=\"line\">                new SimpleChannelInboundHandler&lt;ByteBuf&gt;() &#123;</span><br><span class=\"line\">                    @Override</span><br><span class=\"line\">                    public void channelRegistered(ChannelHandlerContext ctx)</span><br><span class=\"line\">                        throws Exception &#123;</span><br><span class=\"line\">                        Integer idValue = ctx.channel().attr(id).get();</span><br><span class=\"line\">                        // do something with the idValue</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    @Override</span><br><span class=\"line\">                    protected void channelRead0(</span><br><span class=\"line\">                        ChannelHandlerContext channelHandlerContext,</span><br><span class=\"line\">                        ByteBuf byteBuf) throws Exception &#123;</span><br><span class=\"line\">                        System.out.println(&quot;Received data&quot;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            );</span><br><span class=\"line\">        bootstrap.option(ChannelOption.SO_KEEPALIVE, true)</span><br><span class=\"line\">            .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 5000);</span><br><span class=\"line\">        bootstrap.attr(id, 123456);</span><br><span class=\"line\">        ChannelFuture future = bootstrap.connect(</span><br><span class=\"line\">            new InetSocketAddress(&quot;www.manning.com&quot;, 80));</span><br><span class=\"line\">        future.syncUninterruptibly();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"引导一个UDP的channels-DatagramChannels\"><a href=\"#引导一个UDP的channels-DatagramChannels\" class=\"headerlink\" title=\"引导一个UDP的channels  DatagramChannels\"></a>引导一个UDP的channels  DatagramChannels</h3><p>前面的channel例子都是基于Tcp的，但是netty也提供了UDP的实现，区别主要在于connnect以及bind</p>\n<p>···<br> public void bootstrap() {<br>        Bootstrap bootstrap = new Bootstrap();<br>        bootstrap.group(new OioEventLoopGroup()).channel(<br>            OioDatagramChannel.class).handler(<br>            new SimpleChannelInboundHandler<datagrampacket>() {<br>                @Override<br>                public void channelRead0(ChannelHandlerContext ctx,<br>                    DatagramPacket msg) throws Exception {<br>                    // Do something with the packet<br>                }<br>            }<br>        );<br>        ChannelFuture future = bootstrap.bind(new InetSocketAddress(0));<br>        future.addListener(new ChannelFutureListener() {<br>            @Override<br>            public void operationComplete(ChannelFuture channelFuture)<br>               throws Exception {<br>               if (channelFuture.isSuccess()) {<br>                   System.out.println(“Channel bound”);<br>               } else {<br>                   System.err.println(“Bind attempt failed”);<br>                   channelFuture.cause().printStackTrace();<br>               }<br>            }<br>        });<br>    }<br>}<br>···</datagrampacket></p>\n<h3 id=\"关闭\"><a href=\"#关闭\" class=\"headerlink\" title=\"关闭\"></a>关闭</h3><p>如何优雅的关闭</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EventLoopGroup group = new NioEventLoopGroup();</span><br><span class=\"line\">Bootstrap bootstrap = new Bootstrap();</span><br><span class=\"line\">bootstrap.group(group)</span><br><span class=\"line\">      .channel(NioSocketChannel.class);</span><br><span class=\"line\">...</span><br><span class=\"line\">Future&lt;?&gt; future = group.shutdownGracefully();</span><br><span class=\"line\">// block until the group has shutdown</span><br><span class=\"line\">future.syncUninterruptibly()</span><br></pre></td></tr></table></figure>\n<p>不建议：可选的，你可以使用channel.close() 确定关闭所有活跃的channel，然后再关闭EventLoop。</p>\n<p>但是在所有的例子中，记住先关闭EventLoop</p>"},{"title":"netty Unit testing","date":"2018-08-04T00:36:02.000Z","_content":"\n### 简介\n\n本章主要覆盖以下几方面，单元测试，EmbeddedChannel的简介，使用EmbeddedChannel测试ChannelHandlers\n\nChannelHandlers是netty应用模块中最重要的一部分，因此彻底的测试在开发过程中也是标准的一部分，很多最好的事件表名你的测试并不能证明你的实现是正确的，但是使用Unit Testing 总是很容易隔离问题。\n\n<!--more-->\n\n### EmbeddedChannel 概述\nNetty中提供了一个叫做embedded transport 为了测试ChannelHandlers，这个具有传输特性的channel实现，EmbeddedChannel，提供一种简单的方式让事件通过整个Pipeline\n\n这种注意是很直接的，你可以用EmbeddedChannel写入站与出站的数据，然后检测通过ChannelPipeline的数据是否符合预期\n\n![netty-9](/images/netty_part1/2018-8-4-1.png)\n\n以下为具体的流程图\n\n![netty-9](/images/netty_part1/2018-8-4-2.png)\n\n入站数据由ChannelInboundHandlers 处理并且表达数据是从远端处理，出站数据是由ChannelOutboundHandlers 并且表示数据是由远端写的，取决于你所需要测试的channleHandler\n\n### 使用EmbeddedChannel测试ChannelHandlers\n\n#### 测试入站数据\n以下为表示了一个简单的ByteToMessageDecoder的实现，给与充足的数据，它将提供一个固定的大小，如果没有足够的数据去读，它将会等待下个数据块并且再次检查是否有一个固定大小的对象生成\n\n![netty-9](/images/netty_part1/2018-8-4-3.png)\n\n你可以看到上面这张图右边的部分，特别是解码生产一个固定大小的对象，因此它可能需要超过一个时间提供足够的字节生产对象。最终每一个对象都将通过下一个ChannelHandler直至通过整个链条\n\n```\npublic class FixedLengthFrameDecoder extends ByteToMessageDecoder {\n    private final int frameLength;\n\n    public FixedLengthFrameDecoder(int frameLength) {\n        if (frameLength <= 0) {\n            throw new IllegalArgumentException(\n                \"frameLength must be a positive integer: \" + frameLength);\n        }\n        this.frameLength = frameLength;\n    }\n\n    @Override\n    protected void decode(ChannelHandlerContext ctx, ByteBuf in,\n        List<Object> out) throws Exception {\n        while (in.readableBytes() >= frameLength) {\n            ByteBuf buf = in.readBytes(frameLength);\n            out.add(buf);\n        }\n    }\n}\n```\n以下为测试代码\n\n```\npublic class FixedLengthFrameDecoderTest {\n    @Test\n    public void testFramesDecoded() {\n        ByteBuf buf = Unpooled.buffer();\n        for (int i = 0; i < 9; i++) {\n            buf.writeByte(i);\n        }\n        ByteBuf input = buf.duplicate();\n        EmbeddedChannel channel = new EmbeddedChannel(\n            new FixedLengthFrameDecoder(3));\n        // write bytes\n        assertTrue(channel.writeInbound(input.retain()));\n        assertTrue(channel.finish());\n\n        // read messages\n        ByteBuf read = (ByteBuf) channel.readInbound();\n        assertEquals(buf.readSlice(3), read);\n        read.release();\n\n        read = (ByteBuf) channel.readInbound();\n        assertEquals(buf.readSlice(3), read);\n        read.release();\n\n        read = (ByteBuf) channel.readInbound();\n        assertEquals(buf.readSlice(3), read);\n        read.release();\n\n        assertNull(channel.readInbound());\n        buf.release();\n    }\n\n    @Test\n    public void testFramesDecoded2() {\n        ByteBuf buf = Unpooled.buffer();\n        for (int i = 0; i < 9; i++) {\n            buf.writeByte(i);\n        }\n        ByteBuf input = buf.duplicate();\n\n        EmbeddedChannel channel = new EmbeddedChannel(\n            new FixedLengthFrameDecoder(3));\n        assertFalse(channel.writeInbound(input.readBytes(2)));\n        assertTrue(channel.writeInbound(input.readBytes(7)));\n\n        assertTrue(channel.finish());\n        ByteBuf read = (ByteBuf) channel.readInbound();\n        assertEquals(buf.readSlice(3), read);\n        read.release();\n\n        read = (ByteBuf) channel.readInbound();\n        assertEquals(buf.readSlice(3), read);\n        read.release();\n\n        read = (ByteBuf) channel.readInbound();\n        assertEquals(buf.readSlice(3), read);\n        read.release();\n\n        assertNull(channel.readInbound());\n        buf.release();\n    }\n}\n```\n\n\n#### 测试出站数据\n以下主要以一个MessageToMessage的编码器为例,将负整数转换为整整数\n![netty-9](/images/netty_part1/2018-8-4-4.png)\n\n```\npublic class AbsIntegerEncoder extends\n    MessageToMessageEncoder<ByteBuf> {\n    @Override\n    protected void encode(ChannelHandlerContext channelHandlerContext,\n        ByteBuf in, List<Object> out) throws Exception {\n        while (in.readableBytes() >= 4) {\n            int value = Math.abs(in.readInt());\n            out.add(value);\n        }\n    }\n}\n```\n\n1.写负整数（四个字节的数据到ByteBuf）\n2.创建一个EmbeddedChannel并且分配了一个Encoder\n3.调用writeOutbound 写入数据ByteBuf\n4.标记channel已经写入完成\n5.读取所有的出站数据并且确认是否已经转换为正整数\n\n```\npublic class AbsIntegerEncoderTest {\n    @Test\n    public void testEncoded() {\n        ByteBuf buf = Unpooled.buffer();\n        for (int i = 1; i < 10; i++) {\n            buf.writeInt(i * -1);\n        }\n\n        EmbeddedChannel channel = new EmbeddedChannel(\n            new AbsIntegerEncoder());\n        assertTrue(channel.writeOutbound(buf));\n        assertTrue(channel.finish());\n//\n//        // read bytes\n//        for (int i = 1; i < 10; i++) {\n//            assertEquals(i, channel.readOutbound());\n//        }\n        assertNull(channel.readOutbound());\n    }\n}\n```\n\n### 测试异常处理\n\n主要测试当入站数据的大小超过指定长度，会抛出异常\n\n```\npublic class FrameChunkDecoder extends ByteToMessageDecoder {\n    private final int maxFrameSize;\n\n    public FrameChunkDecoder(int maxFrameSize) {\n        this.maxFrameSize = maxFrameSize;\n    }\n\n    @Override\n    protected void decode(ChannelHandlerContext ctx, ByteBuf in,\n        List<Object> out)\n        throws Exception {\n        int readableBytes = in.readableBytes();\n        if (readableBytes > maxFrameSize) {\n            // discard the bytes\n            in.clear();\n            throw new TooLongFrameException();\n        }\n        ByteBuf buf = in.readBytes(readableBytes);\n        out.add(buf);\n    }\n}\n```\n\n测试\n\n```\npublic class FrameChunkDecoderTest {\n    @Test\n    public void testFramesDecoded() {\n        ByteBuf buf = Unpooled.buffer();\n        for (int i = 0; i < 9; i++) {\n            buf.writeByte(i);\n        }\n        ByteBuf input = buf.duplicate();\n\n        EmbeddedChannel channel = new EmbeddedChannel(\n            new FrameChunkDecoder(3));\n\n        assertTrue(channel.writeInbound(input.readBytes(2)));\n        try {\n            channel.writeInbound(input.readBytes(4));\n            Assert.fail();\n        } catch (TooLongFrameException e) {\n            // expected exception\n        }\n        assertTrue(channel.writeInbound(input.readBytes(3)));\n        assertTrue(channel.finish());\n\n        // Read frames\n        ByteBuf read = (ByteBuf) channel.readInbound();\n        assertEquals(buf.readSlice(2), read);\n        read.release();\n\n        read = (ByteBuf) channel.readInbound();\n        assertEquals(buf.skipBytes(4).readSlice(3), read);\n        read.release();\n        buf.release();\n    }\n}\n```\n\n这部分主要使用try...catch来测试是否有异常被抛出，因为这个是运行时异常，这个很容易测试是否一个异常在处理数据的过程中被捕捉并且处理的。\n\n### 总结\n以一个侵入少的例如JUnit单元测试是一个极度有效的方式保证代码的正确性并且增强可维护性。在这章，你可以学到netty提供的工具怎么测试您自己的ChannelHandler\n\n在下一章您将聚焦于怎么用netty写一个真实的应用。我们将不会表示更多的测试用例，希望你自己保持思考我们想表达的测试方法的重要性。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/chapter9-2018-8-4.md","raw":"---\ntitle: netty Unit testing\ndate: 2018-08-04 08:36:02\ntags: netty\ncategories: [\"netty\",\"Unit testing\"]\n---\n\n### 简介\n\n本章主要覆盖以下几方面，单元测试，EmbeddedChannel的简介，使用EmbeddedChannel测试ChannelHandlers\n\nChannelHandlers是netty应用模块中最重要的一部分，因此彻底的测试在开发过程中也是标准的一部分，很多最好的事件表名你的测试并不能证明你的实现是正确的，但是使用Unit Testing 总是很容易隔离问题。\n\n<!--more-->\n\n### EmbeddedChannel 概述\nNetty中提供了一个叫做embedded transport 为了测试ChannelHandlers，这个具有传输特性的channel实现，EmbeddedChannel，提供一种简单的方式让事件通过整个Pipeline\n\n这种注意是很直接的，你可以用EmbeddedChannel写入站与出站的数据，然后检测通过ChannelPipeline的数据是否符合预期\n\n![netty-9](/images/netty_part1/2018-8-4-1.png)\n\n以下为具体的流程图\n\n![netty-9](/images/netty_part1/2018-8-4-2.png)\n\n入站数据由ChannelInboundHandlers 处理并且表达数据是从远端处理，出站数据是由ChannelOutboundHandlers 并且表示数据是由远端写的，取决于你所需要测试的channleHandler\n\n### 使用EmbeddedChannel测试ChannelHandlers\n\n#### 测试入站数据\n以下为表示了一个简单的ByteToMessageDecoder的实现，给与充足的数据，它将提供一个固定的大小，如果没有足够的数据去读，它将会等待下个数据块并且再次检查是否有一个固定大小的对象生成\n\n![netty-9](/images/netty_part1/2018-8-4-3.png)\n\n你可以看到上面这张图右边的部分，特别是解码生产一个固定大小的对象，因此它可能需要超过一个时间提供足够的字节生产对象。最终每一个对象都将通过下一个ChannelHandler直至通过整个链条\n\n```\npublic class FixedLengthFrameDecoder extends ByteToMessageDecoder {\n    private final int frameLength;\n\n    public FixedLengthFrameDecoder(int frameLength) {\n        if (frameLength <= 0) {\n            throw new IllegalArgumentException(\n                \"frameLength must be a positive integer: \" + frameLength);\n        }\n        this.frameLength = frameLength;\n    }\n\n    @Override\n    protected void decode(ChannelHandlerContext ctx, ByteBuf in,\n        List<Object> out) throws Exception {\n        while (in.readableBytes() >= frameLength) {\n            ByteBuf buf = in.readBytes(frameLength);\n            out.add(buf);\n        }\n    }\n}\n```\n以下为测试代码\n\n```\npublic class FixedLengthFrameDecoderTest {\n    @Test\n    public void testFramesDecoded() {\n        ByteBuf buf = Unpooled.buffer();\n        for (int i = 0; i < 9; i++) {\n            buf.writeByte(i);\n        }\n        ByteBuf input = buf.duplicate();\n        EmbeddedChannel channel = new EmbeddedChannel(\n            new FixedLengthFrameDecoder(3));\n        // write bytes\n        assertTrue(channel.writeInbound(input.retain()));\n        assertTrue(channel.finish());\n\n        // read messages\n        ByteBuf read = (ByteBuf) channel.readInbound();\n        assertEquals(buf.readSlice(3), read);\n        read.release();\n\n        read = (ByteBuf) channel.readInbound();\n        assertEquals(buf.readSlice(3), read);\n        read.release();\n\n        read = (ByteBuf) channel.readInbound();\n        assertEquals(buf.readSlice(3), read);\n        read.release();\n\n        assertNull(channel.readInbound());\n        buf.release();\n    }\n\n    @Test\n    public void testFramesDecoded2() {\n        ByteBuf buf = Unpooled.buffer();\n        for (int i = 0; i < 9; i++) {\n            buf.writeByte(i);\n        }\n        ByteBuf input = buf.duplicate();\n\n        EmbeddedChannel channel = new EmbeddedChannel(\n            new FixedLengthFrameDecoder(3));\n        assertFalse(channel.writeInbound(input.readBytes(2)));\n        assertTrue(channel.writeInbound(input.readBytes(7)));\n\n        assertTrue(channel.finish());\n        ByteBuf read = (ByteBuf) channel.readInbound();\n        assertEquals(buf.readSlice(3), read);\n        read.release();\n\n        read = (ByteBuf) channel.readInbound();\n        assertEquals(buf.readSlice(3), read);\n        read.release();\n\n        read = (ByteBuf) channel.readInbound();\n        assertEquals(buf.readSlice(3), read);\n        read.release();\n\n        assertNull(channel.readInbound());\n        buf.release();\n    }\n}\n```\n\n\n#### 测试出站数据\n以下主要以一个MessageToMessage的编码器为例,将负整数转换为整整数\n![netty-9](/images/netty_part1/2018-8-4-4.png)\n\n```\npublic class AbsIntegerEncoder extends\n    MessageToMessageEncoder<ByteBuf> {\n    @Override\n    protected void encode(ChannelHandlerContext channelHandlerContext,\n        ByteBuf in, List<Object> out) throws Exception {\n        while (in.readableBytes() >= 4) {\n            int value = Math.abs(in.readInt());\n            out.add(value);\n        }\n    }\n}\n```\n\n1.写负整数（四个字节的数据到ByteBuf）\n2.创建一个EmbeddedChannel并且分配了一个Encoder\n3.调用writeOutbound 写入数据ByteBuf\n4.标记channel已经写入完成\n5.读取所有的出站数据并且确认是否已经转换为正整数\n\n```\npublic class AbsIntegerEncoderTest {\n    @Test\n    public void testEncoded() {\n        ByteBuf buf = Unpooled.buffer();\n        for (int i = 1; i < 10; i++) {\n            buf.writeInt(i * -1);\n        }\n\n        EmbeddedChannel channel = new EmbeddedChannel(\n            new AbsIntegerEncoder());\n        assertTrue(channel.writeOutbound(buf));\n        assertTrue(channel.finish());\n//\n//        // read bytes\n//        for (int i = 1; i < 10; i++) {\n//            assertEquals(i, channel.readOutbound());\n//        }\n        assertNull(channel.readOutbound());\n    }\n}\n```\n\n### 测试异常处理\n\n主要测试当入站数据的大小超过指定长度，会抛出异常\n\n```\npublic class FrameChunkDecoder extends ByteToMessageDecoder {\n    private final int maxFrameSize;\n\n    public FrameChunkDecoder(int maxFrameSize) {\n        this.maxFrameSize = maxFrameSize;\n    }\n\n    @Override\n    protected void decode(ChannelHandlerContext ctx, ByteBuf in,\n        List<Object> out)\n        throws Exception {\n        int readableBytes = in.readableBytes();\n        if (readableBytes > maxFrameSize) {\n            // discard the bytes\n            in.clear();\n            throw new TooLongFrameException();\n        }\n        ByteBuf buf = in.readBytes(readableBytes);\n        out.add(buf);\n    }\n}\n```\n\n测试\n\n```\npublic class FrameChunkDecoderTest {\n    @Test\n    public void testFramesDecoded() {\n        ByteBuf buf = Unpooled.buffer();\n        for (int i = 0; i < 9; i++) {\n            buf.writeByte(i);\n        }\n        ByteBuf input = buf.duplicate();\n\n        EmbeddedChannel channel = new EmbeddedChannel(\n            new FrameChunkDecoder(3));\n\n        assertTrue(channel.writeInbound(input.readBytes(2)));\n        try {\n            channel.writeInbound(input.readBytes(4));\n            Assert.fail();\n        } catch (TooLongFrameException e) {\n            // expected exception\n        }\n        assertTrue(channel.writeInbound(input.readBytes(3)));\n        assertTrue(channel.finish());\n\n        // Read frames\n        ByteBuf read = (ByteBuf) channel.readInbound();\n        assertEquals(buf.readSlice(2), read);\n        read.release();\n\n        read = (ByteBuf) channel.readInbound();\n        assertEquals(buf.skipBytes(4).readSlice(3), read);\n        read.release();\n        buf.release();\n    }\n}\n```\n\n这部分主要使用try...catch来测试是否有异常被抛出，因为这个是运行时异常，这个很容易测试是否一个异常在处理数据的过程中被捕捉并且处理的。\n\n### 总结\n以一个侵入少的例如JUnit单元测试是一个极度有效的方式保证代码的正确性并且增强可维护性。在这章，你可以学到netty提供的工具怎么测试您自己的ChannelHandler\n\n在下一章您将聚焦于怎么用netty写一个真实的应用。我们将不会表示更多的测试用例，希望你自己保持思考我们想表达的测试方法的重要性。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"chapter9-2018-8-4","published":1,"updated":"2019-09-23T06:59:34.255Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0w29rk7000juup2x6j9zrr6","content":"<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>本章主要覆盖以下几方面，单元测试，EmbeddedChannel的简介，使用EmbeddedChannel测试ChannelHandlers</p>\n<p>ChannelHandlers是netty应用模块中最重要的一部分，因此彻底的测试在开发过程中也是标准的一部分，很多最好的事件表名你的测试并不能证明你的实现是正确的，但是使用Unit Testing 总是很容易隔离问题。</p>\n<a id=\"more\"></a>\n<h3 id=\"EmbeddedChannel-概述\"><a href=\"#EmbeddedChannel-概述\" class=\"headerlink\" title=\"EmbeddedChannel 概述\"></a>EmbeddedChannel 概述</h3><p>Netty中提供了一个叫做embedded transport 为了测试ChannelHandlers，这个具有传输特性的channel实现，EmbeddedChannel，提供一种简单的方式让事件通过整个Pipeline</p>\n<p>这种注意是很直接的，你可以用EmbeddedChannel写入站与出站的数据，然后检测通过ChannelPipeline的数据是否符合预期</p>\n<p><img src=\"/images/netty_part1/2018-8-4-1.png\" alt=\"netty-9\"></p>\n<p>以下为具体的流程图</p>\n<p><img src=\"/images/netty_part1/2018-8-4-2.png\" alt=\"netty-9\"></p>\n<p>入站数据由ChannelInboundHandlers 处理并且表达数据是从远端处理，出站数据是由ChannelOutboundHandlers 并且表示数据是由远端写的，取决于你所需要测试的channleHandler</p>\n<h3 id=\"使用EmbeddedChannel测试ChannelHandlers\"><a href=\"#使用EmbeddedChannel测试ChannelHandlers\" class=\"headerlink\" title=\"使用EmbeddedChannel测试ChannelHandlers\"></a>使用EmbeddedChannel测试ChannelHandlers</h3><h4 id=\"测试入站数据\"><a href=\"#测试入站数据\" class=\"headerlink\" title=\"测试入站数据\"></a>测试入站数据</h4><p>以下为表示了一个简单的ByteToMessageDecoder的实现，给与充足的数据，它将提供一个固定的大小，如果没有足够的数据去读，它将会等待下个数据块并且再次检查是否有一个固定大小的对象生成</p>\n<p><img src=\"/images/netty_part1/2018-8-4-3.png\" alt=\"netty-9\"></p>\n<p>你可以看到上面这张图右边的部分，特别是解码生产一个固定大小的对象，因此它可能需要超过一个时间提供足够的字节生产对象。最终每一个对象都将通过下一个ChannelHandler直至通过整个链条</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class FixedLengthFrameDecoder extends ByteToMessageDecoder &#123;</span><br><span class=\"line\">    private final int frameLength;</span><br><span class=\"line\"></span><br><span class=\"line\">    public FixedLengthFrameDecoder(int frameLength) &#123;</span><br><span class=\"line\">        if (frameLength &lt;= 0) &#123;</span><br><span class=\"line\">            throw new IllegalArgumentException(</span><br><span class=\"line\">                &quot;frameLength must be a positive integer: &quot; + frameLength);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.frameLength = frameLength;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void decode(ChannelHandlerContext ctx, ByteBuf in,</span><br><span class=\"line\">        List&lt;Object&gt; out) throws Exception &#123;</span><br><span class=\"line\">        while (in.readableBytes() &gt;= frameLength) &#123;</span><br><span class=\"line\">            ByteBuf buf = in.readBytes(frameLength);</span><br><span class=\"line\">            out.add(buf);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以下为测试代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class FixedLengthFrameDecoderTest &#123;</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testFramesDecoded() &#123;</span><br><span class=\"line\">        ByteBuf buf = Unpooled.buffer();</span><br><span class=\"line\">        for (int i = 0; i &lt; 9; i++) &#123;</span><br><span class=\"line\">            buf.writeByte(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ByteBuf input = buf.duplicate();</span><br><span class=\"line\">        EmbeddedChannel channel = new EmbeddedChannel(</span><br><span class=\"line\">            new FixedLengthFrameDecoder(3));</span><br><span class=\"line\">        // write bytes</span><br><span class=\"line\">        assertTrue(channel.writeInbound(input.retain()));</span><br><span class=\"line\">        assertTrue(channel.finish());</span><br><span class=\"line\"></span><br><span class=\"line\">        // read messages</span><br><span class=\"line\">        ByteBuf read = (ByteBuf) channel.readInbound();</span><br><span class=\"line\">        assertEquals(buf.readSlice(3), read);</span><br><span class=\"line\">        read.release();</span><br><span class=\"line\"></span><br><span class=\"line\">        read = (ByteBuf) channel.readInbound();</span><br><span class=\"line\">        assertEquals(buf.readSlice(3), read);</span><br><span class=\"line\">        read.release();</span><br><span class=\"line\"></span><br><span class=\"line\">        read = (ByteBuf) channel.readInbound();</span><br><span class=\"line\">        assertEquals(buf.readSlice(3), read);</span><br><span class=\"line\">        read.release();</span><br><span class=\"line\"></span><br><span class=\"line\">        assertNull(channel.readInbound());</span><br><span class=\"line\">        buf.release();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testFramesDecoded2() &#123;</span><br><span class=\"line\">        ByteBuf buf = Unpooled.buffer();</span><br><span class=\"line\">        for (int i = 0; i &lt; 9; i++) &#123;</span><br><span class=\"line\">            buf.writeByte(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ByteBuf input = buf.duplicate();</span><br><span class=\"line\"></span><br><span class=\"line\">        EmbeddedChannel channel = new EmbeddedChannel(</span><br><span class=\"line\">            new FixedLengthFrameDecoder(3));</span><br><span class=\"line\">        assertFalse(channel.writeInbound(input.readBytes(2)));</span><br><span class=\"line\">        assertTrue(channel.writeInbound(input.readBytes(7)));</span><br><span class=\"line\"></span><br><span class=\"line\">        assertTrue(channel.finish());</span><br><span class=\"line\">        ByteBuf read = (ByteBuf) channel.readInbound();</span><br><span class=\"line\">        assertEquals(buf.readSlice(3), read);</span><br><span class=\"line\">        read.release();</span><br><span class=\"line\"></span><br><span class=\"line\">        read = (ByteBuf) channel.readInbound();</span><br><span class=\"line\">        assertEquals(buf.readSlice(3), read);</span><br><span class=\"line\">        read.release();</span><br><span class=\"line\"></span><br><span class=\"line\">        read = (ByteBuf) channel.readInbound();</span><br><span class=\"line\">        assertEquals(buf.readSlice(3), read);</span><br><span class=\"line\">        read.release();</span><br><span class=\"line\"></span><br><span class=\"line\">        assertNull(channel.readInbound());</span><br><span class=\"line\">        buf.release();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试出站数据\"><a href=\"#测试出站数据\" class=\"headerlink\" title=\"测试出站数据\"></a>测试出站数据</h4><p>以下主要以一个MessageToMessage的编码器为例,将负整数转换为整整数<br><img src=\"/images/netty_part1/2018-8-4-4.png\" alt=\"netty-9\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class AbsIntegerEncoder extends</span><br><span class=\"line\">    MessageToMessageEncoder&lt;ByteBuf&gt; &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void encode(ChannelHandlerContext channelHandlerContext,</span><br><span class=\"line\">        ByteBuf in, List&lt;Object&gt; out) throws Exception &#123;</span><br><span class=\"line\">        while (in.readableBytes() &gt;= 4) &#123;</span><br><span class=\"line\">            int value = Math.abs(in.readInt());</span><br><span class=\"line\">            out.add(value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>1.写负整数（四个字节的数据到ByteBuf）<br>2.创建一个EmbeddedChannel并且分配了一个Encoder<br>3.调用writeOutbound 写入数据ByteBuf<br>4.标记channel已经写入完成<br>5.读取所有的出站数据并且确认是否已经转换为正整数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class AbsIntegerEncoderTest &#123;</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testEncoded() &#123;</span><br><span class=\"line\">        ByteBuf buf = Unpooled.buffer();</span><br><span class=\"line\">        for (int i = 1; i &lt; 10; i++) &#123;</span><br><span class=\"line\">            buf.writeInt(i * -1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        EmbeddedChannel channel = new EmbeddedChannel(</span><br><span class=\"line\">            new AbsIntegerEncoder());</span><br><span class=\"line\">        assertTrue(channel.writeOutbound(buf));</span><br><span class=\"line\">        assertTrue(channel.finish());</span><br><span class=\"line\">//</span><br><span class=\"line\">//        // read bytes</span><br><span class=\"line\">//        for (int i = 1; i &lt; 10; i++) &#123;</span><br><span class=\"line\">//            assertEquals(i, channel.readOutbound());</span><br><span class=\"line\">//        &#125;</span><br><span class=\"line\">        assertNull(channel.readOutbound());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试异常处理\"><a href=\"#测试异常处理\" class=\"headerlink\" title=\"测试异常处理\"></a>测试异常处理</h3><p>主要测试当入站数据的大小超过指定长度，会抛出异常</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class FrameChunkDecoder extends ByteToMessageDecoder &#123;</span><br><span class=\"line\">    private final int maxFrameSize;</span><br><span class=\"line\"></span><br><span class=\"line\">    public FrameChunkDecoder(int maxFrameSize) &#123;</span><br><span class=\"line\">        this.maxFrameSize = maxFrameSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void decode(ChannelHandlerContext ctx, ByteBuf in,</span><br><span class=\"line\">        List&lt;Object&gt; out)</span><br><span class=\"line\">        throws Exception &#123;</span><br><span class=\"line\">        int readableBytes = in.readableBytes();</span><br><span class=\"line\">        if (readableBytes &gt; maxFrameSize) &#123;</span><br><span class=\"line\">            // discard the bytes</span><br><span class=\"line\">            in.clear();</span><br><span class=\"line\">            throw new TooLongFrameException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ByteBuf buf = in.readBytes(readableBytes);</span><br><span class=\"line\">        out.add(buf);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class FrameChunkDecoderTest &#123;</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testFramesDecoded() &#123;</span><br><span class=\"line\">        ByteBuf buf = Unpooled.buffer();</span><br><span class=\"line\">        for (int i = 0; i &lt; 9; i++) &#123;</span><br><span class=\"line\">            buf.writeByte(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ByteBuf input = buf.duplicate();</span><br><span class=\"line\"></span><br><span class=\"line\">        EmbeddedChannel channel = new EmbeddedChannel(</span><br><span class=\"line\">            new FrameChunkDecoder(3));</span><br><span class=\"line\"></span><br><span class=\"line\">        assertTrue(channel.writeInbound(input.readBytes(2)));</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            channel.writeInbound(input.readBytes(4));</span><br><span class=\"line\">            Assert.fail();</span><br><span class=\"line\">        &#125; catch (TooLongFrameException e) &#123;</span><br><span class=\"line\">            // expected exception</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        assertTrue(channel.writeInbound(input.readBytes(3)));</span><br><span class=\"line\">        assertTrue(channel.finish());</span><br><span class=\"line\"></span><br><span class=\"line\">        // Read frames</span><br><span class=\"line\">        ByteBuf read = (ByteBuf) channel.readInbound();</span><br><span class=\"line\">        assertEquals(buf.readSlice(2), read);</span><br><span class=\"line\">        read.release();</span><br><span class=\"line\"></span><br><span class=\"line\">        read = (ByteBuf) channel.readInbound();</span><br><span class=\"line\">        assertEquals(buf.skipBytes(4).readSlice(3), read);</span><br><span class=\"line\">        read.release();</span><br><span class=\"line\">        buf.release();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这部分主要使用try…catch来测试是否有异常被抛出，因为这个是运行时异常，这个很容易测试是否一个异常在处理数据的过程中被捕捉并且处理的。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>以一个侵入少的例如JUnit单元测试是一个极度有效的方式保证代码的正确性并且增强可维护性。在这章，你可以学到netty提供的工具怎么测试您自己的ChannelHandler</p>\n<p>在下一章您将聚焦于怎么用netty写一个真实的应用。我们将不会表示更多的测试用例，希望你自己保持思考我们想表达的测试方法的重要性。</p>\n","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>本章主要覆盖以下几方面，单元测试，EmbeddedChannel的简介，使用EmbeddedChannel测试ChannelHandlers</p>\n<p>ChannelHandlers是netty应用模块中最重要的一部分，因此彻底的测试在开发过程中也是标准的一部分，很多最好的事件表名你的测试并不能证明你的实现是正确的，但是使用Unit Testing 总是很容易隔离问题。</p>","more":"<h3 id=\"EmbeddedChannel-概述\"><a href=\"#EmbeddedChannel-概述\" class=\"headerlink\" title=\"EmbeddedChannel 概述\"></a>EmbeddedChannel 概述</h3><p>Netty中提供了一个叫做embedded transport 为了测试ChannelHandlers，这个具有传输特性的channel实现，EmbeddedChannel，提供一种简单的方式让事件通过整个Pipeline</p>\n<p>这种注意是很直接的，你可以用EmbeddedChannel写入站与出站的数据，然后检测通过ChannelPipeline的数据是否符合预期</p>\n<p><img src=\"/images/netty_part1/2018-8-4-1.png\" alt=\"netty-9\"></p>\n<p>以下为具体的流程图</p>\n<p><img src=\"/images/netty_part1/2018-8-4-2.png\" alt=\"netty-9\"></p>\n<p>入站数据由ChannelInboundHandlers 处理并且表达数据是从远端处理，出站数据是由ChannelOutboundHandlers 并且表示数据是由远端写的，取决于你所需要测试的channleHandler</p>\n<h3 id=\"使用EmbeddedChannel测试ChannelHandlers\"><a href=\"#使用EmbeddedChannel测试ChannelHandlers\" class=\"headerlink\" title=\"使用EmbeddedChannel测试ChannelHandlers\"></a>使用EmbeddedChannel测试ChannelHandlers</h3><h4 id=\"测试入站数据\"><a href=\"#测试入站数据\" class=\"headerlink\" title=\"测试入站数据\"></a>测试入站数据</h4><p>以下为表示了一个简单的ByteToMessageDecoder的实现，给与充足的数据，它将提供一个固定的大小，如果没有足够的数据去读，它将会等待下个数据块并且再次检查是否有一个固定大小的对象生成</p>\n<p><img src=\"/images/netty_part1/2018-8-4-3.png\" alt=\"netty-9\"></p>\n<p>你可以看到上面这张图右边的部分，特别是解码生产一个固定大小的对象，因此它可能需要超过一个时间提供足够的字节生产对象。最终每一个对象都将通过下一个ChannelHandler直至通过整个链条</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class FixedLengthFrameDecoder extends ByteToMessageDecoder &#123;</span><br><span class=\"line\">    private final int frameLength;</span><br><span class=\"line\"></span><br><span class=\"line\">    public FixedLengthFrameDecoder(int frameLength) &#123;</span><br><span class=\"line\">        if (frameLength &lt;= 0) &#123;</span><br><span class=\"line\">            throw new IllegalArgumentException(</span><br><span class=\"line\">                &quot;frameLength must be a positive integer: &quot; + frameLength);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.frameLength = frameLength;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void decode(ChannelHandlerContext ctx, ByteBuf in,</span><br><span class=\"line\">        List&lt;Object&gt; out) throws Exception &#123;</span><br><span class=\"line\">        while (in.readableBytes() &gt;= frameLength) &#123;</span><br><span class=\"line\">            ByteBuf buf = in.readBytes(frameLength);</span><br><span class=\"line\">            out.add(buf);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以下为测试代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class FixedLengthFrameDecoderTest &#123;</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testFramesDecoded() &#123;</span><br><span class=\"line\">        ByteBuf buf = Unpooled.buffer();</span><br><span class=\"line\">        for (int i = 0; i &lt; 9; i++) &#123;</span><br><span class=\"line\">            buf.writeByte(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ByteBuf input = buf.duplicate();</span><br><span class=\"line\">        EmbeddedChannel channel = new EmbeddedChannel(</span><br><span class=\"line\">            new FixedLengthFrameDecoder(3));</span><br><span class=\"line\">        // write bytes</span><br><span class=\"line\">        assertTrue(channel.writeInbound(input.retain()));</span><br><span class=\"line\">        assertTrue(channel.finish());</span><br><span class=\"line\"></span><br><span class=\"line\">        // read messages</span><br><span class=\"line\">        ByteBuf read = (ByteBuf) channel.readInbound();</span><br><span class=\"line\">        assertEquals(buf.readSlice(3), read);</span><br><span class=\"line\">        read.release();</span><br><span class=\"line\"></span><br><span class=\"line\">        read = (ByteBuf) channel.readInbound();</span><br><span class=\"line\">        assertEquals(buf.readSlice(3), read);</span><br><span class=\"line\">        read.release();</span><br><span class=\"line\"></span><br><span class=\"line\">        read = (ByteBuf) channel.readInbound();</span><br><span class=\"line\">        assertEquals(buf.readSlice(3), read);</span><br><span class=\"line\">        read.release();</span><br><span class=\"line\"></span><br><span class=\"line\">        assertNull(channel.readInbound());</span><br><span class=\"line\">        buf.release();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testFramesDecoded2() &#123;</span><br><span class=\"line\">        ByteBuf buf = Unpooled.buffer();</span><br><span class=\"line\">        for (int i = 0; i &lt; 9; i++) &#123;</span><br><span class=\"line\">            buf.writeByte(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ByteBuf input = buf.duplicate();</span><br><span class=\"line\"></span><br><span class=\"line\">        EmbeddedChannel channel = new EmbeddedChannel(</span><br><span class=\"line\">            new FixedLengthFrameDecoder(3));</span><br><span class=\"line\">        assertFalse(channel.writeInbound(input.readBytes(2)));</span><br><span class=\"line\">        assertTrue(channel.writeInbound(input.readBytes(7)));</span><br><span class=\"line\"></span><br><span class=\"line\">        assertTrue(channel.finish());</span><br><span class=\"line\">        ByteBuf read = (ByteBuf) channel.readInbound();</span><br><span class=\"line\">        assertEquals(buf.readSlice(3), read);</span><br><span class=\"line\">        read.release();</span><br><span class=\"line\"></span><br><span class=\"line\">        read = (ByteBuf) channel.readInbound();</span><br><span class=\"line\">        assertEquals(buf.readSlice(3), read);</span><br><span class=\"line\">        read.release();</span><br><span class=\"line\"></span><br><span class=\"line\">        read = (ByteBuf) channel.readInbound();</span><br><span class=\"line\">        assertEquals(buf.readSlice(3), read);</span><br><span class=\"line\">        read.release();</span><br><span class=\"line\"></span><br><span class=\"line\">        assertNull(channel.readInbound());</span><br><span class=\"line\">        buf.release();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试出站数据\"><a href=\"#测试出站数据\" class=\"headerlink\" title=\"测试出站数据\"></a>测试出站数据</h4><p>以下主要以一个MessageToMessage的编码器为例,将负整数转换为整整数<br><img src=\"/images/netty_part1/2018-8-4-4.png\" alt=\"netty-9\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class AbsIntegerEncoder extends</span><br><span class=\"line\">    MessageToMessageEncoder&lt;ByteBuf&gt; &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void encode(ChannelHandlerContext channelHandlerContext,</span><br><span class=\"line\">        ByteBuf in, List&lt;Object&gt; out) throws Exception &#123;</span><br><span class=\"line\">        while (in.readableBytes() &gt;= 4) &#123;</span><br><span class=\"line\">            int value = Math.abs(in.readInt());</span><br><span class=\"line\">            out.add(value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>1.写负整数（四个字节的数据到ByteBuf）<br>2.创建一个EmbeddedChannel并且分配了一个Encoder<br>3.调用writeOutbound 写入数据ByteBuf<br>4.标记channel已经写入完成<br>5.读取所有的出站数据并且确认是否已经转换为正整数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class AbsIntegerEncoderTest &#123;</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testEncoded() &#123;</span><br><span class=\"line\">        ByteBuf buf = Unpooled.buffer();</span><br><span class=\"line\">        for (int i = 1; i &lt; 10; i++) &#123;</span><br><span class=\"line\">            buf.writeInt(i * -1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        EmbeddedChannel channel = new EmbeddedChannel(</span><br><span class=\"line\">            new AbsIntegerEncoder());</span><br><span class=\"line\">        assertTrue(channel.writeOutbound(buf));</span><br><span class=\"line\">        assertTrue(channel.finish());</span><br><span class=\"line\">//</span><br><span class=\"line\">//        // read bytes</span><br><span class=\"line\">//        for (int i = 1; i &lt; 10; i++) &#123;</span><br><span class=\"line\">//            assertEquals(i, channel.readOutbound());</span><br><span class=\"line\">//        &#125;</span><br><span class=\"line\">        assertNull(channel.readOutbound());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试异常处理\"><a href=\"#测试异常处理\" class=\"headerlink\" title=\"测试异常处理\"></a>测试异常处理</h3><p>主要测试当入站数据的大小超过指定长度，会抛出异常</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class FrameChunkDecoder extends ByteToMessageDecoder &#123;</span><br><span class=\"line\">    private final int maxFrameSize;</span><br><span class=\"line\"></span><br><span class=\"line\">    public FrameChunkDecoder(int maxFrameSize) &#123;</span><br><span class=\"line\">        this.maxFrameSize = maxFrameSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void decode(ChannelHandlerContext ctx, ByteBuf in,</span><br><span class=\"line\">        List&lt;Object&gt; out)</span><br><span class=\"line\">        throws Exception &#123;</span><br><span class=\"line\">        int readableBytes = in.readableBytes();</span><br><span class=\"line\">        if (readableBytes &gt; maxFrameSize) &#123;</span><br><span class=\"line\">            // discard the bytes</span><br><span class=\"line\">            in.clear();</span><br><span class=\"line\">            throw new TooLongFrameException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ByteBuf buf = in.readBytes(readableBytes);</span><br><span class=\"line\">        out.add(buf);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class FrameChunkDecoderTest &#123;</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testFramesDecoded() &#123;</span><br><span class=\"line\">        ByteBuf buf = Unpooled.buffer();</span><br><span class=\"line\">        for (int i = 0; i &lt; 9; i++) &#123;</span><br><span class=\"line\">            buf.writeByte(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ByteBuf input = buf.duplicate();</span><br><span class=\"line\"></span><br><span class=\"line\">        EmbeddedChannel channel = new EmbeddedChannel(</span><br><span class=\"line\">            new FrameChunkDecoder(3));</span><br><span class=\"line\"></span><br><span class=\"line\">        assertTrue(channel.writeInbound(input.readBytes(2)));</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            channel.writeInbound(input.readBytes(4));</span><br><span class=\"line\">            Assert.fail();</span><br><span class=\"line\">        &#125; catch (TooLongFrameException e) &#123;</span><br><span class=\"line\">            // expected exception</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        assertTrue(channel.writeInbound(input.readBytes(3)));</span><br><span class=\"line\">        assertTrue(channel.finish());</span><br><span class=\"line\"></span><br><span class=\"line\">        // Read frames</span><br><span class=\"line\">        ByteBuf read = (ByteBuf) channel.readInbound();</span><br><span class=\"line\">        assertEquals(buf.readSlice(2), read);</span><br><span class=\"line\">        read.release();</span><br><span class=\"line\"></span><br><span class=\"line\">        read = (ByteBuf) channel.readInbound();</span><br><span class=\"line\">        assertEquals(buf.skipBytes(4).readSlice(3), read);</span><br><span class=\"line\">        read.release();</span><br><span class=\"line\">        buf.release();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这部分主要使用try…catch来测试是否有异常被抛出，因为这个是运行时异常，这个很容易测试是否一个异常在处理数据的过程中被捕捉并且处理的。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>以一个侵入少的例如JUnit单元测试是一个极度有效的方式保证代码的正确性并且增强可维护性。在这章，你可以学到netty提供的工具怎么测试您自己的ChannelHandler</p>\n<p>在下一章您将聚焦于怎么用netty写一个真实的应用。我们将不会表示更多的测试用例，希望你自己保持思考我们想表达的测试方法的重要性。</p>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n<!--more-->\n\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n<!--more-->\n\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-01-30T11:45:36.000Z","updated":"2018-02-03T05:59:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0w29rk9000nuup2ib8m2ivu","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>","more":"<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"},{"title":"HTTP协议","date":"2018-08-01T00:36:02.000Z","_content":"\n\n### 简介\nHTTP 本质是位于OSI应用层的一种协议，全拼： hypertext transfer protocol 超文本传输协议（就是说什么数据格式都能传输）\n\n本质是 请求---响应\n\n### 请求\n由三部分组成：请求行、请求头、请求体\n<!--more-->\n\n如图：\n![osi](/images/internet/2018-8-1-1.png)\n\n\n\n#### 请求行\n第一行是请求行：\n请求方法（METHOD） 统一资源标识符（URI） HTTP版本号\n\n```\n请求方法： POST /GET /HEAD /PUT /DELETE\nURI：URI就是URL中排除掉HOST剩下的部分，也就是资源在服务器上的地址\nHTTP版本号目前主流是1.1\n```\n**区别**\n>HTTP 1.0需要使用keep-alive参数来告知服务器端要建立一个长连接，而HTTP1.1默认支持长连接。\n>HTTP2.0使用了多路复用的技术，做到同一个连接并发处理多个请求，而且并发请求的数量比HTTP1.1大了好几个数量级。\n>当然HTTP1.1也可以多建立几个TCP连接，来支持处理更多并发的请求，但是创建TCP连接本身也是有开销的\n>HTTP1.1不支持header数据的压缩，HTTP2.0使用HPACK算法对header的数据进行压缩，这样数据体积小了，在网络上传输就会更快。\n\n#### 请求头header\n```\nHost: 目标服务器的网络地址\n\nAccept: 让服务端知道客户端所能接收的数据类型，如text/html */*\n\nContent-Type: body中的数据类型，如application/json; charset=UTF-8\n\nAccept-Language: 客户端的语言环境，如zh-cn\n\nAccept-Encoding: 客户端支持的数据压缩格式，如gzip\n\nUser-Agent: 客户端的软件环境，我们可以更改该字段为自己客户端的名字，比如QQ music v1.11，比如浏览器Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/600.8.9 (KHTML, like Gecko) Maxthon/4.5.2\n\nConnection: keep-alive，该字段是从HTTP 1.1才开始有的，用来告诉服务端这是一个持久连接，“请服务端不要在发出响应后立即断开TCP连接”。关于该字段的更多解释将在后面的HTTP版本简介中展开。\n\nContent-Length: body的长度，如果body为空则该字段值为0。该字段一般在POST请求中才会有。\nCookie: 记录者用户信息的保存在本地的用户数据，如果有会被自动附上\n```\n\n#### 请求体\n真正需要发给服务端的数据，在使用POST-multipart上传请求中请求体就是上传文件的二进制NSData类型数据；在GET请求中请求体为空；在普通的POST请求中请求体就是一些表单数据。\n\n\n### 响应\n![osi](/images/internet/2018-8-1-2.png)\n\n\n\n#### 响应行\n包含HTTP版本号、状态码、状态码对应的英文名称\n\n**状态码对应的信息**\n```\n1XX：信息提示。不代表成功或者失败，表示临时响应，比如100表示继续，101表示切换协议\n\n2XX: 成功\n\n3XX: 重定向\n\n4XX:客户端错误，很有可能是客户端发生问题，如亲切可爱的404表示未找到文件，说明你的URI是有问题的，服务器机子上该目录是没有该文件的；414URI太长\n\n5XX: 服务器错误，比如504网关超时\n```\n\n#### 响应头与响应体\n与请求头与请求体基本一致，除却一些字段\n\n### HTTP版本差异\n\nHTTP 1.1之前\n```\n不支持持久连接。一旦服务器对客户端发出响应就立即断开TCP连接(频繁创建会话费资源、影响性能)\n\n无请求头跟响应头\n\n客户端的前后请求是同步的。下一个请求必须等上一个请求从服务端拿到响应后才能发出，有点类似多线程的同步机制。（异步会走多线程，快捷）\n```\nHTTP 1.1(主流版本)\n```\n与1.1之前的版本相比，做了以下性能上的提升\n\n增加请求头跟响应头\n\n支持持久连接。客户端通过请求头中指定Connection为keep-alive告知服务端不要在完成响应后立即释放连接。HTTP是基于TCP的，在HTTP 1.1中一次TCP连接可以处理多次HTTP请求\n\n客户端不同请求之间是异步的。下一个请求不必等到上一个请求回来后再发出，而可以连续发出请求，有点类似多线程的异步处理。\n```\n\nHTTP 2.0\n```\n本着向下兼容的原则，1.1版本有的特性2.0都具备，也使用相同的API。但是2.0将只用于https网址。\n```\n\n\n\n\n\n\n\n\n","source":"_posts/http协议学习-2018-8-1.md","raw":"---\ntitle: HTTP协议\ndate: 2018-08-01 08:36:02\ntags: http\ncategories: [\"internet\",\"http\"]\n---\n\n\n### 简介\nHTTP 本质是位于OSI应用层的一种协议，全拼： hypertext transfer protocol 超文本传输协议（就是说什么数据格式都能传输）\n\n本质是 请求---响应\n\n### 请求\n由三部分组成：请求行、请求头、请求体\n<!--more-->\n\n如图：\n![osi](/images/internet/2018-8-1-1.png)\n\n\n\n#### 请求行\n第一行是请求行：\n请求方法（METHOD） 统一资源标识符（URI） HTTP版本号\n\n```\n请求方法： POST /GET /HEAD /PUT /DELETE\nURI：URI就是URL中排除掉HOST剩下的部分，也就是资源在服务器上的地址\nHTTP版本号目前主流是1.1\n```\n**区别**\n>HTTP 1.0需要使用keep-alive参数来告知服务器端要建立一个长连接，而HTTP1.1默认支持长连接。\n>HTTP2.0使用了多路复用的技术，做到同一个连接并发处理多个请求，而且并发请求的数量比HTTP1.1大了好几个数量级。\n>当然HTTP1.1也可以多建立几个TCP连接，来支持处理更多并发的请求，但是创建TCP连接本身也是有开销的\n>HTTP1.1不支持header数据的压缩，HTTP2.0使用HPACK算法对header的数据进行压缩，这样数据体积小了，在网络上传输就会更快。\n\n#### 请求头header\n```\nHost: 目标服务器的网络地址\n\nAccept: 让服务端知道客户端所能接收的数据类型，如text/html */*\n\nContent-Type: body中的数据类型，如application/json; charset=UTF-8\n\nAccept-Language: 客户端的语言环境，如zh-cn\n\nAccept-Encoding: 客户端支持的数据压缩格式，如gzip\n\nUser-Agent: 客户端的软件环境，我们可以更改该字段为自己客户端的名字，比如QQ music v1.11，比如浏览器Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/600.8.9 (KHTML, like Gecko) Maxthon/4.5.2\n\nConnection: keep-alive，该字段是从HTTP 1.1才开始有的，用来告诉服务端这是一个持久连接，“请服务端不要在发出响应后立即断开TCP连接”。关于该字段的更多解释将在后面的HTTP版本简介中展开。\n\nContent-Length: body的长度，如果body为空则该字段值为0。该字段一般在POST请求中才会有。\nCookie: 记录者用户信息的保存在本地的用户数据，如果有会被自动附上\n```\n\n#### 请求体\n真正需要发给服务端的数据，在使用POST-multipart上传请求中请求体就是上传文件的二进制NSData类型数据；在GET请求中请求体为空；在普通的POST请求中请求体就是一些表单数据。\n\n\n### 响应\n![osi](/images/internet/2018-8-1-2.png)\n\n\n\n#### 响应行\n包含HTTP版本号、状态码、状态码对应的英文名称\n\n**状态码对应的信息**\n```\n1XX：信息提示。不代表成功或者失败，表示临时响应，比如100表示继续，101表示切换协议\n\n2XX: 成功\n\n3XX: 重定向\n\n4XX:客户端错误，很有可能是客户端发生问题，如亲切可爱的404表示未找到文件，说明你的URI是有问题的，服务器机子上该目录是没有该文件的；414URI太长\n\n5XX: 服务器错误，比如504网关超时\n```\n\n#### 响应头与响应体\n与请求头与请求体基本一致，除却一些字段\n\n### HTTP版本差异\n\nHTTP 1.1之前\n```\n不支持持久连接。一旦服务器对客户端发出响应就立即断开TCP连接(频繁创建会话费资源、影响性能)\n\n无请求头跟响应头\n\n客户端的前后请求是同步的。下一个请求必须等上一个请求从服务端拿到响应后才能发出，有点类似多线程的同步机制。（异步会走多线程，快捷）\n```\nHTTP 1.1(主流版本)\n```\n与1.1之前的版本相比，做了以下性能上的提升\n\n增加请求头跟响应头\n\n支持持久连接。客户端通过请求头中指定Connection为keep-alive告知服务端不要在完成响应后立即释放连接。HTTP是基于TCP的，在HTTP 1.1中一次TCP连接可以处理多次HTTP请求\n\n客户端不同请求之间是异步的。下一个请求不必等到上一个请求回来后再发出，而可以连续发出请求，有点类似多线程的异步处理。\n```\n\nHTTP 2.0\n```\n本着向下兼容的原则，1.1版本有的特性2.0都具备，也使用相同的API。但是2.0将只用于https网址。\n```\n\n\n\n\n\n\n\n\n","slug":"http协议学习-2018-8-1","published":1,"updated":"2019-09-23T06:59:30.769Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0w29rka000puup29b0u3ovo","content":"<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>HTTP 本质是位于OSI应用层的一种协议，全拼： hypertext transfer protocol 超文本传输协议（就是说什么数据格式都能传输）</p>\n<p>本质是 请求—响应</p>\n<h3 id=\"请求\"><a href=\"#请求\" class=\"headerlink\" title=\"请求\"></a>请求</h3><p>由三部分组成：请求行、请求头、请求体<br><a id=\"more\"></a></p>\n<p>如图：<br><img src=\"/images/internet/2018-8-1-1.png\" alt=\"osi\"></p>\n<h4 id=\"请求行\"><a href=\"#请求行\" class=\"headerlink\" title=\"请求行\"></a>请求行</h4><p>第一行是请求行：<br>请求方法（METHOD） 统一资源标识符（URI） HTTP版本号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请求方法： POST /GET /HEAD /PUT /DELETE</span><br><span class=\"line\">URI：URI就是URL中排除掉HOST剩下的部分，也就是资源在服务器上的地址</span><br><span class=\"line\">HTTP版本号目前主流是1.1</span><br></pre></td></tr></table></figure>\n<p><strong>区别</strong></p>\n<blockquote>\n<p>HTTP 1.0需要使用keep-alive参数来告知服务器端要建立一个长连接，而HTTP1.1默认支持长连接。<br>HTTP2.0使用了多路复用的技术，做到同一个连接并发处理多个请求，而且并发请求的数量比HTTP1.1大了好几个数量级。<br>当然HTTP1.1也可以多建立几个TCP连接，来支持处理更多并发的请求，但是创建TCP连接本身也是有开销的<br>HTTP1.1不支持header数据的压缩，HTTP2.0使用HPACK算法对header的数据进行压缩，这样数据体积小了，在网络上传输就会更快。</p>\n</blockquote>\n<h4 id=\"请求头header\"><a href=\"#请求头header\" class=\"headerlink\" title=\"请求头header\"></a>请求头header</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host: 目标服务器的网络地址</span><br><span class=\"line\"></span><br><span class=\"line\">Accept: 让服务端知道客户端所能接收的数据类型，如text/html */*</span><br><span class=\"line\"></span><br><span class=\"line\">Content-Type: body中的数据类型，如application/json; charset=UTF-8</span><br><span class=\"line\"></span><br><span class=\"line\">Accept-Language: 客户端的语言环境，如zh-cn</span><br><span class=\"line\"></span><br><span class=\"line\">Accept-Encoding: 客户端支持的数据压缩格式，如gzip</span><br><span class=\"line\"></span><br><span class=\"line\">User-Agent: 客户端的软件环境，我们可以更改该字段为自己客户端的名字，比如QQ music v1.11，比如浏览器Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/600.8.9 (KHTML, like Gecko) Maxthon/4.5.2</span><br><span class=\"line\"></span><br><span class=\"line\">Connection: keep-alive，该字段是从HTTP 1.1才开始有的，用来告诉服务端这是一个持久连接，“请服务端不要在发出响应后立即断开TCP连接”。关于该字段的更多解释将在后面的HTTP版本简介中展开。</span><br><span class=\"line\"></span><br><span class=\"line\">Content-Length: body的长度，如果body为空则该字段值为0。该字段一般在POST请求中才会有。</span><br><span class=\"line\">Cookie: 记录者用户信息的保存在本地的用户数据，如果有会被自动附上</span><br></pre></td></tr></table></figure>\n<h4 id=\"请求体\"><a href=\"#请求体\" class=\"headerlink\" title=\"请求体\"></a>请求体</h4><p>真正需要发给服务端的数据，在使用POST-multipart上传请求中请求体就是上传文件的二进制NSData类型数据；在GET请求中请求体为空；在普通的POST请求中请求体就是一些表单数据。</p>\n<h3 id=\"响应\"><a href=\"#响应\" class=\"headerlink\" title=\"响应\"></a>响应</h3><p><img src=\"/images/internet/2018-8-1-2.png\" alt=\"osi\"></p>\n<h4 id=\"响应行\"><a href=\"#响应行\" class=\"headerlink\" title=\"响应行\"></a>响应行</h4><p>包含HTTP版本号、状态码、状态码对应的英文名称</p>\n<p><strong>状态码对应的信息</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1XX：信息提示。不代表成功或者失败，表示临时响应，比如100表示继续，101表示切换协议</span><br><span class=\"line\"></span><br><span class=\"line\">2XX: 成功</span><br><span class=\"line\"></span><br><span class=\"line\">3XX: 重定向</span><br><span class=\"line\"></span><br><span class=\"line\">4XX:客户端错误，很有可能是客户端发生问题，如亲切可爱的404表示未找到文件，说明你的URI是有问题的，服务器机子上该目录是没有该文件的；414URI太长</span><br><span class=\"line\"></span><br><span class=\"line\">5XX: 服务器错误，比如504网关超时</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"响应头与响应体\"><a href=\"#响应头与响应体\" class=\"headerlink\" title=\"响应头与响应体\"></a>响应头与响应体</h4><p>与请求头与请求体基本一致，除却一些字段</p>\n<h3 id=\"HTTP版本差异\"><a href=\"#HTTP版本差异\" class=\"headerlink\" title=\"HTTP版本差异\"></a>HTTP版本差异</h3><p>HTTP 1.1之前<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">不支持持久连接。一旦服务器对客户端发出响应就立即断开TCP连接(频繁创建会话费资源、影响性能)</span><br><span class=\"line\"></span><br><span class=\"line\">无请求头跟响应头</span><br><span class=\"line\"></span><br><span class=\"line\">客户端的前后请求是同步的。下一个请求必须等上一个请求从服务端拿到响应后才能发出，有点类似多线程的同步机制。（异步会走多线程，快捷）</span><br></pre></td></tr></table></figure></p>\n<p>HTTP 1.1(主流版本)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">与1.1之前的版本相比，做了以下性能上的提升</span><br><span class=\"line\"></span><br><span class=\"line\">增加请求头跟响应头</span><br><span class=\"line\"></span><br><span class=\"line\">支持持久连接。客户端通过请求头中指定Connection为keep-alive告知服务端不要在完成响应后立即释放连接。HTTP是基于TCP的，在HTTP 1.1中一次TCP连接可以处理多次HTTP请求</span><br><span class=\"line\"></span><br><span class=\"line\">客户端不同请求之间是异步的。下一个请求不必等到上一个请求回来后再发出，而可以连续发出请求，有点类似多线程的异步处理。</span><br></pre></td></tr></table></figure></p>\n<p>HTTP 2.0<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">本着向下兼容的原则，1.1版本有的特性2.0都具备，也使用相同的API。但是2.0将只用于https网址。</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>HTTP 本质是位于OSI应用层的一种协议，全拼： hypertext transfer protocol 超文本传输协议（就是说什么数据格式都能传输）</p>\n<p>本质是 请求—响应</p>\n<h3 id=\"请求\"><a href=\"#请求\" class=\"headerlink\" title=\"请求\"></a>请求</h3><p>由三部分组成：请求行、请求头、请求体<br>","more":"</p>\n<p>如图：<br><img src=\"/images/internet/2018-8-1-1.png\" alt=\"osi\"></p>\n<h4 id=\"请求行\"><a href=\"#请求行\" class=\"headerlink\" title=\"请求行\"></a>请求行</h4><p>第一行是请求行：<br>请求方法（METHOD） 统一资源标识符（URI） HTTP版本号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请求方法： POST /GET /HEAD /PUT /DELETE</span><br><span class=\"line\">URI：URI就是URL中排除掉HOST剩下的部分，也就是资源在服务器上的地址</span><br><span class=\"line\">HTTP版本号目前主流是1.1</span><br></pre></td></tr></table></figure>\n<p><strong>区别</strong></p>\n<blockquote>\n<p>HTTP 1.0需要使用keep-alive参数来告知服务器端要建立一个长连接，而HTTP1.1默认支持长连接。<br>HTTP2.0使用了多路复用的技术，做到同一个连接并发处理多个请求，而且并发请求的数量比HTTP1.1大了好几个数量级。<br>当然HTTP1.1也可以多建立几个TCP连接，来支持处理更多并发的请求，但是创建TCP连接本身也是有开销的<br>HTTP1.1不支持header数据的压缩，HTTP2.0使用HPACK算法对header的数据进行压缩，这样数据体积小了，在网络上传输就会更快。</p>\n</blockquote>\n<h4 id=\"请求头header\"><a href=\"#请求头header\" class=\"headerlink\" title=\"请求头header\"></a>请求头header</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host: 目标服务器的网络地址</span><br><span class=\"line\"></span><br><span class=\"line\">Accept: 让服务端知道客户端所能接收的数据类型，如text/html */*</span><br><span class=\"line\"></span><br><span class=\"line\">Content-Type: body中的数据类型，如application/json; charset=UTF-8</span><br><span class=\"line\"></span><br><span class=\"line\">Accept-Language: 客户端的语言环境，如zh-cn</span><br><span class=\"line\"></span><br><span class=\"line\">Accept-Encoding: 客户端支持的数据压缩格式，如gzip</span><br><span class=\"line\"></span><br><span class=\"line\">User-Agent: 客户端的软件环境，我们可以更改该字段为自己客户端的名字，比如QQ music v1.11，比如浏览器Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/600.8.9 (KHTML, like Gecko) Maxthon/4.5.2</span><br><span class=\"line\"></span><br><span class=\"line\">Connection: keep-alive，该字段是从HTTP 1.1才开始有的，用来告诉服务端这是一个持久连接，“请服务端不要在发出响应后立即断开TCP连接”。关于该字段的更多解释将在后面的HTTP版本简介中展开。</span><br><span class=\"line\"></span><br><span class=\"line\">Content-Length: body的长度，如果body为空则该字段值为0。该字段一般在POST请求中才会有。</span><br><span class=\"line\">Cookie: 记录者用户信息的保存在本地的用户数据，如果有会被自动附上</span><br></pre></td></tr></table></figure>\n<h4 id=\"请求体\"><a href=\"#请求体\" class=\"headerlink\" title=\"请求体\"></a>请求体</h4><p>真正需要发给服务端的数据，在使用POST-multipart上传请求中请求体就是上传文件的二进制NSData类型数据；在GET请求中请求体为空；在普通的POST请求中请求体就是一些表单数据。</p>\n<h3 id=\"响应\"><a href=\"#响应\" class=\"headerlink\" title=\"响应\"></a>响应</h3><p><img src=\"/images/internet/2018-8-1-2.png\" alt=\"osi\"></p>\n<h4 id=\"响应行\"><a href=\"#响应行\" class=\"headerlink\" title=\"响应行\"></a>响应行</h4><p>包含HTTP版本号、状态码、状态码对应的英文名称</p>\n<p><strong>状态码对应的信息</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1XX：信息提示。不代表成功或者失败，表示临时响应，比如100表示继续，101表示切换协议</span><br><span class=\"line\"></span><br><span class=\"line\">2XX: 成功</span><br><span class=\"line\"></span><br><span class=\"line\">3XX: 重定向</span><br><span class=\"line\"></span><br><span class=\"line\">4XX:客户端错误，很有可能是客户端发生问题，如亲切可爱的404表示未找到文件，说明你的URI是有问题的，服务器机子上该目录是没有该文件的；414URI太长</span><br><span class=\"line\"></span><br><span class=\"line\">5XX: 服务器错误，比如504网关超时</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"响应头与响应体\"><a href=\"#响应头与响应体\" class=\"headerlink\" title=\"响应头与响应体\"></a>响应头与响应体</h4><p>与请求头与请求体基本一致，除却一些字段</p>\n<h3 id=\"HTTP版本差异\"><a href=\"#HTTP版本差异\" class=\"headerlink\" title=\"HTTP版本差异\"></a>HTTP版本差异</h3><p>HTTP 1.1之前<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">不支持持久连接。一旦服务器对客户端发出响应就立即断开TCP连接(频繁创建会话费资源、影响性能)</span><br><span class=\"line\"></span><br><span class=\"line\">无请求头跟响应头</span><br><span class=\"line\"></span><br><span class=\"line\">客户端的前后请求是同步的。下一个请求必须等上一个请求从服务端拿到响应后才能发出，有点类似多线程的同步机制。（异步会走多线程，快捷）</span><br></pre></td></tr></table></figure></p>\n<p>HTTP 1.1(主流版本)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">与1.1之前的版本相比，做了以下性能上的提升</span><br><span class=\"line\"></span><br><span class=\"line\">增加请求头跟响应头</span><br><span class=\"line\"></span><br><span class=\"line\">支持持久连接。客户端通过请求头中指定Connection为keep-alive告知服务端不要在完成响应后立即释放连接。HTTP是基于TCP的，在HTTP 1.1中一次TCP连接可以处理多次HTTP请求</span><br><span class=\"line\"></span><br><span class=\"line\">客户端不同请求之间是异步的。下一个请求不必等到上一个请求回来后再发出，而可以连续发出请求，有点类似多线程的异步处理。</span><br></pre></td></tr></table></figure></p>\n<p>HTTP 2.0<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">本着向下兼容的原则，1.1版本有的特性2.0都具备，也使用相同的API。但是2.0将只用于https网址。</span><br></pre></td></tr></table></figure></p>"},{"title":"hexo安装部署教程","date":"2018-01-30T15:18:15.000Z","_content":"##    建立一个\bgithubpage项目\n### 使用自定义域名访问博客的前提：\n> 有域名解析至你的github page 我的域名为：blog.wudd.top\n\n\n####   建立一个分支 hexo\n* hexo为项目管理分支，即hexo博客项目的主分支\n* master分支为博客展示页面的分支（\b建好项目即存在的分支）\n\n##  在本地 \bclone hexo 分支\n<!--more-->\n\n```bash\n#克隆hexo分支\n$ git clone -b hexo git地址\n#进入\b克隆好的项目\n$ cd 项目名\n```\n##  安装hexo 以及相关的主题\n```bash\n#全局安装hexo\n$ sudo npm install -g hexo-cli\n#初始化hexo\n$ hexo init .\n```\n####  编辑项目目录下的 _config.yml文件\n##### ps\n* site:为博客自定义\b内容\n* 主题theme：主题配置项为第四步安装的，默认为自带的，也可不修改\n* deploy:填写自己的githubpage地址，分支为master\n* url:填写自己的博客访问url\n```bash\n#编辑项目根目录下的配置文件，修改以下其他可不修改：\b\n$ vim _config.yml\n \n  5 # Site\n  6 title: Hzhe\n  7 subtitle: you...\n  8 description: blog java\n  9 author: hzz\n 10 language:\n 11 timezone:\n 12\n 13 # URL\n 14 ## If your site is put in a subdirectory, set url as 'http://yoursite.com/ch    ild' and root as '/child/'\n 15 url: http://blog.wudd.top\n 16 root: /\n 17 permalink: :year/:month/:day/:title/\n 18 permalink_defaults:\n# Extensions\n 73 ## Plugins: https://hexo.io/plugins/\n 74 ## Themes: https://hexo.io/themes/ \n 75 theme: hexo-theme-laughing\n 76\n 77 # Deployment\n 78 ## Docs: https://hexo.io/docs/deployment.html\n 79 deploy:\n 80   type: git\n 81   repo: https://github.com/fastZhe/fastZhe.github.io\n 82   branch: master\n\n```\n##  安装hexo相关的主题\n* signature:个人签名\n* author.head:个人头像\n* navication:菜单栏\n* copyright：建议都关闭\n* socail:社交媒体连接\n```bash\n#进入theme文件夹\n$ cd theme\n#安装主题（不是必须）\n$ npm install hexo-renderer-pug --save\n$ git clone git@github.com:BoizZ/hexo-theme-laughing.git\n#删除主题文件夹内的.git\n$ cd hexo-theme-laughing ; rm -fr .git\n#编辑主题配置文件\n$ vim _config.yml\n\n  6 page_background: http://callfiles.ueibo.com/hexo-theme-laughing/page_backgro    und.jpg\n  7 page_menu_button: dark\n  8 post_background: http://callfiles.ueibo.com/hexo-theme-laughing/post_backgro    und.jpg\n  9 post_menu_button: light\n 10 title_plancehold: 随笔\n 11 author:\n 12   head: https://tva3.sinaimg.cn/crop.0.0.750.750.180/cbe52eb6jw8ew3l78tj4qj2    0ku0kv75s.jpg\n 13   signature: 世界那么大，我想去看看。。。KEEP FIGHTING\n 14 navication:\n 15   - name: Github\n 16     link: https://github.com/fastZhe\n 17 # content\n 18 content_width: 800\n\n 21 social:\n 22   - name: Github\n 23     icon: github\n 24     link: https://github.com\n 25   - name: Weibo\n 26     icon: weibo\n 27     link: https://weibo.com/p/1005053420794550/home?from=page_100505&mod=TAB    &is_all=1\n\n # Copyright\n 33 copyright:\n 34   record: false\n 35   hexo: false\n 36   laughing: true\n```\n\n##  编辑githubpage 项目根目录下的.gitignore\n* 配置成以下：避免项目管理分支缺少相关目录\n* 推送至hexo分支\n```bash\n$ vim .gitignore\n\n.DS_Store\nThumbs.db\n*.log\n.deploy*/\n\n$ git add .gitignore \n$ git commit -m \"\"\n$ git push origin hexo\n```\n\n##  新建编辑CNAME 自动\b映射对应的域名\n* 填写自己访问的博客地址\n* ps 这个是我的域名，请换成自己的\n* 推送至hexo分支\n```bash\n$ vim source/CNAME\nblog.wudd.top\n\n$ git add . \n$ git commit -m \"\"\n$ git push origin hexo\n```\n\n\n##  发布博客以及推送操作\n```bash\n#新建博客\n$ hexo new \"博客名\"\nINFO  Created: ~/me/blog/fast/fastZhe.github.io/source/_posts/hexo安装部署教程.md\n#编辑博客\n$ vim ~/me/blog/fast/fastZhe.github.io/source/_posts/hexo安装部署教程.md\n#推送至远程项目目录进行保存分支为hexo（保存项目目录，多机操作）\n$ git add .\n$ git commit -m \"最新博客等。。。\"\n$ git push origin hexo\n#生成博客\n$ hexo g\n#本地预览（在本地验证博客是否有问题）,访问以下地址即可\n$ hexo server\n➜  fastZhe.github.io git:(hexo) ✗ hexo server\nINFO  Start processing\nINFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.\n\n#部署博客至githubpage\nhexo d\n```\n\n### 打开页面 \b你的域名，请尽情欣赏吧！！！\n","source":"_posts/hexo安装部署教程.md","raw":"---\ntitle: hexo安装部署教程\ndate: 2018-01-30 23:18:15\ntags: \"hexo\"\n---\n##    建立一个\bgithubpage项目\n### 使用自定义域名访问博客的前提：\n> 有域名解析至你的github page 我的域名为：blog.wudd.top\n\n\n####   建立一个分支 hexo\n* hexo为项目管理分支，即hexo博客项目的主分支\n* master分支为博客展示页面的分支（\b建好项目即存在的分支）\n\n##  在本地 \bclone hexo 分支\n<!--more-->\n\n```bash\n#克隆hexo分支\n$ git clone -b hexo git地址\n#进入\b克隆好的项目\n$ cd 项目名\n```\n##  安装hexo 以及相关的主题\n```bash\n#全局安装hexo\n$ sudo npm install -g hexo-cli\n#初始化hexo\n$ hexo init .\n```\n####  编辑项目目录下的 _config.yml文件\n##### ps\n* site:为博客自定义\b内容\n* 主题theme：主题配置项为第四步安装的，默认为自带的，也可不修改\n* deploy:填写自己的githubpage地址，分支为master\n* url:填写自己的博客访问url\n```bash\n#编辑项目根目录下的配置文件，修改以下其他可不修改：\b\n$ vim _config.yml\n \n  5 # Site\n  6 title: Hzhe\n  7 subtitle: you...\n  8 description: blog java\n  9 author: hzz\n 10 language:\n 11 timezone:\n 12\n 13 # URL\n 14 ## If your site is put in a subdirectory, set url as 'http://yoursite.com/ch    ild' and root as '/child/'\n 15 url: http://blog.wudd.top\n 16 root: /\n 17 permalink: :year/:month/:day/:title/\n 18 permalink_defaults:\n# Extensions\n 73 ## Plugins: https://hexo.io/plugins/\n 74 ## Themes: https://hexo.io/themes/ \n 75 theme: hexo-theme-laughing\n 76\n 77 # Deployment\n 78 ## Docs: https://hexo.io/docs/deployment.html\n 79 deploy:\n 80   type: git\n 81   repo: https://github.com/fastZhe/fastZhe.github.io\n 82   branch: master\n\n```\n##  安装hexo相关的主题\n* signature:个人签名\n* author.head:个人头像\n* navication:菜单栏\n* copyright：建议都关闭\n* socail:社交媒体连接\n```bash\n#进入theme文件夹\n$ cd theme\n#安装主题（不是必须）\n$ npm install hexo-renderer-pug --save\n$ git clone git@github.com:BoizZ/hexo-theme-laughing.git\n#删除主题文件夹内的.git\n$ cd hexo-theme-laughing ; rm -fr .git\n#编辑主题配置文件\n$ vim _config.yml\n\n  6 page_background: http://callfiles.ueibo.com/hexo-theme-laughing/page_backgro    und.jpg\n  7 page_menu_button: dark\n  8 post_background: http://callfiles.ueibo.com/hexo-theme-laughing/post_backgro    und.jpg\n  9 post_menu_button: light\n 10 title_plancehold: 随笔\n 11 author:\n 12   head: https://tva3.sinaimg.cn/crop.0.0.750.750.180/cbe52eb6jw8ew3l78tj4qj2    0ku0kv75s.jpg\n 13   signature: 世界那么大，我想去看看。。。KEEP FIGHTING\n 14 navication:\n 15   - name: Github\n 16     link: https://github.com/fastZhe\n 17 # content\n 18 content_width: 800\n\n 21 social:\n 22   - name: Github\n 23     icon: github\n 24     link: https://github.com\n 25   - name: Weibo\n 26     icon: weibo\n 27     link: https://weibo.com/p/1005053420794550/home?from=page_100505&mod=TAB    &is_all=1\n\n # Copyright\n 33 copyright:\n 34   record: false\n 35   hexo: false\n 36   laughing: true\n```\n\n##  编辑githubpage 项目根目录下的.gitignore\n* 配置成以下：避免项目管理分支缺少相关目录\n* 推送至hexo分支\n```bash\n$ vim .gitignore\n\n.DS_Store\nThumbs.db\n*.log\n.deploy*/\n\n$ git add .gitignore \n$ git commit -m \"\"\n$ git push origin hexo\n```\n\n##  新建编辑CNAME 自动\b映射对应的域名\n* 填写自己访问的博客地址\n* ps 这个是我的域名，请换成自己的\n* 推送至hexo分支\n```bash\n$ vim source/CNAME\nblog.wudd.top\n\n$ git add . \n$ git commit -m \"\"\n$ git push origin hexo\n```\n\n\n##  发布博客以及推送操作\n```bash\n#新建博客\n$ hexo new \"博客名\"\nINFO  Created: ~/me/blog/fast/fastZhe.github.io/source/_posts/hexo安装部署教程.md\n#编辑博客\n$ vim ~/me/blog/fast/fastZhe.github.io/source/_posts/hexo安装部署教程.md\n#推送至远程项目目录进行保存分支为hexo（保存项目目录，多机操作）\n$ git add .\n$ git commit -m \"最新博客等。。。\"\n$ git push origin hexo\n#生成博客\n$ hexo g\n#本地预览（在本地验证博客是否有问题）,访问以下地址即可\n$ hexo server\n➜  fastZhe.github.io git:(hexo) ✗ hexo server\nINFO  Start processing\nINFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.\n\n#部署博客至githubpage\nhexo d\n```\n\n### 打开页面 \b你的域名，请尽情欣赏吧！！！\n","slug":"hexo安装部署教程","published":1,"updated":"2019-09-23T06:59:32.649Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0w29rkb000suup288i17knk","content":"<h2 id=\"建立一个githubpage项目\"><a href=\"#建立一个githubpage项目\" class=\"headerlink\" title=\"建立一个\bgithubpage项目\"></a>建立一个\bgithubpage项目</h2><h3 id=\"使用自定义域名访问博客的前提：\"><a href=\"#使用自定义域名访问博客的前提：\" class=\"headerlink\" title=\"使用自定义域名访问博客的前提：\"></a>使用自定义域名访问博客的前提：</h3><blockquote>\n<p>有域名解析至你的github page 我的域名为：blog.wudd.top</p>\n</blockquote>\n<h4 id=\"建立一个分支-hexo\"><a href=\"#建立一个分支-hexo\" class=\"headerlink\" title=\"建立一个分支 hexo\"></a>建立一个分支 hexo</h4><ul>\n<li>hexo为项目管理分支，即hexo博客项目的主分支</li>\n<li>master分支为博客展示页面的分支（\b建好项目即存在的分支）</li>\n</ul>\n<h2 id=\"在本地-clone-hexo-分支\"><a href=\"#在本地-clone-hexo-分支\" class=\"headerlink\" title=\"在本地 \bclone hexo 分支\"></a>在本地 \bclone hexo 分支</h2><a id=\"more\"></a>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#克隆hexo分支</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> -b hexo git地址</span><br><span class=\"line\"><span class=\"comment\">#进入\b克隆好的项目</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> 项目名</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装hexo-以及相关的主题\"><a href=\"#安装hexo-以及相关的主题\" class=\"headerlink\" title=\"安装hexo 以及相关的主题\"></a>安装hexo 以及相关的主题</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#全局安装hexo</span></span><br><span class=\"line\">$ sudo npm install -g hexo-cli</span><br><span class=\"line\"><span class=\"comment\">#初始化hexo</span></span><br><span class=\"line\">$ hexo init .</span><br></pre></td></tr></table></figure>\n<h4 id=\"编辑项目目录下的-config-yml文件\"><a href=\"#编辑项目目录下的-config-yml文件\" class=\"headerlink\" title=\"编辑项目目录下的 _config.yml文件\"></a>编辑项目目录下的 _config.yml文件</h4><h5 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h5><ul>\n<li>site:为博客自定义\b内容</li>\n<li>主题theme：主题配置项为第四步安装的，默认为自带的，也可不修改</li>\n<li>deploy:填写自己的githubpage地址，分支为master</li>\n<li>url:填写自己的博客访问url<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#编辑项目根目录下的配置文件，修改以下其他可不修改：\b</span></span><br><span class=\"line\">$ vim _config.yml</span><br><span class=\"line\"> </span><br><span class=\"line\">  5 <span class=\"comment\"># Site</span></span><br><span class=\"line\">  6 title: Hzhe</span><br><span class=\"line\">  7 subtitle: you...</span><br><span class=\"line\">  8 description: blog java</span><br><span class=\"line\">  9 author: hzz</span><br><span class=\"line\"> 10 language:</span><br><span class=\"line\"> 11 timezone:</span><br><span class=\"line\"> 12</span><br><span class=\"line\"> 13 <span class=\"comment\"># URL</span></span><br><span class=\"line\"> 14 <span class=\"comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/ch    ild' and root as '/child/'</span></span><br><span class=\"line\"> 15 url: http://blog.wudd.top</span><br><span class=\"line\"> 16 root: /</span><br><span class=\"line\"> 17 permalink: :year/:month/:day/:title/</span><br><span class=\"line\"> 18 permalink_defaults:</span><br><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"> 73 <span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"> 74 <span class=\"comment\">## Themes: https://hexo.io/themes/ </span></span><br><span class=\"line\"> 75 theme: hexo-theme-laughing</span><br><span class=\"line\"> 76</span><br><span class=\"line\"> 77 <span class=\"comment\"># Deployment</span></span><br><span class=\"line\"> 78 <span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\"> 79 deploy:</span><br><span class=\"line\"> 80   <span class=\"built_in\">type</span>: git</span><br><span class=\"line\"> 81   repo: https://github.com/fastZhe/fastZhe.github.io</span><br><span class=\"line\"> 82   branch: master</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"安装hexo相关的主题\"><a href=\"#安装hexo相关的主题\" class=\"headerlink\" title=\"安装hexo相关的主题\"></a>安装hexo相关的主题</h2><ul>\n<li>signature:个人签名</li>\n<li>author.head:个人头像</li>\n<li>navication:菜单栏</li>\n<li>copyright：建议都关闭</li>\n<li>socail:社交媒体连接<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#进入theme文件夹</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> theme</span><br><span class=\"line\"><span class=\"comment\">#安装主题（不是必须）</span></span><br><span class=\"line\">$ npm install hexo-renderer-pug --save</span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> git@github.com:BoizZ/hexo-theme-laughing.git</span><br><span class=\"line\"><span class=\"comment\">#删除主题文件夹内的.git</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> hexo-theme-laughing ; rm -fr .git</span><br><span class=\"line\"><span class=\"comment\">#编辑主题配置文件</span></span><br><span class=\"line\">$ vim _config.yml</span><br><span class=\"line\"></span><br><span class=\"line\">  6 page_background: http://callfiles.ueibo.com/hexo-theme-laughing/page_backgro    und.jpg</span><br><span class=\"line\">  7 page_menu_button: dark</span><br><span class=\"line\">  8 post_background: http://callfiles.ueibo.com/hexo-theme-laughing/post_backgro    und.jpg</span><br><span class=\"line\">  9 post_menu_button: light</span><br><span class=\"line\"> 10 title_plancehold: 随笔</span><br><span class=\"line\"> 11 author:</span><br><span class=\"line\"> 12   head: https://tva3.sinaimg.cn/crop.0.0.750.750.180/cbe52eb6jw8ew3l78tj4qj2    0ku0kv75s.jpg</span><br><span class=\"line\"> 13   signature: 世界那么大，我想去看看。。。KEEP FIGHTING</span><br><span class=\"line\"> 14 navication:</span><br><span class=\"line\"> 15   - name: Github</span><br><span class=\"line\"> 16     link: https://github.com/fastZhe</span><br><span class=\"line\"> 17 <span class=\"comment\"># content</span></span><br><span class=\"line\"> 18 content_width: 800</span><br><span class=\"line\"></span><br><span class=\"line\"> 21 social:</span><br><span class=\"line\"> 22   - name: Github</span><br><span class=\"line\"> 23     icon: github</span><br><span class=\"line\"> 24     link: https://github.com</span><br><span class=\"line\"> 25   - name: Weibo</span><br><span class=\"line\"> 26     icon: weibo</span><br><span class=\"line\"> 27     link: https://weibo.com/p/1005053420794550/home?from=page_100505&amp;mod=TAB    &amp;is_all=1</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\"># Copyright</span></span><br><span class=\"line\"> 33 copyright:</span><br><span class=\"line\"> 34   record: <span class=\"literal\">false</span></span><br><span class=\"line\"> 35   hexo: <span class=\"literal\">false</span></span><br><span class=\"line\"> 36   laughing: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"编辑githubpage-项目根目录下的-gitignore\"><a href=\"#编辑githubpage-项目根目录下的-gitignore\" class=\"headerlink\" title=\"编辑githubpage 项目根目录下的.gitignore\"></a>编辑githubpage 项目根目录下的.gitignore</h2><ul>\n<li>配置成以下：避免项目管理分支缺少相关目录</li>\n<li>推送至hexo分支<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim .gitignore</span><br><span class=\"line\"></span><br><span class=\"line\">.DS_Store</span><br><span class=\"line\">Thumbs.db</span><br><span class=\"line\">*.<span class=\"built_in\">log</span></span><br><span class=\"line\">.deploy*/</span><br><span class=\"line\"></span><br><span class=\"line\">$ git add .gitignore </span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"\"</span></span><br><span class=\"line\">$ git push origin hexo</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"新建编辑CNAME-自动映射对应的域名\"><a href=\"#新建编辑CNAME-自动映射对应的域名\" class=\"headerlink\" title=\"新建编辑CNAME 自动\b映射对应的域名\"></a>新建编辑CNAME 自动\b映射对应的域名</h2><ul>\n<li>填写自己访问的博客地址</li>\n<li>ps 这个是我的域名，请换成自己的</li>\n<li>推送至hexo分支<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim <span class=\"built_in\">source</span>/CNAME</span><br><span class=\"line\">blog.wudd.top</span><br><span class=\"line\"></span><br><span class=\"line\">$ git add . </span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"\"</span></span><br><span class=\"line\">$ git push origin hexo</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"发布博客以及推送操作\"><a href=\"#发布博客以及推送操作\" class=\"headerlink\" title=\"发布博客以及推送操作\"></a>发布博客以及推送操作</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#新建博客</span></span><br><span class=\"line\">$ hexo new <span class=\"string\">\"博客名\"</span></span><br><span class=\"line\">INFO  Created: ~/me/blog/fast/fastZhe.github.io/<span class=\"built_in\">source</span>/_posts/hexo安装部署教程.md</span><br><span class=\"line\"><span class=\"comment\">#编辑博客</span></span><br><span class=\"line\">$ vim ~/me/blog/fast/fastZhe.github.io/<span class=\"built_in\">source</span>/_posts/hexo安装部署教程.md</span><br><span class=\"line\"><span class=\"comment\">#推送至远程项目目录进行保存分支为hexo（保存项目目录，多机操作）</span></span><br><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"最新博客等。。。\"</span></span><br><span class=\"line\">$ git push origin hexo</span><br><span class=\"line\"><span class=\"comment\">#生成博客</span></span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\"><span class=\"comment\">#本地预览（在本地验证博客是否有问题）,访问以下地址即可</span></span><br><span class=\"line\">$ hexo server</span><br><span class=\"line\">➜  fastZhe.github.io git:(hexo) ✗ hexo server</span><br><span class=\"line\">INFO  Start processing</span><br><span class=\"line\">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#部署博客至githubpage</span></span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<h3 id=\"打开页面-你的域名，请尽情欣赏吧！！！\"><a href=\"#打开页面-你的域名，请尽情欣赏吧！！！\" class=\"headerlink\" title=\"打开页面 \b你的域名，请尽情欣赏吧！！！\"></a>打开页面 \b你的域名，请尽情欣赏吧！！！</h3>","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"<h2 id=\"建立一个githubpage项目\"><a href=\"#建立一个githubpage项目\" class=\"headerlink\" title=\"建立一个\bgithubpage项目\"></a>建立一个\bgithubpage项目</h2><h3 id=\"使用自定义域名访问博客的前提：\"><a href=\"#使用自定义域名访问博客的前提：\" class=\"headerlink\" title=\"使用自定义域名访问博客的前提：\"></a>使用自定义域名访问博客的前提：</h3><blockquote>\n<p>有域名解析至你的github page 我的域名为：blog.wudd.top</p>\n</blockquote>\n<h4 id=\"建立一个分支-hexo\"><a href=\"#建立一个分支-hexo\" class=\"headerlink\" title=\"建立一个分支 hexo\"></a>建立一个分支 hexo</h4><ul>\n<li>hexo为项目管理分支，即hexo博客项目的主分支</li>\n<li>master分支为博客展示页面的分支（\b建好项目即存在的分支）</li>\n</ul>\n<h2 id=\"在本地-clone-hexo-分支\"><a href=\"#在本地-clone-hexo-分支\" class=\"headerlink\" title=\"在本地 \bclone hexo 分支\"></a>在本地 \bclone hexo 分支</h2>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#克隆hexo分支</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> -b hexo git地址</span><br><span class=\"line\"><span class=\"comment\">#进入\b克隆好的项目</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> 项目名</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装hexo-以及相关的主题\"><a href=\"#安装hexo-以及相关的主题\" class=\"headerlink\" title=\"安装hexo 以及相关的主题\"></a>安装hexo 以及相关的主题</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#全局安装hexo</span></span><br><span class=\"line\">$ sudo npm install -g hexo-cli</span><br><span class=\"line\"><span class=\"comment\">#初始化hexo</span></span><br><span class=\"line\">$ hexo init .</span><br></pre></td></tr></table></figure>\n<h4 id=\"编辑项目目录下的-config-yml文件\"><a href=\"#编辑项目目录下的-config-yml文件\" class=\"headerlink\" title=\"编辑项目目录下的 _config.yml文件\"></a>编辑项目目录下的 _config.yml文件</h4><h5 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h5><ul>\n<li>site:为博客自定义\b内容</li>\n<li>主题theme：主题配置项为第四步安装的，默认为自带的，也可不修改</li>\n<li>deploy:填写自己的githubpage地址，分支为master</li>\n<li>url:填写自己的博客访问url<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#编辑项目根目录下的配置文件，修改以下其他可不修改：\b</span></span><br><span class=\"line\">$ vim _config.yml</span><br><span class=\"line\"> </span><br><span class=\"line\">  5 <span class=\"comment\"># Site</span></span><br><span class=\"line\">  6 title: Hzhe</span><br><span class=\"line\">  7 subtitle: you...</span><br><span class=\"line\">  8 description: blog java</span><br><span class=\"line\">  9 author: hzz</span><br><span class=\"line\"> 10 language:</span><br><span class=\"line\"> 11 timezone:</span><br><span class=\"line\"> 12</span><br><span class=\"line\"> 13 <span class=\"comment\"># URL</span></span><br><span class=\"line\"> 14 <span class=\"comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/ch    ild' and root as '/child/'</span></span><br><span class=\"line\"> 15 url: http://blog.wudd.top</span><br><span class=\"line\"> 16 root: /</span><br><span class=\"line\"> 17 permalink: :year/:month/:day/:title/</span><br><span class=\"line\"> 18 permalink_defaults:</span><br><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"> 73 <span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"> 74 <span class=\"comment\">## Themes: https://hexo.io/themes/ </span></span><br><span class=\"line\"> 75 theme: hexo-theme-laughing</span><br><span class=\"line\"> 76</span><br><span class=\"line\"> 77 <span class=\"comment\"># Deployment</span></span><br><span class=\"line\"> 78 <span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\"> 79 deploy:</span><br><span class=\"line\"> 80   <span class=\"built_in\">type</span>: git</span><br><span class=\"line\"> 81   repo: https://github.com/fastZhe/fastZhe.github.io</span><br><span class=\"line\"> 82   branch: master</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"安装hexo相关的主题\"><a href=\"#安装hexo相关的主题\" class=\"headerlink\" title=\"安装hexo相关的主题\"></a>安装hexo相关的主题</h2><ul>\n<li>signature:个人签名</li>\n<li>author.head:个人头像</li>\n<li>navication:菜单栏</li>\n<li>copyright：建议都关闭</li>\n<li>socail:社交媒体连接<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#进入theme文件夹</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> theme</span><br><span class=\"line\"><span class=\"comment\">#安装主题（不是必须）</span></span><br><span class=\"line\">$ npm install hexo-renderer-pug --save</span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> git@github.com:BoizZ/hexo-theme-laughing.git</span><br><span class=\"line\"><span class=\"comment\">#删除主题文件夹内的.git</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> hexo-theme-laughing ; rm -fr .git</span><br><span class=\"line\"><span class=\"comment\">#编辑主题配置文件</span></span><br><span class=\"line\">$ vim _config.yml</span><br><span class=\"line\"></span><br><span class=\"line\">  6 page_background: http://callfiles.ueibo.com/hexo-theme-laughing/page_backgro    und.jpg</span><br><span class=\"line\">  7 page_menu_button: dark</span><br><span class=\"line\">  8 post_background: http://callfiles.ueibo.com/hexo-theme-laughing/post_backgro    und.jpg</span><br><span class=\"line\">  9 post_menu_button: light</span><br><span class=\"line\"> 10 title_plancehold: 随笔</span><br><span class=\"line\"> 11 author:</span><br><span class=\"line\"> 12   head: https://tva3.sinaimg.cn/crop.0.0.750.750.180/cbe52eb6jw8ew3l78tj4qj2    0ku0kv75s.jpg</span><br><span class=\"line\"> 13   signature: 世界那么大，我想去看看。。。KEEP FIGHTING</span><br><span class=\"line\"> 14 navication:</span><br><span class=\"line\"> 15   - name: Github</span><br><span class=\"line\"> 16     link: https://github.com/fastZhe</span><br><span class=\"line\"> 17 <span class=\"comment\"># content</span></span><br><span class=\"line\"> 18 content_width: 800</span><br><span class=\"line\"></span><br><span class=\"line\"> 21 social:</span><br><span class=\"line\"> 22   - name: Github</span><br><span class=\"line\"> 23     icon: github</span><br><span class=\"line\"> 24     link: https://github.com</span><br><span class=\"line\"> 25   - name: Weibo</span><br><span class=\"line\"> 26     icon: weibo</span><br><span class=\"line\"> 27     link: https://weibo.com/p/1005053420794550/home?from=page_100505&amp;mod=TAB    &amp;is_all=1</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\"># Copyright</span></span><br><span class=\"line\"> 33 copyright:</span><br><span class=\"line\"> 34   record: <span class=\"literal\">false</span></span><br><span class=\"line\"> 35   hexo: <span class=\"literal\">false</span></span><br><span class=\"line\"> 36   laughing: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"编辑githubpage-项目根目录下的-gitignore\"><a href=\"#编辑githubpage-项目根目录下的-gitignore\" class=\"headerlink\" title=\"编辑githubpage 项目根目录下的.gitignore\"></a>编辑githubpage 项目根目录下的.gitignore</h2><ul>\n<li>配置成以下：避免项目管理分支缺少相关目录</li>\n<li>推送至hexo分支<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim .gitignore</span><br><span class=\"line\"></span><br><span class=\"line\">.DS_Store</span><br><span class=\"line\">Thumbs.db</span><br><span class=\"line\">*.<span class=\"built_in\">log</span></span><br><span class=\"line\">.deploy*/</span><br><span class=\"line\"></span><br><span class=\"line\">$ git add .gitignore </span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"\"</span></span><br><span class=\"line\">$ git push origin hexo</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"新建编辑CNAME-自动映射对应的域名\"><a href=\"#新建编辑CNAME-自动映射对应的域名\" class=\"headerlink\" title=\"新建编辑CNAME 自动\b映射对应的域名\"></a>新建编辑CNAME 自动\b映射对应的域名</h2><ul>\n<li>填写自己访问的博客地址</li>\n<li>ps 这个是我的域名，请换成自己的</li>\n<li>推送至hexo分支<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim <span class=\"built_in\">source</span>/CNAME</span><br><span class=\"line\">blog.wudd.top</span><br><span class=\"line\"></span><br><span class=\"line\">$ git add . </span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"\"</span></span><br><span class=\"line\">$ git push origin hexo</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"发布博客以及推送操作\"><a href=\"#发布博客以及推送操作\" class=\"headerlink\" title=\"发布博客以及推送操作\"></a>发布博客以及推送操作</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#新建博客</span></span><br><span class=\"line\">$ hexo new <span class=\"string\">\"博客名\"</span></span><br><span class=\"line\">INFO  Created: ~/me/blog/fast/fastZhe.github.io/<span class=\"built_in\">source</span>/_posts/hexo安装部署教程.md</span><br><span class=\"line\"><span class=\"comment\">#编辑博客</span></span><br><span class=\"line\">$ vim ~/me/blog/fast/fastZhe.github.io/<span class=\"built_in\">source</span>/_posts/hexo安装部署教程.md</span><br><span class=\"line\"><span class=\"comment\">#推送至远程项目目录进行保存分支为hexo（保存项目目录，多机操作）</span></span><br><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"最新博客等。。。\"</span></span><br><span class=\"line\">$ git push origin hexo</span><br><span class=\"line\"><span class=\"comment\">#生成博客</span></span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\"><span class=\"comment\">#本地预览（在本地验证博客是否有问题）,访问以下地址即可</span></span><br><span class=\"line\">$ hexo server</span><br><span class=\"line\">➜  fastZhe.github.io git:(hexo) ✗ hexo server</span><br><span class=\"line\">INFO  Start processing</span><br><span class=\"line\">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#部署博客至githubpage</span></span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<h3 id=\"打开页面-你的域名，请尽情欣赏吧！！！\"><a href=\"#打开页面-你的域名，请尽情欣赏吧！！！\" class=\"headerlink\" title=\"打开页面 \b你的域名，请尽情欣赏吧！！！\"></a>打开页面 \b你的域名，请尽情欣赏吧！！！</h3>"},{"title":"linux下使用rsync快速删除大量文件","date":"2018-01-31T10:07:52.000Z","_content":"\n## 问题：快速删除一个文件夹下的大量文件？\n* 使用rm 大量文件会很慢，更大时并且会报错\n> 实际原理：遍历删除\n\n```bash\n$ rm -fr *\n```\n<!--more-->\n\n* 使用rsync删除\n> 实际原理：使用空文件夹替换要删除的文件夹\n\n\n\n```bash\n#建立新的空文件夹\n$ mkdir src\n#建立实际有很多文件的文件夹\n$ mkdir dest\n#模拟生成大量文件  900000个文件\n$ touch file{1..900000}\n#使用rsync删除\n# -r 包含文件夹 -l 符号链接 -p 权限 permission -t 保持文件修改时间 -D 特殊设备\n$ rsync --delete-before -rlptD src/ dest\n#或者(与上面一样的效果)\n$ rsync -a --delete-before --no-o --no-g src/ dest\n```\n","source":"_posts/linux下使用rsync快速删除大量文件.md","raw":"---\ntitle: linux下使用rsync快速删除大量文件\ndate: 2018-01-31 18:07:52\ntags: [\"rsync\",\"rm\"]\ncategory: [\"linux\",\"shell\"]\n---\n\n## 问题：快速删除一个文件夹下的大量文件？\n* 使用rm 大量文件会很慢，更大时并且会报错\n> 实际原理：遍历删除\n\n```bash\n$ rm -fr *\n```\n<!--more-->\n\n* 使用rsync删除\n> 实际原理：使用空文件夹替换要删除的文件夹\n\n\n\n```bash\n#建立新的空文件夹\n$ mkdir src\n#建立实际有很多文件的文件夹\n$ mkdir dest\n#模拟生成大量文件  900000个文件\n$ touch file{1..900000}\n#使用rsync删除\n# -r 包含文件夹 -l 符号链接 -p 权限 permission -t 保持文件修改时间 -D 特殊设备\n$ rsync --delete-before -rlptD src/ dest\n#或者(与上面一样的效果)\n$ rsync -a --delete-before --no-o --no-g src/ dest\n```\n","slug":"linux下使用rsync快速删除大量文件","published":1,"updated":"2019-09-23T06:59:28.983Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0w29rkd000vuup2mskj8nmp","content":"<h2 id=\"问题：快速删除一个文件夹下的大量文件？\"><a href=\"#问题：快速删除一个文件夹下的大量文件？\" class=\"headerlink\" title=\"问题：快速删除一个文件夹下的大量文件？\"></a>问题：快速删除一个文件夹下的大量文件？</h2><ul>\n<li>使用rm 大量文件会很慢，更大时并且会报错<blockquote>\n<p>实际原理：遍历删除</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm -fr *</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li>使用rsync删除<blockquote>\n<p>实际原理：使用空文件夹替换要删除的文件夹</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#建立新的空文件夹</span></span><br><span class=\"line\">$ mkdir src</span><br><span class=\"line\"><span class=\"comment\">#建立实际有很多文件的文件夹</span></span><br><span class=\"line\">$ mkdir dest</span><br><span class=\"line\"><span class=\"comment\">#模拟生成大量文件  900000个文件</span></span><br><span class=\"line\">$ touch file&#123;1..900000&#125;</span><br><span class=\"line\"><span class=\"comment\">#使用rsync删除</span></span><br><span class=\"line\"><span class=\"comment\"># -r 包含文件夹 -l 符号链接 -p 权限 permission -t 保持文件修改时间 -D 特殊设备</span></span><br><span class=\"line\">$ rsync --delete-before -rlptD src/ dest</span><br><span class=\"line\"><span class=\"comment\">#或者(与上面一样的效果)</span></span><br><span class=\"line\">$ rsync -a --delete-before --no-o --no-g src/ dest</span><br></pre></td></tr></table></figure>\n","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"<h2 id=\"问题：快速删除一个文件夹下的大量文件？\"><a href=\"#问题：快速删除一个文件夹下的大量文件？\" class=\"headerlink\" title=\"问题：快速删除一个文件夹下的大量文件？\"></a>问题：快速删除一个文件夹下的大量文件？</h2><ul>\n<li>使用rm 大量文件会很慢，更大时并且会报错<blockquote>\n<p>实际原理：遍历删除</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm -fr *</span><br></pre></td></tr></table></figure>","more":"<ul>\n<li>使用rsync删除<blockquote>\n<p>实际原理：使用空文件夹替换要删除的文件夹</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#建立新的空文件夹</span></span><br><span class=\"line\">$ mkdir src</span><br><span class=\"line\"><span class=\"comment\">#建立实际有很多文件的文件夹</span></span><br><span class=\"line\">$ mkdir dest</span><br><span class=\"line\"><span class=\"comment\">#模拟生成大量文件  900000个文件</span></span><br><span class=\"line\">$ touch file&#123;1..900000&#125;</span><br><span class=\"line\"><span class=\"comment\">#使用rsync删除</span></span><br><span class=\"line\"><span class=\"comment\"># -r 包含文件夹 -l 符号链接 -p 权限 permission -t 保持文件修改时间 -D 特殊设备</span></span><br><span class=\"line\">$ rsync --delete-before -rlptD src/ dest</span><br><span class=\"line\"><span class=\"comment\">#或者(与上面一样的效果)</span></span><br><span class=\"line\">$ rsync -a --delete-before --no-o --no-g src/ dest</span><br></pre></td></tr></table></figure>"},{"title":"linux删除文件除过某个文件","date":"2018-02-01T01:43:10.000Z","_content":"\n### 使用rm \n> 删除除了file1 的文件\n\n\n\n```bash\nrm -fr !(file1)\n```\n<!--more-->\n\n\n### 使用find\n> 删除除了file1\n\n```bash\nfind ./* -not -name \"file1\" | xargs rm -fr\nfind ./* -not -name \"file1\" -exec rm -fr {} \\;\n```\n\n\n\n","source":"_posts/linux删除文件除过某个文件.md","raw":"---\ntitle: linux删除文件除过某个文件\ndate: 2018-02-01 09:43:10\ntags: [\"rm\",\"find\"]\ncategory: [\"linux\",\"shell\"]\n---\n\n### 使用rm \n> 删除除了file1 的文件\n\n\n\n```bash\nrm -fr !(file1)\n```\n<!--more-->\n\n\n### 使用find\n> 删除除了file1\n\n```bash\nfind ./* -not -name \"file1\" | xargs rm -fr\nfind ./* -not -name \"file1\" -exec rm -fr {} \\;\n```\n\n\n\n","slug":"linux删除文件除过某个文件","published":1,"updated":"2019-09-23T06:59:27.958Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0w29rke000zuup25akww5bb","content":"<h3 id=\"使用rm\"><a href=\"#使用rm\" class=\"headerlink\" title=\"使用rm\"></a>使用rm</h3><blockquote>\n<p>删除除了file1 的文件</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -fr !(file1)</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"使用find\"><a href=\"#使用find\" class=\"headerlink\" title=\"使用find\"></a>使用find</h3><blockquote>\n<p>删除除了file1</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find ./* -not -name <span class=\"string\">\"file1\"</span> | xargs rm -fr</span><br><span class=\"line\">find ./* -not -name <span class=\"string\">\"file1\"</span> -<span class=\"built_in\">exec</span> rm -fr &#123;&#125; \\;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"<h3 id=\"使用rm\"><a href=\"#使用rm\" class=\"headerlink\" title=\"使用rm\"></a>使用rm</h3><blockquote>\n<p>删除除了file1 的文件</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -fr !(file1)</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"使用find\"><a href=\"#使用find\" class=\"headerlink\" title=\"使用find\"></a>使用find</h3><blockquote>\n<p>删除除了file1</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find ./* -not -name <span class=\"string\">\"file1\"</span> | xargs rm -fr</span><br><span class=\"line\">find ./* -not -name <span class=\"string\">\"file1\"</span> -<span class=\"built_in\">exec</span> rm -fr &#123;&#125; \\;</span><br></pre></td></tr></table></figure>"},{"title":"localtunnel server端搭建","date":"2018-03-15T01:56:46.000Z","_content":"\n## localtunnel server\n### 下载程序\n> 以下地址为localtunnel server的git页面\n\n`https://github.com/localtunnel/server`\n\n> 下载安装\n\n* 前提：本机安装git、 nodejs \n* 有独立域名、独立主机（公网ip）\n<!--more-->\n\n```bash\n$ git clone  https://github.com/localtunnel/server.git\n$ cd localtunnel-server\n$ npm install\n```\n\n> 启动\n\n```bash\n# 直接使用\n$ bin/server --port 2000\n# 配合 pm2 使用\n$ pm2 start bin/server --name lt -- --port 2000\n```\n\n> server配合nginx使用\n\n* 配置如下：\n\n```nginx\nupstream server {\n\n                server 127.0.0.1:8099;\n        }\nmap $http_upgrade $connection_upgrade {\n    default upgrade;\n    ''      close;\n}\n\nserver {\n        listen 80 default_server;\n        server_name example.com;\n    location / {\n        proxy_pass http://server;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Forwarded-Proto http;\n        proxy_set_header X-NginX-Proxy true;\n     #  proxy_set_header Upgrade $http_upgrade;\n     #  proxy_set_header Connection $connection_upgrade;\n\n        proxy_redirect off;\n                }\n        }\n\n server {\n        listen       443 default_server ssl;\n        server_name  example.com;\n        ssl on;\n        ssl_certificate      /etc/letsencrypt/live/example.com/fullchain.pem;\n        ssl_certificate_key  /etc/letsencrypt/live/example.com/privkey.pem;\n\n        ssl_session_cache    shared:SSL:1m;\n        ssl_session_timeout  5m;\n\n        ssl_ciphers  HIGH:!aNULL:!MD5;\n        ssl_prefer_server_ciphers  on;\n\n        location / {\n\n        proxy_pass http://server/;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Forwarded-Proto https;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n\n        proxy_set_header X-NginX-Proxy true;\n        proxy_redirect off;\n        }\n    }\n```\n\n\n> client端使用\n\n```bash\n# 安装client端\n$ npm i localtunnel -g\n# 使用localtunnel默认服务器启动本地监听8080端口\n$ lt --port 8080\n# 使用自己搭建的服务器启动监听本地8080端口\n$ lt -h http://example.com --port 8080\n# 指定二级域名启动监听\n$ lt -s ceshi -h http://example.com --port 8080 \n```\n\n\n","source":"_posts/localtunnel-server端搭建.md","raw":"---\ntitle: localtunnel server端搭建\ndate: 2018-03-15 09:56:46\ntags: [\"localtunnel\",\"nginx\",\"内网穿透\"]\ncategory: [\"内网穿透\"]\n---\n\n## localtunnel server\n### 下载程序\n> 以下地址为localtunnel server的git页面\n\n`https://github.com/localtunnel/server`\n\n> 下载安装\n\n* 前提：本机安装git、 nodejs \n* 有独立域名、独立主机（公网ip）\n<!--more-->\n\n```bash\n$ git clone  https://github.com/localtunnel/server.git\n$ cd localtunnel-server\n$ npm install\n```\n\n> 启动\n\n```bash\n# 直接使用\n$ bin/server --port 2000\n# 配合 pm2 使用\n$ pm2 start bin/server --name lt -- --port 2000\n```\n\n> server配合nginx使用\n\n* 配置如下：\n\n```nginx\nupstream server {\n\n                server 127.0.0.1:8099;\n        }\nmap $http_upgrade $connection_upgrade {\n    default upgrade;\n    ''      close;\n}\n\nserver {\n        listen 80 default_server;\n        server_name example.com;\n    location / {\n        proxy_pass http://server;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Forwarded-Proto http;\n        proxy_set_header X-NginX-Proxy true;\n     #  proxy_set_header Upgrade $http_upgrade;\n     #  proxy_set_header Connection $connection_upgrade;\n\n        proxy_redirect off;\n                }\n        }\n\n server {\n        listen       443 default_server ssl;\n        server_name  example.com;\n        ssl on;\n        ssl_certificate      /etc/letsencrypt/live/example.com/fullchain.pem;\n        ssl_certificate_key  /etc/letsencrypt/live/example.com/privkey.pem;\n\n        ssl_session_cache    shared:SSL:1m;\n        ssl_session_timeout  5m;\n\n        ssl_ciphers  HIGH:!aNULL:!MD5;\n        ssl_prefer_server_ciphers  on;\n\n        location / {\n\n        proxy_pass http://server/;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Forwarded-Proto https;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n\n        proxy_set_header X-NginX-Proxy true;\n        proxy_redirect off;\n        }\n    }\n```\n\n\n> client端使用\n\n```bash\n# 安装client端\n$ npm i localtunnel -g\n# 使用localtunnel默认服务器启动本地监听8080端口\n$ lt --port 8080\n# 使用自己搭建的服务器启动监听本地8080端口\n$ lt -h http://example.com --port 8080\n# 指定二级域名启动监听\n$ lt -s ceshi -h http://example.com --port 8080 \n```\n\n\n","slug":"localtunnel-server端搭建","published":1,"updated":"2019-09-23T06:59:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0w29rkf0011uup2xmi8l1b6","content":"<h2 id=\"localtunnel-server\"><a href=\"#localtunnel-server\" class=\"headerlink\" title=\"localtunnel server\"></a>localtunnel server</h2><h3 id=\"下载程序\"><a href=\"#下载程序\" class=\"headerlink\" title=\"下载程序\"></a>下载程序</h3><blockquote>\n<p>以下地址为localtunnel server的git页面</p>\n</blockquote>\n<p><code>https://github.com/localtunnel/server</code></p>\n<blockquote>\n<p>下载安装</p>\n</blockquote>\n<ul>\n<li>前提：本机安装git、 nodejs </li>\n<li>有独立域名、独立主机（公网ip）<a id=\"more\"></a>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span>  https://github.com/localtunnel/server.git</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> localtunnel-server</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>启动</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 直接使用</span></span><br><span class=\"line\">$ bin/server --port 2000</span><br><span class=\"line\"><span class=\"comment\"># 配合 pm2 使用</span></span><br><span class=\"line\">$ pm2 start bin/server --name lt -- --port 2000</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>server配合nginx使用</p>\n</blockquote>\n<ul>\n<li>配置如下：</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">upstream</span> server &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"attribute\">server</span> <span class=\"number\">127.0.0.1:8099</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"attribute\">map</span> <span class=\"variable\">$http_upgrade</span> <span class=\"variable\">$connection_upgrade</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">default</span> upgrade;</span><br><span class=\"line\">    ''      close;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span> <span class=\"number\">80</span> default_server;</span><br><span class=\"line\">        <span class=\"attribute\">server_name</span> example.com;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://server;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Forwarded-Proto http;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-NginX-Proxy <span class=\"literal\">true</span>;</span><br><span class=\"line\">     <span class=\"comment\">#  proxy_set_header Upgrade $http_upgrade;</span></span><br><span class=\"line\">     <span class=\"comment\">#  proxy_set_header Connection $connection_upgrade;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">proxy_redirect</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span>       <span class=\"number\">443</span> default_server ssl;</span><br><span class=\"line\">        <span class=\"attribute\">server_name</span>  example.com;</span><br><span class=\"line\">        <span class=\"attribute\">ssl</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">        <span class=\"attribute\">ssl_certificate</span>      /etc/letsencrypt/live/example.com/fullchain.pem;</span><br><span class=\"line\">        <span class=\"attribute\">ssl_certificate_key</span>  /etc/letsencrypt/live/example.com/privkey.pem;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">ssl_session_cache</span>    shared:SSL:<span class=\"number\">1m</span>;</span><br><span class=\"line\">        <span class=\"attribute\">ssl_session_timeout</span>  <span class=\"number\">5m</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">ssl_ciphers</span>  HIGH:!aNULL:!MD5;</span><br><span class=\"line\">        <span class=\"attribute\">ssl_prefer_server_ciphers</span>  <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://server/;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Forwarded-Proto https;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> Upgrade <span class=\"variable\">$http_upgrade</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> Connection <span class=\"variable\">$connection_upgrade</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-NginX-Proxy <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_redirect</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>client端使用</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装client端</span></span><br><span class=\"line\">$ npm i localtunnel -g</span><br><span class=\"line\"><span class=\"comment\"># 使用localtunnel默认服务器启动本地监听8080端口</span></span><br><span class=\"line\">$ lt --port 8080</span><br><span class=\"line\"><span class=\"comment\"># 使用自己搭建的服务器启动监听本地8080端口</span></span><br><span class=\"line\">$ lt -h http://example.com --port 8080</span><br><span class=\"line\"><span class=\"comment\"># 指定二级域名启动监听</span></span><br><span class=\"line\">$ lt -s ceshi -h http://example.com --port 8080</span><br></pre></td></tr></table></figure>\n","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"<h2 id=\"localtunnel-server\"><a href=\"#localtunnel-server\" class=\"headerlink\" title=\"localtunnel server\"></a>localtunnel server</h2><h3 id=\"下载程序\"><a href=\"#下载程序\" class=\"headerlink\" title=\"下载程序\"></a>下载程序</h3><blockquote>\n<p>以下地址为localtunnel server的git页面</p>\n</blockquote>\n<p><code>https://github.com/localtunnel/server</code></p>\n<blockquote>\n<p>下载安装</p>\n</blockquote>\n<ul>\n<li>前提：本机安装git、 nodejs </li>\n<li>有独立域名、独立主机（公网ip）","more":"</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span>  https://github.com/localtunnel/server.git</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> localtunnel-server</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>启动</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 直接使用</span></span><br><span class=\"line\">$ bin/server --port 2000</span><br><span class=\"line\"><span class=\"comment\"># 配合 pm2 使用</span></span><br><span class=\"line\">$ pm2 start bin/server --name lt -- --port 2000</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>server配合nginx使用</p>\n</blockquote>\n<ul>\n<li>配置如下：</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">upstream</span> server &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"attribute\">server</span> <span class=\"number\">127.0.0.1:8099</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"attribute\">map</span> <span class=\"variable\">$http_upgrade</span> <span class=\"variable\">$connection_upgrade</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">default</span> upgrade;</span><br><span class=\"line\">    ''      close;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span> <span class=\"number\">80</span> default_server;</span><br><span class=\"line\">        <span class=\"attribute\">server_name</span> example.com;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://server;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Forwarded-Proto http;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-NginX-Proxy <span class=\"literal\">true</span>;</span><br><span class=\"line\">     <span class=\"comment\">#  proxy_set_header Upgrade $http_upgrade;</span></span><br><span class=\"line\">     <span class=\"comment\">#  proxy_set_header Connection $connection_upgrade;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">proxy_redirect</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span>       <span class=\"number\">443</span> default_server ssl;</span><br><span class=\"line\">        <span class=\"attribute\">server_name</span>  example.com;</span><br><span class=\"line\">        <span class=\"attribute\">ssl</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">        <span class=\"attribute\">ssl_certificate</span>      /etc/letsencrypt/live/example.com/fullchain.pem;</span><br><span class=\"line\">        <span class=\"attribute\">ssl_certificate_key</span>  /etc/letsencrypt/live/example.com/privkey.pem;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">ssl_session_cache</span>    shared:SSL:<span class=\"number\">1m</span>;</span><br><span class=\"line\">        <span class=\"attribute\">ssl_session_timeout</span>  <span class=\"number\">5m</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">ssl_ciphers</span>  HIGH:!aNULL:!MD5;</span><br><span class=\"line\">        <span class=\"attribute\">ssl_prefer_server_ciphers</span>  <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://server/;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Forwarded-Proto https;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> Upgrade <span class=\"variable\">$http_upgrade</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> Connection <span class=\"variable\">$connection_upgrade</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-NginX-Proxy <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_redirect</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>client端使用</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装client端</span></span><br><span class=\"line\">$ npm i localtunnel -g</span><br><span class=\"line\"><span class=\"comment\"># 使用localtunnel默认服务器启动本地监听8080端口</span></span><br><span class=\"line\">$ lt --port 8080</span><br><span class=\"line\"><span class=\"comment\"># 使用自己搭建的服务器启动监听本地8080端口</span></span><br><span class=\"line\">$ lt -h http://example.com --port 8080</span><br><span class=\"line\"><span class=\"comment\"># 指定二级域名启动监听</span></span><br><span class=\"line\">$ lt -s ceshi -h http://example.com --port 8080</span><br></pre></td></tr></table></figure>"},{"title":"mongodb 整合kerberos以及java连接","date":"2018-09-26T00:36:02.000Z","_content":"\n### 简介\n\n* Kerberos（KDC） 几个重要的概念：\n\n```\nPrincipal：任何服务器所提供的用户、计算机、服务都将被定义成Principal。本例使用客户端使用：mongodb@HZ.COM  mongodb服务端使用：mongodb/hz.com@HZ.COM\nInstances：用于服务principals和特殊管理Principal。\nRealms：Kerberos安装提供的独特的域的控制，把它想象成你的主机和用户所属的主机或者组。官方约定这域需要大写。默认的，Ubuntu将把DNS域名转换为大写当成这里的域。 本例使用HZ.COM\nKey Distribution Center: （KDC）由三部分组成，一是principal数据库，认证服务器，和票据授予服务器。每个Realm至少要有一个。\nTicket Granting Ticket：由认证服务器（AS）签发，Ticket Granting Ticket (TGT)使用用户的密码加密，这个密码只有用户和KDC知道。\nTicket Granting Server: (TGS) 根据请求签发服务的票据。\nTickets：确认两个Principal的身份。一个主体是用户，另一个是由用户请求的服务。门票会建立一个加密密钥，用于在身份验证会话中的安全通信。\nKeytab Files：从KDC主数据库中提取的文件，并且包含的服务或主机的加密密钥。\n```\n<!--more-->\n\n* mongodb 启用kerberos\n使用kerberos授权登录可以更大的增加安全性\n\n\n### 安装带有kerberos认证的mongodb\n#### 安装kerberos\n    请参照网上相关的教程，作者后续会发布相关的安装教程\n\n\n#### 安装mongodb enterprice\n\n这是企业版下载链接 [mongodb enterprice](https://downloads.mongodb.com/linux/mongodb-linux-x86_64-enterprise-rhel70-4.0.2.tgz?_ga=2.98831574.996585356.1537869301-553143157.1537869299 \"mongodb\") \n\n本次安装基于centos7.2\n\n* 安装依赖的一些库\n```\nyum install cyrus-sasl cyrus-sasl-gssapi cyrus-sasl-plain krb5-libs libcurl libpcap lm_sensors-libs net-snmp net-snmp-agent-libs openldap openssl rpm-libs tcp_wrappers-libs -y\n```\n\n* 解压下载的mongodb\n\n```\n# 解压\n$ tar -xvf mongodb-linux-x86_64-enterprise-rhel70-4.0.2.tgz\n$ cd mongodb-linux-x86_64-enterprise-rhel70-4.0.2/\n$ mkdir data\n$ mkdir conf\n```\n\n$ vi conf/mongod.conf  #更改以下路径为自己的路径,ip为服务器的ip\n```\ndbpath=/root/mongodb/mongodb-linux-x86_64-enterprise-rhel70-4.0.2/data\n\n#where to log\nlogpath=/root/mongodb/mongodb-linux-x86_64-enterprise-rhel70-4.0.2/mongodb.log\n\nlogappend=true\n\nbind_ip = 10.211.55.5\nport = 27017\n\n# Enable journaling, http://www.mongodb.org/display/DOCS/Journaling\njournal=true\n\n```\n\n* 创建对应的kerberos用户以及keytab文件（hz.com为我自己的主机名）\n\n>客户端用户：mongodb@HZ.COM  mongodb服务端用户：mongodb/hz.com@HZ.COM\n>keytab文件：mongodb.keytab                  mongodb_hz.keytab\n\n\n* 将mongodb目录下的bin文件夹加入到PATH\n\n以下两句可以追加到文件末尾：/etc/profile   具体路径请根据自己的进行修改\n\n```\nexport MONGODB_HOME=/root/mongodb/mongodb-linux-x86_64-enterprise-rhel70-4.0.2\nexport PATH=$MONGODB_HOME/bin:$PATH\nexport KRB5_KTNAME=/root/mongodb_hz.keytab\n```\n执行source，使上面的追加起作用\nsource /etc/profile\n\n* 添加kerberos登录用户到mongodb\n\n```\ncd $MONGODB_HOME\n./bin/mongod -f conf/mongod.conf\n\n另起一个窗口，使用shell登录进去mongodb，并添加kerberos用户,请替换以下的kerberos客户端用户为你的用户\n\n$ mongo --host hz.com\n\nuse $external\n db.getSiblingDB(\"$external\").createUser(\n   {\n     user: \"mongodb@HZ.COM\",\n     roles: [ { role: \"root\", db: \"admin\" } ]\n   }\n)\nexit\n```\n* 使用kerberos认证启动mongodb\n\n```\n首先关闭上一个mongod服务,然后使用下面命令启动mongodb\n$ kdestory\n$ kinit -kt /root/mongodb_hz.keytab mongodb/hz.com\n$ mongod-auth --setParameter authenticationMechanisms=GSSAPI -f /root/mongodb/mongodb-linux-x86_64-enterprise-rhel70-4.0.2/conf/mongod.conf\n\n```\n启动后如下图\n![mongodb](/images/mongodb/2018-09-26-01.png)\n\n* 使用kerberos，登录mongodb\n\n```\n$ kdestory\n$ kinit -kt mongodb.keytab mongodb\n$ mongo --host hz.com --authenticationMechanism=GSSAPI --authenticationDatabase='$external' --username mongodb@HZ.COM\n$ show dbs\n```\n如下图，表示成功\n![mongodb](/images/mongodb/2018-09-26-02.png)\n\n\n\n### 使用java连接带有kerberos的mongodb\n\n使用maven工程构建，依赖如下\n```\n    <dependency>\n        <groupId>org.apache.hadoop</groupId>\n        <artifactId>hadoop-common</artifactId>\n        <version>2.6.0-cdh5.13.0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.mongodb</groupId>\n        <artifactId>mongo-java-driver</artifactId>\n        <version>3.8.2</version>\n    </dependency>\n```\n\n\b创建连接类MyMongo,请替换相关的用户名、host、krb5.conf、keytab文件位置等\n```\npackage com.hz.mongodb;\n\nimport com.mongodb.MongoClient;\nimport com.mongodb.MongoCredential;\nimport com.mongodb.ServerAddress;\nimport com.mongodb.client.*;\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.security.UserGroupInformation;\nimport org.bson.Document;\nimport java.io.IOException;\nimport java.security.PrivilegedAction;\nimport java.security.PrivilegedExceptionAction;\nimport java.util.Arrays;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-01-25\n * @time: 下午20:14\n */\npublic class MyMongo {\n    public static void main(String[] args) {\n        Configuration conf = new Configuration();\n        conf.set(\"hadoop.security.authentication\", \"Kerberos\");\n        System.setProperty(\"java.security.krb5.conf\", \"/Users/huangzhe/Downloads/krb5.conf\");\n        UserGroupInformation.setConfiguration(conf);\n         MongoClient client = null;\n        try {\n            UserGroupInformation ugi = UserGroupInformation.loginUserFromKeytabAndReturnUGI(\"mongodb@HZ.COM\", \"/Users/huangzhe/Downloads/mongodb.keytab\");\n\n            try {\n                client=ugi.doAs((PrivilegedExceptionAction<MongoClient>) () -> {\n                    MongoCredential credential = MongoCredential.createGSSAPICredential(\"mongodb@HZ.COM\");\n                    MongoClient result = new MongoClient(new ServerAddress(\"hz.com\", 27017),\n                            Arrays.asList(credential));\n                    MongoDatabase db = result.getDatabase(\"ceshi\");\n                    MongoIterable<String> tbs = db.listCollectionNames();\n                    MongoCursor<String> tbCursor = tbs.iterator();\n                    System.out.println(\"连接mongodb 成功\");\n                    return result;\n                });\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n            System.out.println(\"连接mongodb 失败\");\n        }\n\n        //获取对应的表\n        MongoDatabase db = client.getDatabase(\"mybase\");\n        MongoIterable<String> tbs = db.listCollectionNames();\n\n        MongoCursor<String> tbCursor = tbs.iterator();\n        while (tbCursor.hasNext()) {\n            System.out.println(tbCursor.next());\n        }\n\n        MongoCollection<Document> t = db.getCollection(\"test\");\n        FindIterable<Document> ds = t.find();\n        MongoCursor<Document> ss = ds.iterator();\n        while (ss.hasNext()){\n            System.out.println(ss.next());\n        }\n        System.out.println(t.count());\n    }\n}\n```\n\n","source":"_posts/mongodb-kerberos-2018-09-26.md","raw":"---\ntitle: mongodb 整合kerberos以及java连接\ndate: 2018-09-26 08:36:02\ntags: mongodb\ncategories: [\"kerberos\",\"mongodb\",\"java\"]\n---\n\n### 简介\n\n* Kerberos（KDC） 几个重要的概念：\n\n```\nPrincipal：任何服务器所提供的用户、计算机、服务都将被定义成Principal。本例使用客户端使用：mongodb@HZ.COM  mongodb服务端使用：mongodb/hz.com@HZ.COM\nInstances：用于服务principals和特殊管理Principal。\nRealms：Kerberos安装提供的独特的域的控制，把它想象成你的主机和用户所属的主机或者组。官方约定这域需要大写。默认的，Ubuntu将把DNS域名转换为大写当成这里的域。 本例使用HZ.COM\nKey Distribution Center: （KDC）由三部分组成，一是principal数据库，认证服务器，和票据授予服务器。每个Realm至少要有一个。\nTicket Granting Ticket：由认证服务器（AS）签发，Ticket Granting Ticket (TGT)使用用户的密码加密，这个密码只有用户和KDC知道。\nTicket Granting Server: (TGS) 根据请求签发服务的票据。\nTickets：确认两个Principal的身份。一个主体是用户，另一个是由用户请求的服务。门票会建立一个加密密钥，用于在身份验证会话中的安全通信。\nKeytab Files：从KDC主数据库中提取的文件，并且包含的服务或主机的加密密钥。\n```\n<!--more-->\n\n* mongodb 启用kerberos\n使用kerberos授权登录可以更大的增加安全性\n\n\n### 安装带有kerberos认证的mongodb\n#### 安装kerberos\n    请参照网上相关的教程，作者后续会发布相关的安装教程\n\n\n#### 安装mongodb enterprice\n\n这是企业版下载链接 [mongodb enterprice](https://downloads.mongodb.com/linux/mongodb-linux-x86_64-enterprise-rhel70-4.0.2.tgz?_ga=2.98831574.996585356.1537869301-553143157.1537869299 \"mongodb\") \n\n本次安装基于centos7.2\n\n* 安装依赖的一些库\n```\nyum install cyrus-sasl cyrus-sasl-gssapi cyrus-sasl-plain krb5-libs libcurl libpcap lm_sensors-libs net-snmp net-snmp-agent-libs openldap openssl rpm-libs tcp_wrappers-libs -y\n```\n\n* 解压下载的mongodb\n\n```\n# 解压\n$ tar -xvf mongodb-linux-x86_64-enterprise-rhel70-4.0.2.tgz\n$ cd mongodb-linux-x86_64-enterprise-rhel70-4.0.2/\n$ mkdir data\n$ mkdir conf\n```\n\n$ vi conf/mongod.conf  #更改以下路径为自己的路径,ip为服务器的ip\n```\ndbpath=/root/mongodb/mongodb-linux-x86_64-enterprise-rhel70-4.0.2/data\n\n#where to log\nlogpath=/root/mongodb/mongodb-linux-x86_64-enterprise-rhel70-4.0.2/mongodb.log\n\nlogappend=true\n\nbind_ip = 10.211.55.5\nport = 27017\n\n# Enable journaling, http://www.mongodb.org/display/DOCS/Journaling\njournal=true\n\n```\n\n* 创建对应的kerberos用户以及keytab文件（hz.com为我自己的主机名）\n\n>客户端用户：mongodb@HZ.COM  mongodb服务端用户：mongodb/hz.com@HZ.COM\n>keytab文件：mongodb.keytab                  mongodb_hz.keytab\n\n\n* 将mongodb目录下的bin文件夹加入到PATH\n\n以下两句可以追加到文件末尾：/etc/profile   具体路径请根据自己的进行修改\n\n```\nexport MONGODB_HOME=/root/mongodb/mongodb-linux-x86_64-enterprise-rhel70-4.0.2\nexport PATH=$MONGODB_HOME/bin:$PATH\nexport KRB5_KTNAME=/root/mongodb_hz.keytab\n```\n执行source，使上面的追加起作用\nsource /etc/profile\n\n* 添加kerberos登录用户到mongodb\n\n```\ncd $MONGODB_HOME\n./bin/mongod -f conf/mongod.conf\n\n另起一个窗口，使用shell登录进去mongodb，并添加kerberos用户,请替换以下的kerberos客户端用户为你的用户\n\n$ mongo --host hz.com\n\nuse $external\n db.getSiblingDB(\"$external\").createUser(\n   {\n     user: \"mongodb@HZ.COM\",\n     roles: [ { role: \"root\", db: \"admin\" } ]\n   }\n)\nexit\n```\n* 使用kerberos认证启动mongodb\n\n```\n首先关闭上一个mongod服务,然后使用下面命令启动mongodb\n$ kdestory\n$ kinit -kt /root/mongodb_hz.keytab mongodb/hz.com\n$ mongod-auth --setParameter authenticationMechanisms=GSSAPI -f /root/mongodb/mongodb-linux-x86_64-enterprise-rhel70-4.0.2/conf/mongod.conf\n\n```\n启动后如下图\n![mongodb](/images/mongodb/2018-09-26-01.png)\n\n* 使用kerberos，登录mongodb\n\n```\n$ kdestory\n$ kinit -kt mongodb.keytab mongodb\n$ mongo --host hz.com --authenticationMechanism=GSSAPI --authenticationDatabase='$external' --username mongodb@HZ.COM\n$ show dbs\n```\n如下图，表示成功\n![mongodb](/images/mongodb/2018-09-26-02.png)\n\n\n\n### 使用java连接带有kerberos的mongodb\n\n使用maven工程构建，依赖如下\n```\n    <dependency>\n        <groupId>org.apache.hadoop</groupId>\n        <artifactId>hadoop-common</artifactId>\n        <version>2.6.0-cdh5.13.0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.mongodb</groupId>\n        <artifactId>mongo-java-driver</artifactId>\n        <version>3.8.2</version>\n    </dependency>\n```\n\n\b创建连接类MyMongo,请替换相关的用户名、host、krb5.conf、keytab文件位置等\n```\npackage com.hz.mongodb;\n\nimport com.mongodb.MongoClient;\nimport com.mongodb.MongoCredential;\nimport com.mongodb.ServerAddress;\nimport com.mongodb.client.*;\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.security.UserGroupInformation;\nimport org.bson.Document;\nimport java.io.IOException;\nimport java.security.PrivilegedAction;\nimport java.security.PrivilegedExceptionAction;\nimport java.util.Arrays;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-01-25\n * @time: 下午20:14\n */\npublic class MyMongo {\n    public static void main(String[] args) {\n        Configuration conf = new Configuration();\n        conf.set(\"hadoop.security.authentication\", \"Kerberos\");\n        System.setProperty(\"java.security.krb5.conf\", \"/Users/huangzhe/Downloads/krb5.conf\");\n        UserGroupInformation.setConfiguration(conf);\n         MongoClient client = null;\n        try {\n            UserGroupInformation ugi = UserGroupInformation.loginUserFromKeytabAndReturnUGI(\"mongodb@HZ.COM\", \"/Users/huangzhe/Downloads/mongodb.keytab\");\n\n            try {\n                client=ugi.doAs((PrivilegedExceptionAction<MongoClient>) () -> {\n                    MongoCredential credential = MongoCredential.createGSSAPICredential(\"mongodb@HZ.COM\");\n                    MongoClient result = new MongoClient(new ServerAddress(\"hz.com\", 27017),\n                            Arrays.asList(credential));\n                    MongoDatabase db = result.getDatabase(\"ceshi\");\n                    MongoIterable<String> tbs = db.listCollectionNames();\n                    MongoCursor<String> tbCursor = tbs.iterator();\n                    System.out.println(\"连接mongodb 成功\");\n                    return result;\n                });\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n            System.out.println(\"连接mongodb 失败\");\n        }\n\n        //获取对应的表\n        MongoDatabase db = client.getDatabase(\"mybase\");\n        MongoIterable<String> tbs = db.listCollectionNames();\n\n        MongoCursor<String> tbCursor = tbs.iterator();\n        while (tbCursor.hasNext()) {\n            System.out.println(tbCursor.next());\n        }\n\n        MongoCollection<Document> t = db.getCollection(\"test\");\n        FindIterable<Document> ds = t.find();\n        MongoCursor<Document> ss = ds.iterator();\n        while (ss.hasNext()){\n            System.out.println(ss.next());\n        }\n        System.out.println(t.count());\n    }\n}\n```\n\n","slug":"mongodb-kerberos-2018-09-26","published":1,"updated":"2019-09-23T06:59:23.082Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0w29rkh0016uup2s8yuwt5m","content":"<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><ul>\n<li>Kerberos（KDC） 几个重要的概念：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Principal：任何服务器所提供的用户、计算机、服务都将被定义成Principal。本例使用客户端使用：mongodb@HZ.COM  mongodb服务端使用：mongodb/hz.com@HZ.COM</span><br><span class=\"line\">Instances：用于服务principals和特殊管理Principal。</span><br><span class=\"line\">Realms：Kerberos安装提供的独特的域的控制，把它想象成你的主机和用户所属的主机或者组。官方约定这域需要大写。默认的，Ubuntu将把DNS域名转换为大写当成这里的域。 本例使用HZ.COM</span><br><span class=\"line\">Key Distribution Center: （KDC）由三部分组成，一是principal数据库，认证服务器，和票据授予服务器。每个Realm至少要有一个。</span><br><span class=\"line\">Ticket Granting Ticket：由认证服务器（AS）签发，Ticket Granting Ticket (TGT)使用用户的密码加密，这个密码只有用户和KDC知道。</span><br><span class=\"line\">Ticket Granting Server: (TGS) 根据请求签发服务的票据。</span><br><span class=\"line\">Tickets：确认两个Principal的身份。一个主体是用户，另一个是由用户请求的服务。门票会建立一个加密密钥，用于在身份验证会话中的安全通信。</span><br><span class=\"line\">Keytab Files：从KDC主数据库中提取的文件，并且包含的服务或主机的加密密钥。</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li>mongodb 启用kerberos<br>使用kerberos授权登录可以更大的增加安全性</li>\n</ul>\n<h3 id=\"安装带有kerberos认证的mongodb\"><a href=\"#安装带有kerberos认证的mongodb\" class=\"headerlink\" title=\"安装带有kerberos认证的mongodb\"></a>安装带有kerberos认证的mongodb</h3><h4 id=\"安装kerberos\"><a href=\"#安装kerberos\" class=\"headerlink\" title=\"安装kerberos\"></a>安装kerberos</h4><pre><code>请参照网上相关的教程，作者后续会发布相关的安装教程\n</code></pre><h4 id=\"安装mongodb-enterprice\"><a href=\"#安装mongodb-enterprice\" class=\"headerlink\" title=\"安装mongodb enterprice\"></a>安装mongodb enterprice</h4><p>这是企业版下载链接 <a href=\"https://downloads.mongodb.com/linux/mongodb-linux-x86_64-enterprise-rhel70-4.0.2.tgz?_ga=2.98831574.996585356.1537869301-553143157.1537869299\" title=\"mongodb\" target=\"_blank\" rel=\"noopener\">mongodb enterprice</a> </p>\n<p>本次安装基于centos7.2</p>\n<ul>\n<li><p>安装依赖的一些库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install cyrus-sasl cyrus-sasl-gssapi cyrus-sasl-plain krb5-libs libcurl libpcap lm_sensors-libs net-snmp net-snmp-agent-libs openldap openssl rpm-libs tcp_wrappers-libs -y</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解压下载的mongodb</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 解压</span><br><span class=\"line\">$ tar -xvf mongodb-linux-x86_64-enterprise-rhel70-4.0.2.tgz</span><br><span class=\"line\">$ cd mongodb-linux-x86_64-enterprise-rhel70-4.0.2/</span><br><span class=\"line\">$ mkdir data</span><br><span class=\"line\">$ mkdir conf</span><br></pre></td></tr></table></figure>\n<p>$ vi conf/mongod.conf  #更改以下路径为自己的路径,ip为服务器的ip<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dbpath=/root/mongodb/mongodb-linux-x86_64-enterprise-rhel70-4.0.2/data</span><br><span class=\"line\"></span><br><span class=\"line\">#where to log</span><br><span class=\"line\">logpath=/root/mongodb/mongodb-linux-x86_64-enterprise-rhel70-4.0.2/mongodb.log</span><br><span class=\"line\"></span><br><span class=\"line\">logappend=true</span><br><span class=\"line\"></span><br><span class=\"line\">bind_ip = 10.211.55.5</span><br><span class=\"line\">port = 27017</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable journaling, http://www.mongodb.org/display/DOCS/Journaling</span><br><span class=\"line\">journal=true</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>创建对应的kerberos用户以及keytab文件（hz.com为我自己的主机名）</li>\n</ul>\n<blockquote>\n<p>客户端用户：mongodb@HZ.COM  mongodb服务端用户：mongodb/hz.com@HZ.COM<br>keytab文件：mongodb.keytab                  mongodb_hz.keytab</p>\n</blockquote>\n<ul>\n<li>将mongodb目录下的bin文件夹加入到PATH</li>\n</ul>\n<p>以下两句可以追加到文件末尾：/etc/profile   具体路径请根据自己的进行修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export MONGODB_HOME=/root/mongodb/mongodb-linux-x86_64-enterprise-rhel70-4.0.2</span><br><span class=\"line\">export PATH=$MONGODB_HOME/bin:$PATH</span><br><span class=\"line\">export KRB5_KTNAME=/root/mongodb_hz.keytab</span><br></pre></td></tr></table></figure>\n<p>执行source，使上面的追加起作用<br>source /etc/profile</p>\n<ul>\n<li>添加kerberos登录用户到mongodb</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd $MONGODB_HOME</span><br><span class=\"line\">./bin/mongod -f conf/mongod.conf</span><br><span class=\"line\"></span><br><span class=\"line\">另起一个窗口，使用shell登录进去mongodb，并添加kerberos用户,请替换以下的kerberos客户端用户为你的用户</span><br><span class=\"line\"></span><br><span class=\"line\">$ mongo --host hz.com</span><br><span class=\"line\"></span><br><span class=\"line\">use $external</span><br><span class=\"line\"> db.getSiblingDB(&quot;$external&quot;).createUser(</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     user: &quot;mongodb@HZ.COM&quot;,</span><br><span class=\"line\">     roles: [ &#123; role: &quot;root&quot;, db: &quot;admin&quot; &#125; ]</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用kerberos认证启动mongodb</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">首先关闭上一个mongod服务,然后使用下面命令启动mongodb</span><br><span class=\"line\">$ kdestory</span><br><span class=\"line\">$ kinit -kt /root/mongodb_hz.keytab mongodb/hz.com</span><br><span class=\"line\">$ mongod-auth --setParameter authenticationMechanisms=GSSAPI -f /root/mongodb/mongodb-linux-x86_64-enterprise-rhel70-4.0.2/conf/mongod.conf</span><br></pre></td></tr></table></figure>\n<p>启动后如下图<br><img src=\"/images/mongodb/2018-09-26-01.png\" alt=\"mongodb\"></p>\n<ul>\n<li>使用kerberos，登录mongodb</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kdestory</span><br><span class=\"line\">$ kinit -kt mongodb.keytab mongodb</span><br><span class=\"line\">$ mongo --host hz.com --authenticationMechanism=GSSAPI --authenticationDatabase=&apos;$external&apos; --username mongodb@HZ.COM</span><br><span class=\"line\">$ show dbs</span><br></pre></td></tr></table></figure>\n<p>如下图，表示成功<br><img src=\"/images/mongodb/2018-09-26-02.png\" alt=\"mongodb\"></p>\n<h3 id=\"使用java连接带有kerberos的mongodb\"><a href=\"#使用java连接带有kerberos的mongodb\" class=\"headerlink\" title=\"使用java连接带有kerberos的mongodb\"></a>使用java连接带有kerberos的mongodb</h3><p>使用maven工程构建，依赖如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;hadoop-common&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.6.0-cdh5.13.0&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.mongodb&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mongo-java-driver&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.8.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>\b创建连接类MyMongo,请替换相关的用户名、host、krb5.conf、keytab文件位置等<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.hz.mongodb;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.mongodb.MongoClient;</span><br><span class=\"line\">import com.mongodb.MongoCredential;</span><br><span class=\"line\">import com.mongodb.ServerAddress;</span><br><span class=\"line\">import com.mongodb.client.*;</span><br><span class=\"line\">import org.apache.hadoop.conf.Configuration;</span><br><span class=\"line\">import org.apache.hadoop.security.UserGroupInformation;</span><br><span class=\"line\">import org.bson.Document;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.security.PrivilegedAction;</span><br><span class=\"line\">import java.security.PrivilegedExceptionAction;</span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-01-25</span><br><span class=\"line\"> * @time: 下午20:14</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MyMongo &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Configuration conf = new Configuration();</span><br><span class=\"line\">        conf.set(&quot;hadoop.security.authentication&quot;, &quot;Kerberos&quot;);</span><br><span class=\"line\">        System.setProperty(&quot;java.security.krb5.conf&quot;, &quot;/Users/huangzhe/Downloads/krb5.conf&quot;);</span><br><span class=\"line\">        UserGroupInformation.setConfiguration(conf);</span><br><span class=\"line\">         MongoClient client = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            UserGroupInformation ugi = UserGroupInformation.loginUserFromKeytabAndReturnUGI(&quot;mongodb@HZ.COM&quot;, &quot;/Users/huangzhe/Downloads/mongodb.keytab&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                client=ugi.doAs((PrivilegedExceptionAction&lt;MongoClient&gt;) () -&gt; &#123;</span><br><span class=\"line\">                    MongoCredential credential = MongoCredential.createGSSAPICredential(&quot;mongodb@HZ.COM&quot;);</span><br><span class=\"line\">                    MongoClient result = new MongoClient(new ServerAddress(&quot;hz.com&quot;, 27017),</span><br><span class=\"line\">                            Arrays.asList(credential));</span><br><span class=\"line\">                    MongoDatabase db = result.getDatabase(&quot;ceshi&quot;);</span><br><span class=\"line\">                    MongoIterable&lt;String&gt; tbs = db.listCollectionNames();</span><br><span class=\"line\">                    MongoCursor&lt;String&gt; tbCursor = tbs.iterator();</span><br><span class=\"line\">                    System.out.println(&quot;连接mongodb 成功&quot;);</span><br><span class=\"line\">                    return result;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            System.out.println(&quot;连接mongodb 失败&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //获取对应的表</span><br><span class=\"line\">        MongoDatabase db = client.getDatabase(&quot;mybase&quot;);</span><br><span class=\"line\">        MongoIterable&lt;String&gt; tbs = db.listCollectionNames();</span><br><span class=\"line\"></span><br><span class=\"line\">        MongoCursor&lt;String&gt; tbCursor = tbs.iterator();</span><br><span class=\"line\">        while (tbCursor.hasNext()) &#123;</span><br><span class=\"line\">            System.out.println(tbCursor.next());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        MongoCollection&lt;Document&gt; t = db.getCollection(&quot;test&quot;);</span><br><span class=\"line\">        FindIterable&lt;Document&gt; ds = t.find();</span><br><span class=\"line\">        MongoCursor&lt;Document&gt; ss = ds.iterator();</span><br><span class=\"line\">        while (ss.hasNext())&#123;</span><br><span class=\"line\">            System.out.println(ss.next());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(t.count());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><ul>\n<li>Kerberos（KDC） 几个重要的概念：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Principal：任何服务器所提供的用户、计算机、服务都将被定义成Principal。本例使用客户端使用：mongodb@HZ.COM  mongodb服务端使用：mongodb/hz.com@HZ.COM</span><br><span class=\"line\">Instances：用于服务principals和特殊管理Principal。</span><br><span class=\"line\">Realms：Kerberos安装提供的独特的域的控制，把它想象成你的主机和用户所属的主机或者组。官方约定这域需要大写。默认的，Ubuntu将把DNS域名转换为大写当成这里的域。 本例使用HZ.COM</span><br><span class=\"line\">Key Distribution Center: （KDC）由三部分组成，一是principal数据库，认证服务器，和票据授予服务器。每个Realm至少要有一个。</span><br><span class=\"line\">Ticket Granting Ticket：由认证服务器（AS）签发，Ticket Granting Ticket (TGT)使用用户的密码加密，这个密码只有用户和KDC知道。</span><br><span class=\"line\">Ticket Granting Server: (TGS) 根据请求签发服务的票据。</span><br><span class=\"line\">Tickets：确认两个Principal的身份。一个主体是用户，另一个是由用户请求的服务。门票会建立一个加密密钥，用于在身份验证会话中的安全通信。</span><br><span class=\"line\">Keytab Files：从KDC主数据库中提取的文件，并且包含的服务或主机的加密密钥。</span><br></pre></td></tr></table></figure>","more":"<ul>\n<li>mongodb 启用kerberos<br>使用kerberos授权登录可以更大的增加安全性</li>\n</ul>\n<h3 id=\"安装带有kerberos认证的mongodb\"><a href=\"#安装带有kerberos认证的mongodb\" class=\"headerlink\" title=\"安装带有kerberos认证的mongodb\"></a>安装带有kerberos认证的mongodb</h3><h4 id=\"安装kerberos\"><a href=\"#安装kerberos\" class=\"headerlink\" title=\"安装kerberos\"></a>安装kerberos</h4><pre><code>请参照网上相关的教程，作者后续会发布相关的安装教程\n</code></pre><h4 id=\"安装mongodb-enterprice\"><a href=\"#安装mongodb-enterprice\" class=\"headerlink\" title=\"安装mongodb enterprice\"></a>安装mongodb enterprice</h4><p>这是企业版下载链接 <a href=\"https://downloads.mongodb.com/linux/mongodb-linux-x86_64-enterprise-rhel70-4.0.2.tgz?_ga=2.98831574.996585356.1537869301-553143157.1537869299\" title=\"mongodb\" target=\"_blank\" rel=\"noopener\">mongodb enterprice</a> </p>\n<p>本次安装基于centos7.2</p>\n<ul>\n<li><p>安装依赖的一些库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install cyrus-sasl cyrus-sasl-gssapi cyrus-sasl-plain krb5-libs libcurl libpcap lm_sensors-libs net-snmp net-snmp-agent-libs openldap openssl rpm-libs tcp_wrappers-libs -y</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解压下载的mongodb</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 解压</span><br><span class=\"line\">$ tar -xvf mongodb-linux-x86_64-enterprise-rhel70-4.0.2.tgz</span><br><span class=\"line\">$ cd mongodb-linux-x86_64-enterprise-rhel70-4.0.2/</span><br><span class=\"line\">$ mkdir data</span><br><span class=\"line\">$ mkdir conf</span><br></pre></td></tr></table></figure>\n<p>$ vi conf/mongod.conf  #更改以下路径为自己的路径,ip为服务器的ip<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dbpath=/root/mongodb/mongodb-linux-x86_64-enterprise-rhel70-4.0.2/data</span><br><span class=\"line\"></span><br><span class=\"line\">#where to log</span><br><span class=\"line\">logpath=/root/mongodb/mongodb-linux-x86_64-enterprise-rhel70-4.0.2/mongodb.log</span><br><span class=\"line\"></span><br><span class=\"line\">logappend=true</span><br><span class=\"line\"></span><br><span class=\"line\">bind_ip = 10.211.55.5</span><br><span class=\"line\">port = 27017</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable journaling, http://www.mongodb.org/display/DOCS/Journaling</span><br><span class=\"line\">journal=true</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>创建对应的kerberos用户以及keytab文件（hz.com为我自己的主机名）</li>\n</ul>\n<blockquote>\n<p>客户端用户：mongodb@HZ.COM  mongodb服务端用户：mongodb/hz.com@HZ.COM<br>keytab文件：mongodb.keytab                  mongodb_hz.keytab</p>\n</blockquote>\n<ul>\n<li>将mongodb目录下的bin文件夹加入到PATH</li>\n</ul>\n<p>以下两句可以追加到文件末尾：/etc/profile   具体路径请根据自己的进行修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export MONGODB_HOME=/root/mongodb/mongodb-linux-x86_64-enterprise-rhel70-4.0.2</span><br><span class=\"line\">export PATH=$MONGODB_HOME/bin:$PATH</span><br><span class=\"line\">export KRB5_KTNAME=/root/mongodb_hz.keytab</span><br></pre></td></tr></table></figure>\n<p>执行source，使上面的追加起作用<br>source /etc/profile</p>\n<ul>\n<li>添加kerberos登录用户到mongodb</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd $MONGODB_HOME</span><br><span class=\"line\">./bin/mongod -f conf/mongod.conf</span><br><span class=\"line\"></span><br><span class=\"line\">另起一个窗口，使用shell登录进去mongodb，并添加kerberos用户,请替换以下的kerberos客户端用户为你的用户</span><br><span class=\"line\"></span><br><span class=\"line\">$ mongo --host hz.com</span><br><span class=\"line\"></span><br><span class=\"line\">use $external</span><br><span class=\"line\"> db.getSiblingDB(&quot;$external&quot;).createUser(</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     user: &quot;mongodb@HZ.COM&quot;,</span><br><span class=\"line\">     roles: [ &#123; role: &quot;root&quot;, db: &quot;admin&quot; &#125; ]</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用kerberos认证启动mongodb</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">首先关闭上一个mongod服务,然后使用下面命令启动mongodb</span><br><span class=\"line\">$ kdestory</span><br><span class=\"line\">$ kinit -kt /root/mongodb_hz.keytab mongodb/hz.com</span><br><span class=\"line\">$ mongod-auth --setParameter authenticationMechanisms=GSSAPI -f /root/mongodb/mongodb-linux-x86_64-enterprise-rhel70-4.0.2/conf/mongod.conf</span><br></pre></td></tr></table></figure>\n<p>启动后如下图<br><img src=\"/images/mongodb/2018-09-26-01.png\" alt=\"mongodb\"></p>\n<ul>\n<li>使用kerberos，登录mongodb</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kdestory</span><br><span class=\"line\">$ kinit -kt mongodb.keytab mongodb</span><br><span class=\"line\">$ mongo --host hz.com --authenticationMechanism=GSSAPI --authenticationDatabase=&apos;$external&apos; --username mongodb@HZ.COM</span><br><span class=\"line\">$ show dbs</span><br></pre></td></tr></table></figure>\n<p>如下图，表示成功<br><img src=\"/images/mongodb/2018-09-26-02.png\" alt=\"mongodb\"></p>\n<h3 id=\"使用java连接带有kerberos的mongodb\"><a href=\"#使用java连接带有kerberos的mongodb\" class=\"headerlink\" title=\"使用java连接带有kerberos的mongodb\"></a>使用java连接带有kerberos的mongodb</h3><p>使用maven工程构建，依赖如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;hadoop-common&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.6.0-cdh5.13.0&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.mongodb&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mongo-java-driver&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.8.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>\b创建连接类MyMongo,请替换相关的用户名、host、krb5.conf、keytab文件位置等<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.hz.mongodb;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.mongodb.MongoClient;</span><br><span class=\"line\">import com.mongodb.MongoCredential;</span><br><span class=\"line\">import com.mongodb.ServerAddress;</span><br><span class=\"line\">import com.mongodb.client.*;</span><br><span class=\"line\">import org.apache.hadoop.conf.Configuration;</span><br><span class=\"line\">import org.apache.hadoop.security.UserGroupInformation;</span><br><span class=\"line\">import org.bson.Document;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.security.PrivilegedAction;</span><br><span class=\"line\">import java.security.PrivilegedExceptionAction;</span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-01-25</span><br><span class=\"line\"> * @time: 下午20:14</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MyMongo &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Configuration conf = new Configuration();</span><br><span class=\"line\">        conf.set(&quot;hadoop.security.authentication&quot;, &quot;Kerberos&quot;);</span><br><span class=\"line\">        System.setProperty(&quot;java.security.krb5.conf&quot;, &quot;/Users/huangzhe/Downloads/krb5.conf&quot;);</span><br><span class=\"line\">        UserGroupInformation.setConfiguration(conf);</span><br><span class=\"line\">         MongoClient client = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            UserGroupInformation ugi = UserGroupInformation.loginUserFromKeytabAndReturnUGI(&quot;mongodb@HZ.COM&quot;, &quot;/Users/huangzhe/Downloads/mongodb.keytab&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                client=ugi.doAs((PrivilegedExceptionAction&lt;MongoClient&gt;) () -&gt; &#123;</span><br><span class=\"line\">                    MongoCredential credential = MongoCredential.createGSSAPICredential(&quot;mongodb@HZ.COM&quot;);</span><br><span class=\"line\">                    MongoClient result = new MongoClient(new ServerAddress(&quot;hz.com&quot;, 27017),</span><br><span class=\"line\">                            Arrays.asList(credential));</span><br><span class=\"line\">                    MongoDatabase db = result.getDatabase(&quot;ceshi&quot;);</span><br><span class=\"line\">                    MongoIterable&lt;String&gt; tbs = db.listCollectionNames();</span><br><span class=\"line\">                    MongoCursor&lt;String&gt; tbCursor = tbs.iterator();</span><br><span class=\"line\">                    System.out.println(&quot;连接mongodb 成功&quot;);</span><br><span class=\"line\">                    return result;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            System.out.println(&quot;连接mongodb 失败&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //获取对应的表</span><br><span class=\"line\">        MongoDatabase db = client.getDatabase(&quot;mybase&quot;);</span><br><span class=\"line\">        MongoIterable&lt;String&gt; tbs = db.listCollectionNames();</span><br><span class=\"line\"></span><br><span class=\"line\">        MongoCursor&lt;String&gt; tbCursor = tbs.iterator();</span><br><span class=\"line\">        while (tbCursor.hasNext()) &#123;</span><br><span class=\"line\">            System.out.println(tbCursor.next());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        MongoCollection&lt;Document&gt; t = db.getCollection(&quot;test&quot;);</span><br><span class=\"line\">        FindIterable&lt;Document&gt; ds = t.find();</span><br><span class=\"line\">        MongoCursor&lt;Document&gt; ss = ds.iterator();</span><br><span class=\"line\">        while (ss.hasNext())&#123;</span><br><span class=\"line\">            System.out.println(ss.next());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(t.count());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"netty编解码","date":"2018-07-17T00:36:02.000Z","_content":"\n\n## 关于netty的编解码\n\n关于netty的编解码学习，一般涉及到数据的出站与入站，在出站时调用编码、在入站时调用解码，编解码都是成对出现，不能出现只有一个。\n\n### netty的编解码类别\n\nnetty的编解码类别主要分为以下三种\n\n* ByteToMessage 入站解码\n* MessageToByte 出站编码\n* MessageToMessage  出站入站均可（编解码）\n<!--more-->\n\n* 解码继承：ByteToMessageDecoder,该类继承ChannelInboundHandlerAdapter   该类为进站处理\n* 编码继承：MessageToByteEncoder，该类继承ChannelOutboundHandlerAdapter  该类为出站处理\n\n## 例子实现编解码用一个组合handler来表示编解码（前两种）\n\n```\n例如：\npackage com.bj.hz.dzj;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelDuplexHandler;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\nimport io.netty.channel.CombinedChannelDuplexHandler;\nimport io.netty.handler.codec.ByteToMessageDecoder;\nimport io.netty.handler.codec.MessageToByteEncoder;\nimport java.util.List;\n\npublic class MyCodec extends CombinedChannelDuplexHandler {\n\n    public MyCodec(){\n        super(new Mydecode(),new Myencode());\n    }\n\n}\n\nclass Mydecode extends ByteToMessageDecoder{\n\n\n    @Override\n    protected void decode(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf, List<Object> list) throws Exception {\n        //这种是需要判断字节数组的容量是否足够解码，请参考最后使用ReplayingDecoder\n        if (byteBuf.readableBytes()>4){\n            list.add(byteBuf.readInt());\n        }\n    }\n}\n\nclass Myencode extends MessageToByteEncoder<Integer>{\n\n    @Override\n    protected void encode(ChannelHandlerContext channelHandlerContext, Integer integer, ByteBuf byteBuf) throws Exception {\n        byteBuf.writeInt(integer);\n    }\n}\n\n```\n\n\n\n### 使用codec可以统一编解码（前两种）\n* 使用codec 实现编解码一体\n\n```\npackage com.bj.hz.dzj;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.handler.codec.ByteToMessageCodec;\nimport java.util.List;\n\npublic class Mycodec1 extends ByteToMessageCodec<Integer> {\n\n    @Override\n    protected void decode(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf, List list) throws Exception {\n        if (byteBuf.readableBytes()>4){\n            list.add(byteBuf.readInt());\n        }\n    }\n\n    @Override\n    protected void encode(ChannelHandlerContext channelHandlerContext, Integer integer, ByteBuf byteBuf) throws Exception {\n        byteBuf.writeInt(integer);\n    }\n}\n```\n\n### 使用codec实现第三种\n该类型主要实现编码中协议（例如api等）转换\n\n```\npublic class MyMessagetoMessage extends MessageToMessageCodec<Integer,String> {\n    @Override\n    protected void encode(ChannelHandlerContext channelHandlerContext, String s, List<Object> list) throws Exception {\n        list.add(Integer.parseInt(s));\n    }\n\n    @Override\n    protected void decode(ChannelHandlerContext channelHandlerContext, Integer integer, List<Object> list) throws Exception {\n        list.add(String.valueOf(integer));\n    }\n}\n```\n\n### 使用ReplayingDecoder,来实现自动转换，当bytebuf中没有能够转换的足够字节，则会一直等待足够才会转换\n\n```\npackage com.bj.hz.dzj;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.handler.codec.ReplayingDecoder;\nimport java.util.List;\n\npublic class MyreplyingDecoder extends ReplayingDecoder<Integer> {\n    @Override\n    protected void decode(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf, List<Object> list) throws Exception {\n        list.add(byteBuf.readInt());\n    }\n}\n```\n\n","source":"_posts/netty-codec-2018-07-17.md","raw":"---\ntitle: netty编解码\ndate: 2018-07-17 08:36:02\ntags: netty\ncategories: [\"netty\",\"codec\"]\n---\n\n\n## 关于netty的编解码\n\n关于netty的编解码学习，一般涉及到数据的出站与入站，在出站时调用编码、在入站时调用解码，编解码都是成对出现，不能出现只有一个。\n\n### netty的编解码类别\n\nnetty的编解码类别主要分为以下三种\n\n* ByteToMessage 入站解码\n* MessageToByte 出站编码\n* MessageToMessage  出站入站均可（编解码）\n<!--more-->\n\n* 解码继承：ByteToMessageDecoder,该类继承ChannelInboundHandlerAdapter   该类为进站处理\n* 编码继承：MessageToByteEncoder，该类继承ChannelOutboundHandlerAdapter  该类为出站处理\n\n## 例子实现编解码用一个组合handler来表示编解码（前两种）\n\n```\n例如：\npackage com.bj.hz.dzj;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelDuplexHandler;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\nimport io.netty.channel.CombinedChannelDuplexHandler;\nimport io.netty.handler.codec.ByteToMessageDecoder;\nimport io.netty.handler.codec.MessageToByteEncoder;\nimport java.util.List;\n\npublic class MyCodec extends CombinedChannelDuplexHandler {\n\n    public MyCodec(){\n        super(new Mydecode(),new Myencode());\n    }\n\n}\n\nclass Mydecode extends ByteToMessageDecoder{\n\n\n    @Override\n    protected void decode(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf, List<Object> list) throws Exception {\n        //这种是需要判断字节数组的容量是否足够解码，请参考最后使用ReplayingDecoder\n        if (byteBuf.readableBytes()>4){\n            list.add(byteBuf.readInt());\n        }\n    }\n}\n\nclass Myencode extends MessageToByteEncoder<Integer>{\n\n    @Override\n    protected void encode(ChannelHandlerContext channelHandlerContext, Integer integer, ByteBuf byteBuf) throws Exception {\n        byteBuf.writeInt(integer);\n    }\n}\n\n```\n\n\n\n### 使用codec可以统一编解码（前两种）\n* 使用codec 实现编解码一体\n\n```\npackage com.bj.hz.dzj;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.handler.codec.ByteToMessageCodec;\nimport java.util.List;\n\npublic class Mycodec1 extends ByteToMessageCodec<Integer> {\n\n    @Override\n    protected void decode(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf, List list) throws Exception {\n        if (byteBuf.readableBytes()>4){\n            list.add(byteBuf.readInt());\n        }\n    }\n\n    @Override\n    protected void encode(ChannelHandlerContext channelHandlerContext, Integer integer, ByteBuf byteBuf) throws Exception {\n        byteBuf.writeInt(integer);\n    }\n}\n```\n\n### 使用codec实现第三种\n该类型主要实现编码中协议（例如api等）转换\n\n```\npublic class MyMessagetoMessage extends MessageToMessageCodec<Integer,String> {\n    @Override\n    protected void encode(ChannelHandlerContext channelHandlerContext, String s, List<Object> list) throws Exception {\n        list.add(Integer.parseInt(s));\n    }\n\n    @Override\n    protected void decode(ChannelHandlerContext channelHandlerContext, Integer integer, List<Object> list) throws Exception {\n        list.add(String.valueOf(integer));\n    }\n}\n```\n\n### 使用ReplayingDecoder,来实现自动转换，当bytebuf中没有能够转换的足够字节，则会一直等待足够才会转换\n\n```\npackage com.bj.hz.dzj;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.handler.codec.ReplayingDecoder;\nimport java.util.List;\n\npublic class MyreplyingDecoder extends ReplayingDecoder<Integer> {\n    @Override\n    protected void decode(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf, List<Object> list) throws Exception {\n        list.add(byteBuf.readInt());\n    }\n}\n```\n\n","slug":"netty-codec-2018-07-17","published":1,"updated":"2019-09-23T06:59:22.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0w29rki0018uup2tkcdm6ta","content":"<h2 id=\"关于netty的编解码\"><a href=\"#关于netty的编解码\" class=\"headerlink\" title=\"关于netty的编解码\"></a>关于netty的编解码</h2><p>关于netty的编解码学习，一般涉及到数据的出站与入站，在出站时调用编码、在入站时调用解码，编解码都是成对出现，不能出现只有一个。</p>\n<h3 id=\"netty的编解码类别\"><a href=\"#netty的编解码类别\" class=\"headerlink\" title=\"netty的编解码类别\"></a>netty的编解码类别</h3><p>netty的编解码类别主要分为以下三种</p>\n<ul>\n<li>ByteToMessage 入站解码</li>\n<li>MessageToByte 出站编码</li>\n<li><p>MessageToMessage  出站入站均可（编解码）</p>\n<a id=\"more\"></a>\n</li>\n<li><p>解码继承：ByteToMessageDecoder,该类继承ChannelInboundHandlerAdapter   该类为进站处理</p>\n</li>\n<li>编码继承：MessageToByteEncoder，该类继承ChannelOutboundHandlerAdapter  该类为出站处理</li>\n</ul>\n<h2 id=\"例子实现编解码用一个组合handler来表示编解码（前两种）\"><a href=\"#例子实现编解码用一个组合handler来表示编解码（前两种）\" class=\"headerlink\" title=\"例子实现编解码用一个组合handler来表示编解码（前两种）\"></a>例子实现编解码用一个组合handler来表示编解码（前两种）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例如：</span><br><span class=\"line\">package com.bj.hz.dzj;</span><br><span class=\"line\"></span><br><span class=\"line\">import io.netty.buffer.ByteBuf;</span><br><span class=\"line\">import io.netty.channel.ChannelDuplexHandler;</span><br><span class=\"line\">import io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\">import io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class=\"line\">import io.netty.channel.CombinedChannelDuplexHandler;</span><br><span class=\"line\">import io.netty.handler.codec.ByteToMessageDecoder;</span><br><span class=\"line\">import io.netty.handler.codec.MessageToByteEncoder;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MyCodec extends CombinedChannelDuplexHandler &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MyCodec()&#123;</span><br><span class=\"line\">        super(new Mydecode(),new Myencode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Mydecode extends ByteToMessageDecoder&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void decode(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf, List&lt;Object&gt; list) throws Exception &#123;</span><br><span class=\"line\">        //这种是需要判断字节数组的容量是否足够解码，请参考最后使用ReplayingDecoder</span><br><span class=\"line\">        if (byteBuf.readableBytes()&gt;4)&#123;</span><br><span class=\"line\">            list.add(byteBuf.readInt());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Myencode extends MessageToByteEncoder&lt;Integer&gt;&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void encode(ChannelHandlerContext channelHandlerContext, Integer integer, ByteBuf byteBuf) throws Exception &#123;</span><br><span class=\"line\">        byteBuf.writeInt(integer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用codec可以统一编解码（前两种）\"><a href=\"#使用codec可以统一编解码（前两种）\" class=\"headerlink\" title=\"使用codec可以统一编解码（前两种）\"></a>使用codec可以统一编解码（前两种）</h3><ul>\n<li>使用codec 实现编解码一体</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bj.hz.dzj;</span><br><span class=\"line\"></span><br><span class=\"line\">import io.netty.buffer.ByteBuf;</span><br><span class=\"line\">import io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\">import io.netty.handler.codec.ByteToMessageCodec;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Mycodec1 extends ByteToMessageCodec&lt;Integer&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void decode(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf, List list) throws Exception &#123;</span><br><span class=\"line\">        if (byteBuf.readableBytes()&gt;4)&#123;</span><br><span class=\"line\">            list.add(byteBuf.readInt());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void encode(ChannelHandlerContext channelHandlerContext, Integer integer, ByteBuf byteBuf) throws Exception &#123;</span><br><span class=\"line\">        byteBuf.writeInt(integer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用codec实现第三种\"><a href=\"#使用codec实现第三种\" class=\"headerlink\" title=\"使用codec实现第三种\"></a>使用codec实现第三种</h3><p>该类型主要实现编码中协议（例如api等）转换</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyMessagetoMessage extends MessageToMessageCodec&lt;Integer,String&gt; &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void encode(ChannelHandlerContext channelHandlerContext, String s, List&lt;Object&gt; list) throws Exception &#123;</span><br><span class=\"line\">        list.add(Integer.parseInt(s));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void decode(ChannelHandlerContext channelHandlerContext, Integer integer, List&lt;Object&gt; list) throws Exception &#123;</span><br><span class=\"line\">        list.add(String.valueOf(integer));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用ReplayingDecoder-来实现自动转换，当bytebuf中没有能够转换的足够字节，则会一直等待足够才会转换\"><a href=\"#使用ReplayingDecoder-来实现自动转换，当bytebuf中没有能够转换的足够字节，则会一直等待足够才会转换\" class=\"headerlink\" title=\"使用ReplayingDecoder,来实现自动转换，当bytebuf中没有能够转换的足够字节，则会一直等待足够才会转换\"></a>使用ReplayingDecoder,来实现自动转换，当bytebuf中没有能够转换的足够字节，则会一直等待足够才会转换</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bj.hz.dzj;</span><br><span class=\"line\"></span><br><span class=\"line\">import io.netty.buffer.ByteBuf;</span><br><span class=\"line\">import io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\">import io.netty.handler.codec.ReplayingDecoder;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MyreplyingDecoder extends ReplayingDecoder&lt;Integer&gt; &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void decode(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf, List&lt;Object&gt; list) throws Exception &#123;</span><br><span class=\"line\">        list.add(byteBuf.readInt());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"<h2 id=\"关于netty的编解码\"><a href=\"#关于netty的编解码\" class=\"headerlink\" title=\"关于netty的编解码\"></a>关于netty的编解码</h2><p>关于netty的编解码学习，一般涉及到数据的出站与入站，在出站时调用编码、在入站时调用解码，编解码都是成对出现，不能出现只有一个。</p>\n<h3 id=\"netty的编解码类别\"><a href=\"#netty的编解码类别\" class=\"headerlink\" title=\"netty的编解码类别\"></a>netty的编解码类别</h3><p>netty的编解码类别主要分为以下三种</p>\n<ul>\n<li>ByteToMessage 入站解码</li>\n<li>MessageToByte 出站编码</li>\n<li><p>MessageToMessage  出站入站均可（编解码）</p>","more":"</li>\n<li><p>解码继承：ByteToMessageDecoder,该类继承ChannelInboundHandlerAdapter   该类为进站处理</p>\n</li>\n<li>编码继承：MessageToByteEncoder，该类继承ChannelOutboundHandlerAdapter  该类为出站处理</li>\n</ul>\n<h2 id=\"例子实现编解码用一个组合handler来表示编解码（前两种）\"><a href=\"#例子实现编解码用一个组合handler来表示编解码（前两种）\" class=\"headerlink\" title=\"例子实现编解码用一个组合handler来表示编解码（前两种）\"></a>例子实现编解码用一个组合handler来表示编解码（前两种）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例如：</span><br><span class=\"line\">package com.bj.hz.dzj;</span><br><span class=\"line\"></span><br><span class=\"line\">import io.netty.buffer.ByteBuf;</span><br><span class=\"line\">import io.netty.channel.ChannelDuplexHandler;</span><br><span class=\"line\">import io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\">import io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class=\"line\">import io.netty.channel.CombinedChannelDuplexHandler;</span><br><span class=\"line\">import io.netty.handler.codec.ByteToMessageDecoder;</span><br><span class=\"line\">import io.netty.handler.codec.MessageToByteEncoder;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MyCodec extends CombinedChannelDuplexHandler &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MyCodec()&#123;</span><br><span class=\"line\">        super(new Mydecode(),new Myencode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Mydecode extends ByteToMessageDecoder&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void decode(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf, List&lt;Object&gt; list) throws Exception &#123;</span><br><span class=\"line\">        //这种是需要判断字节数组的容量是否足够解码，请参考最后使用ReplayingDecoder</span><br><span class=\"line\">        if (byteBuf.readableBytes()&gt;4)&#123;</span><br><span class=\"line\">            list.add(byteBuf.readInt());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Myencode extends MessageToByteEncoder&lt;Integer&gt;&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void encode(ChannelHandlerContext channelHandlerContext, Integer integer, ByteBuf byteBuf) throws Exception &#123;</span><br><span class=\"line\">        byteBuf.writeInt(integer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用codec可以统一编解码（前两种）\"><a href=\"#使用codec可以统一编解码（前两种）\" class=\"headerlink\" title=\"使用codec可以统一编解码（前两种）\"></a>使用codec可以统一编解码（前两种）</h3><ul>\n<li>使用codec 实现编解码一体</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bj.hz.dzj;</span><br><span class=\"line\"></span><br><span class=\"line\">import io.netty.buffer.ByteBuf;</span><br><span class=\"line\">import io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\">import io.netty.handler.codec.ByteToMessageCodec;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Mycodec1 extends ByteToMessageCodec&lt;Integer&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void decode(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf, List list) throws Exception &#123;</span><br><span class=\"line\">        if (byteBuf.readableBytes()&gt;4)&#123;</span><br><span class=\"line\">            list.add(byteBuf.readInt());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void encode(ChannelHandlerContext channelHandlerContext, Integer integer, ByteBuf byteBuf) throws Exception &#123;</span><br><span class=\"line\">        byteBuf.writeInt(integer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用codec实现第三种\"><a href=\"#使用codec实现第三种\" class=\"headerlink\" title=\"使用codec实现第三种\"></a>使用codec实现第三种</h3><p>该类型主要实现编码中协议（例如api等）转换</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyMessagetoMessage extends MessageToMessageCodec&lt;Integer,String&gt; &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void encode(ChannelHandlerContext channelHandlerContext, String s, List&lt;Object&gt; list) throws Exception &#123;</span><br><span class=\"line\">        list.add(Integer.parseInt(s));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void decode(ChannelHandlerContext channelHandlerContext, Integer integer, List&lt;Object&gt; list) throws Exception &#123;</span><br><span class=\"line\">        list.add(String.valueOf(integer));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用ReplayingDecoder-来实现自动转换，当bytebuf中没有能够转换的足够字节，则会一直等待足够才会转换\"><a href=\"#使用ReplayingDecoder-来实现自动转换，当bytebuf中没有能够转换的足够字节，则会一直等待足够才会转换\" class=\"headerlink\" title=\"使用ReplayingDecoder,来实现自动转换，当bytebuf中没有能够转换的足够字节，则会一直等待足够才会转换\"></a>使用ReplayingDecoder,来实现自动转换，当bytebuf中没有能够转换的足够字节，则会一直等待足够才会转换</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bj.hz.dzj;</span><br><span class=\"line\"></span><br><span class=\"line\">import io.netty.buffer.ByteBuf;</span><br><span class=\"line\">import io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\">import io.netty.handler.codec.ReplayingDecoder;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MyreplyingDecoder extends ReplayingDecoder&lt;Integer&gt; &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void decode(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf, List&lt;Object&gt; list) throws Exception &#123;</span><br><span class=\"line\">        list.add(byteBuf.readInt());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"netty part1","date":"2018-07-29T00:36:02.000Z","_content":"\n\n## part1 netty concepts and architecture\n\nnetty 是一个先进的框架，主要是创建一个高性能网络应用。在这一部分，我们主要探索三个方面以深度证明netty的能力\n* 用netty创建一个网络应用不用你是网络专家\n* 使用netty将比你使用java API本身容易的多\n* netty是设计的最佳实践，使得你的应用本身与网络层解耦\n<!--more-->\n\n本章主要用于简介java 网络的演变，复习基本的异步通讯以及实践驱动的概念，我们将通过netty的核心模块，在第二章你讲创建自己第一个netty应，用第三章，你将会深入netty底部细节，第四章熟悉网络协议，5-6章将使数据处理层，第七章是并发模型。\n\n第八章，我们将把part1部分所有的细节放入其中，你可以看到怎么配置运行中的基于netty网络应用，最后第九章主要帮助你用netty测试你的应用\n","source":"_posts/part1.md","raw":"---\ntitle: netty part1\ndate: 2018-07-29 08:36:02\ntags: netty\ncategories: [\"netty\"]\n---\n\n\n## part1 netty concepts and architecture\n\nnetty 是一个先进的框架，主要是创建一个高性能网络应用。在这一部分，我们主要探索三个方面以深度证明netty的能力\n* 用netty创建一个网络应用不用你是网络专家\n* 使用netty将比你使用java API本身容易的多\n* netty是设计的最佳实践，使得你的应用本身与网络层解耦\n<!--more-->\n\n本章主要用于简介java 网络的演变，复习基本的异步通讯以及实践驱动的概念，我们将通过netty的核心模块，在第二章你讲创建自己第一个netty应，用第三章，你将会深入netty底部细节，第四章熟悉网络协议，5-6章将使数据处理层，第七章是并发模型。\n\n第八章，我们将把part1部分所有的细节放入其中，你可以看到怎么配置运行中的基于netty网络应用，最后第九章主要帮助你用netty测试你的应用\n","slug":"part1","published":1,"updated":"2019-09-23T06:59:21.205Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0w29rkj001buup2tron0trj","content":"<h2 id=\"part1-netty-concepts-and-architecture\"><a href=\"#part1-netty-concepts-and-architecture\" class=\"headerlink\" title=\"part1 netty concepts and architecture\"></a>part1 netty concepts and architecture</h2><p>netty 是一个先进的框架，主要是创建一个高性能网络应用。在这一部分，我们主要探索三个方面以深度证明netty的能力</p>\n<ul>\n<li>用netty创建一个网络应用不用你是网络专家</li>\n<li>使用netty将比你使用java API本身容易的多</li>\n<li>netty是设计的最佳实践，使得你的应用本身与网络层解耦<a id=\"more\"></a>\n</li>\n</ul>\n<p>本章主要用于简介java 网络的演变，复习基本的异步通讯以及实践驱动的概念，我们将通过netty的核心模块，在第二章你讲创建自己第一个netty应，用第三章，你将会深入netty底部细节，第四章熟悉网络协议，5-6章将使数据处理层，第七章是并发模型。</p>\n<p>第八章，我们将把part1部分所有的细节放入其中，你可以看到怎么配置运行中的基于netty网络应用，最后第九章主要帮助你用netty测试你的应用</p>\n","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"<h2 id=\"part1-netty-concepts-and-architecture\"><a href=\"#part1-netty-concepts-and-architecture\" class=\"headerlink\" title=\"part1 netty concepts and architecture\"></a>part1 netty concepts and architecture</h2><p>netty 是一个先进的框架，主要是创建一个高性能网络应用。在这一部分，我们主要探索三个方面以深度证明netty的能力</p>\n<ul>\n<li>用netty创建一个网络应用不用你是网络专家</li>\n<li>使用netty将比你使用java API本身容易的多</li>\n<li>netty是设计的最佳实践，使得你的应用本身与网络层解耦","more":"</li>\n</ul>\n<p>本章主要用于简介java 网络的演变，复习基本的异步通讯以及实践驱动的概念，我们将通过netty的核心模块，在第二章你讲创建自己第一个netty应，用第三章，你将会深入netty底部细节，第四章熟悉网络协议，5-6章将使数据处理层，第七章是并发模型。</p>\n<p>第八章，我们将把part1部分所有的细节放入其中，你可以看到怎么配置运行中的基于netty网络应用，最后第九章主要帮助你用netty测试你的应用</p>"},{"title":"docker-shadowsocks多用户镜像","date":"2018-11-20T04:36:02.000Z","_content":"\n## 简介\n\n搭建一个使用docker镜像实现的shadowsocks server端，支持多用户\n\n\n## 使用\n\n可以使用作者已有的仓库镜像\n\n* 默认开启五个端口，密码都为hhhzz，加密方法为：aes-256-cfb\n<!--more-->\n\n```\n# 使用默认的配置文件\ndocker run -d -p 9991:9991 -p 9992:9992 -p 9993:9993 -p 9994:9994 -p 9995:9995  hzdan/shadowsocks_manyusers:1.0\n# 使用自定义文件\n# /mnt/shadowsocks.json 为具体配置项，自己可定义，并挂载覆盖\ndocker run -d -p 9991:9991 -p 9992:9992 -p 9993:9993 -p 9994:9994 -p 9995:9995  -v `pwd`:/mnt hzdan/shadowsocks_manyusers:1.0\n\n```\n\n## 自定义镜像\n\n### 创建dockerfile && shadowsocks.json && start.sh\n\n* dockerfile\n\n> 本镜像借鉴与oddrationale@gmail.com 作者的镜像\n\n```\n# shadowsocks\n#\n# VERSION 0.0.3\n\nFROM ubuntu:16.04\nMAINTAINER hzz\n\nRUN apt-get update && \\\n    apt-get install -y python-pip libsodium18\nRUN pip install shadowsocks==2.8.2\nCOPY shadowsocks.json /mnt\nCOPY start.sh /usr/local\n\n# Configure container to run as an executable\nCMD /usr/local/start.sh\n```\n\n* shadowsocks.json\n\n> 用户密码，端口都可以更改\n\n\n```\n{\n    \"server\":\"0.0.0.0\",\n    \"local_address\":\"127.0.0.1\",\n    \"local_port\":1080,\n    \"port_password\":{\n        \"9991\":\"hhhzz\",\n        \"9992\":\"hhhzz\",\n        \"9993\":\"hhhzz\",\n        \"9994\":\"hhhzz\",\n        \"9995\":\"hhhzz\"\n},\n    \"timeout\":300,\n    \"method\":\"aes-256-cfb\",\n    \"fast_open\":false\n}\n```\n\n* start.sh\n\n```\n#!/bin/sh\n/usr/local/bin/ssserver -c /mnt/shadowsocks.json\n```\n\n\n## 打包、使用\n\n\n```\n# 打包\ndocker build -t <tag> .\n\n# 运行，-p使用的端口与配置文件中需要一致\ndocker run -d -p 9991:9991 -p 9992:9992 -p 9993:9993 -p 9994:9994 -p 9995:9995 <tag>\n\n```\n\n","source":"_posts/shadowsocks-2019-3-3.md","raw":"---\ntitle: docker-shadowsocks多用户镜像\ndate: 2018-11-20 12:36:02\ntags: shadowsocks\ncategories: [\"docker\",\"shadowsocks\"]\n---\n\n## 简介\n\n搭建一个使用docker镜像实现的shadowsocks server端，支持多用户\n\n\n## 使用\n\n可以使用作者已有的仓库镜像\n\n* 默认开启五个端口，密码都为hhhzz，加密方法为：aes-256-cfb\n<!--more-->\n\n```\n# 使用默认的配置文件\ndocker run -d -p 9991:9991 -p 9992:9992 -p 9993:9993 -p 9994:9994 -p 9995:9995  hzdan/shadowsocks_manyusers:1.0\n# 使用自定义文件\n# /mnt/shadowsocks.json 为具体配置项，自己可定义，并挂载覆盖\ndocker run -d -p 9991:9991 -p 9992:9992 -p 9993:9993 -p 9994:9994 -p 9995:9995  -v `pwd`:/mnt hzdan/shadowsocks_manyusers:1.0\n\n```\n\n## 自定义镜像\n\n### 创建dockerfile && shadowsocks.json && start.sh\n\n* dockerfile\n\n> 本镜像借鉴与oddrationale@gmail.com 作者的镜像\n\n```\n# shadowsocks\n#\n# VERSION 0.0.3\n\nFROM ubuntu:16.04\nMAINTAINER hzz\n\nRUN apt-get update && \\\n    apt-get install -y python-pip libsodium18\nRUN pip install shadowsocks==2.8.2\nCOPY shadowsocks.json /mnt\nCOPY start.sh /usr/local\n\n# Configure container to run as an executable\nCMD /usr/local/start.sh\n```\n\n* shadowsocks.json\n\n> 用户密码，端口都可以更改\n\n\n```\n{\n    \"server\":\"0.0.0.0\",\n    \"local_address\":\"127.0.0.1\",\n    \"local_port\":1080,\n    \"port_password\":{\n        \"9991\":\"hhhzz\",\n        \"9992\":\"hhhzz\",\n        \"9993\":\"hhhzz\",\n        \"9994\":\"hhhzz\",\n        \"9995\":\"hhhzz\"\n},\n    \"timeout\":300,\n    \"method\":\"aes-256-cfb\",\n    \"fast_open\":false\n}\n```\n\n* start.sh\n\n```\n#!/bin/sh\n/usr/local/bin/ssserver -c /mnt/shadowsocks.json\n```\n\n\n## 打包、使用\n\n\n```\n# 打包\ndocker build -t <tag> .\n\n# 运行，-p使用的端口与配置文件中需要一致\ndocker run -d -p 9991:9991 -p 9992:9992 -p 9993:9993 -p 9994:9994 -p 9995:9995 <tag>\n\n```\n\n","slug":"shadowsocks-2019-3-3","published":1,"updated":"2019-09-23T06:59:20.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0w29rkk001fuup2n4ksim3m","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>搭建一个使用docker镜像实现的shadowsocks server端，支持多用户</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>可以使用作者已有的仓库镜像</p>\n<ul>\n<li>默认开启五个端口，密码都为hhhzz，加密方法为：aes-256-cfb<a id=\"more\"></a>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用默认的配置文件</span><br><span class=\"line\">docker run -d -p 9991:9991 -p 9992:9992 -p 9993:9993 -p 9994:9994 -p 9995:9995  hzdan/shadowsocks_manyusers:1.0</span><br><span class=\"line\"># 使用自定义文件</span><br><span class=\"line\"># /mnt/shadowsocks.json 为具体配置项，自己可定义，并挂载覆盖</span><br><span class=\"line\">docker run -d -p 9991:9991 -p 9992:9992 -p 9993:9993 -p 9994:9994 -p 9995:9995  -v `pwd`:/mnt hzdan/shadowsocks_manyusers:1.0</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义镜像\"><a href=\"#自定义镜像\" class=\"headerlink\" title=\"自定义镜像\"></a>自定义镜像</h2><h3 id=\"创建dockerfile-amp-amp-shadowsocks-json-amp-amp-start-sh\"><a href=\"#创建dockerfile-amp-amp-shadowsocks-json-amp-amp-start-sh\" class=\"headerlink\" title=\"创建dockerfile &amp;&amp; shadowsocks.json &amp;&amp; start.sh\"></a>创建dockerfile &amp;&amp; shadowsocks.json &amp;&amp; start.sh</h3><ul>\n<li>dockerfile</li>\n</ul>\n<blockquote>\n<p>本镜像借鉴与oddrationale@gmail.com 作者的镜像</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># shadowsocks</span><br><span class=\"line\">#</span><br><span class=\"line\"># VERSION 0.0.3</span><br><span class=\"line\"></span><br><span class=\"line\">FROM ubuntu:16.04</span><br><span class=\"line\">MAINTAINER hzz</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apt-get update &amp;&amp; \\</span><br><span class=\"line\">    apt-get install -y python-pip libsodium18</span><br><span class=\"line\">RUN pip install shadowsocks==2.8.2</span><br><span class=\"line\">COPY shadowsocks.json /mnt</span><br><span class=\"line\">COPY start.sh /usr/local</span><br><span class=\"line\"></span><br><span class=\"line\"># Configure container to run as an executable</span><br><span class=\"line\">CMD /usr/local/start.sh</span><br></pre></td></tr></table></figure>\n<ul>\n<li>shadowsocks.json</li>\n</ul>\n<blockquote>\n<p>用户密码，端口都可以更改</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class=\"line\">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class=\"line\">    &quot;local_port&quot;:1080,</span><br><span class=\"line\">    &quot;port_password&quot;:&#123;</span><br><span class=\"line\">        &quot;9991&quot;:&quot;hhhzz&quot;,</span><br><span class=\"line\">        &quot;9992&quot;:&quot;hhhzz&quot;,</span><br><span class=\"line\">        &quot;9993&quot;:&quot;hhhzz&quot;,</span><br><span class=\"line\">        &quot;9994&quot;:&quot;hhhzz&quot;,</span><br><span class=\"line\">        &quot;9995&quot;:&quot;hhhzz&quot;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">    &quot;timeout&quot;:300,</span><br><span class=\"line\">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class=\"line\">    &quot;fast_open&quot;:false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>start.sh</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">/usr/local/bin/ssserver -c /mnt/shadowsocks.json</span><br></pre></td></tr></table></figure>\n<h2 id=\"打包、使用\"><a href=\"#打包、使用\" class=\"headerlink\" title=\"打包、使用\"></a>打包、使用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 打包</span><br><span class=\"line\">docker build -t &lt;tag&gt; .</span><br><span class=\"line\"></span><br><span class=\"line\"># 运行，-p使用的端口与配置文件中需要一致</span><br><span class=\"line\">docker run -d -p 9991:9991 -p 9992:9992 -p 9993:9993 -p 9994:9994 -p 9995:9995 &lt;tag&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>搭建一个使用docker镜像实现的shadowsocks server端，支持多用户</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>可以使用作者已有的仓库镜像</p>\n<ul>\n<li>默认开启五个端口，密码都为hhhzz，加密方法为：aes-256-cfb","more":"</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用默认的配置文件</span><br><span class=\"line\">docker run -d -p 9991:9991 -p 9992:9992 -p 9993:9993 -p 9994:9994 -p 9995:9995  hzdan/shadowsocks_manyusers:1.0</span><br><span class=\"line\"># 使用自定义文件</span><br><span class=\"line\"># /mnt/shadowsocks.json 为具体配置项，自己可定义，并挂载覆盖</span><br><span class=\"line\">docker run -d -p 9991:9991 -p 9992:9992 -p 9993:9993 -p 9994:9994 -p 9995:9995  -v `pwd`:/mnt hzdan/shadowsocks_manyusers:1.0</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义镜像\"><a href=\"#自定义镜像\" class=\"headerlink\" title=\"自定义镜像\"></a>自定义镜像</h2><h3 id=\"创建dockerfile-amp-amp-shadowsocks-json-amp-amp-start-sh\"><a href=\"#创建dockerfile-amp-amp-shadowsocks-json-amp-amp-start-sh\" class=\"headerlink\" title=\"创建dockerfile &amp;&amp; shadowsocks.json &amp;&amp; start.sh\"></a>创建dockerfile &amp;&amp; shadowsocks.json &amp;&amp; start.sh</h3><ul>\n<li>dockerfile</li>\n</ul>\n<blockquote>\n<p>本镜像借鉴与oddrationale@gmail.com 作者的镜像</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># shadowsocks</span><br><span class=\"line\">#</span><br><span class=\"line\"># VERSION 0.0.3</span><br><span class=\"line\"></span><br><span class=\"line\">FROM ubuntu:16.04</span><br><span class=\"line\">MAINTAINER hzz</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apt-get update &amp;&amp; \\</span><br><span class=\"line\">    apt-get install -y python-pip libsodium18</span><br><span class=\"line\">RUN pip install shadowsocks==2.8.2</span><br><span class=\"line\">COPY shadowsocks.json /mnt</span><br><span class=\"line\">COPY start.sh /usr/local</span><br><span class=\"line\"></span><br><span class=\"line\"># Configure container to run as an executable</span><br><span class=\"line\">CMD /usr/local/start.sh</span><br></pre></td></tr></table></figure>\n<ul>\n<li>shadowsocks.json</li>\n</ul>\n<blockquote>\n<p>用户密码，端口都可以更改</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class=\"line\">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class=\"line\">    &quot;local_port&quot;:1080,</span><br><span class=\"line\">    &quot;port_password&quot;:&#123;</span><br><span class=\"line\">        &quot;9991&quot;:&quot;hhhzz&quot;,</span><br><span class=\"line\">        &quot;9992&quot;:&quot;hhhzz&quot;,</span><br><span class=\"line\">        &quot;9993&quot;:&quot;hhhzz&quot;,</span><br><span class=\"line\">        &quot;9994&quot;:&quot;hhhzz&quot;,</span><br><span class=\"line\">        &quot;9995&quot;:&quot;hhhzz&quot;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">    &quot;timeout&quot;:300,</span><br><span class=\"line\">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class=\"line\">    &quot;fast_open&quot;:false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>start.sh</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">/usr/local/bin/ssserver -c /mnt/shadowsocks.json</span><br></pre></td></tr></table></figure>\n<h2 id=\"打包、使用\"><a href=\"#打包、使用\" class=\"headerlink\" title=\"打包、使用\"></a>打包、使用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 打包</span><br><span class=\"line\">docker build -t &lt;tag&gt; .</span><br><span class=\"line\"></span><br><span class=\"line\"># 运行，-p使用的端口与配置文件中需要一致</span><br><span class=\"line\">docker run -d -p 9991:9991 -p 9992:9992 -p 9993:9993 -p 9994:9994 -p 9995:9995 &lt;tag&gt;</span><br></pre></td></tr></table></figure>"},{"title":"socket","date":"2018-08-01T00:36:02.000Z","_content":"\n\n\n\n### socket的概念\n\n套接字（socket）是通信的基石，是支持TCP/IP协议的网络通信的基本操作单元。它是网络通信过程中端点的抽象表示，包含进行网络通信必须的五种信息：连接使用的协议，本地主机的IP地址，本地进程的协议端口，远地主机的IP地址，远地进程的协议端口。\n<!--more-->\n\n应用层通过传输层进行数据通信时，TCP会遇到同时为多个应用程序进程提供并发服务的问题。多个TCP连接或多个应用程序进程可能需要通过同一个TCP协议端口传输数据。为了区别不同的应用程序进程和连接，许多计算机操作系统为应用程序与TCP／IP协议交互提供了套接字(Socket)接口。应用层可以和传输层通过Socket接口，区分来自不同应用程序进程或网络连接的通信，实现数据传输的并发服务。\n\n\n创建Socket连接时，可以指定使用的传输层协议，Socket可以支持不同的传输层协议（TCP或UDP），当使用TCP协议进行连接时，该Socket连接就是一个TCP连接。\n\nsocket则是对TCP/IP协议的封装和应用（程序员层面上）。也可以说，TPC/IP协议是传输层协议，主要解决数据 如何在网络中传输，而HTTP是应用层协议，主要解决如何包装数据。关于TCP/IP和HTTP协议的关系，网络有一段比较容易理解的介绍：\n```\n我们在传输数据时，可以只使用（传输层）TCP/IP协议，但是那样的话，如 果没有应用层，便无法识别数据内容，如果想要使传输的数据有意义，则必须使用到应用层协议，应用层协议有很多，比如HTTP、FTP、TELNET等，也可以自己定义应用层协议。WEB使用HTTP协议作应用层协议，以封装HTTP文本信息，然后使用TCP/IP做传输层协议将它发到网络上。\n```\n\n\n我们平时说的最多的socket是什么呢，实际上socket是对TCP/IP协议的封装，Socket本身并不是协议，而是一个调用接口\n（API），通过Socket，我们才能使用TCP/IP协议。 实际上，Socket跟TCP/IP协议没有必然的联系。Socket编程接\n口在设计的时候，就希望也能适应其他的网络协议。所以说，Socket的出现 只是使得程序员更方便地使用TCP/IP协议栈而已，是对TCP/IP协议的抽象，从而形成了我们知道的一些最基本的函数接口，比如create、 listen、connect、accept、send、read和write等等\n\n\n**总结**\nsocket是基于tcp、udp协议的抽象，是编程的接口,socket不是协议，socket既可以基于tcp（有状态、连接），也可以基于UDP（无状态连接）\n","source":"_posts/socket知识-2018-8-1.md","raw":"---\ntitle: socket\ndate: 2018-08-01 08:36:02\ntags: socket\ncategories: [\"internet\",\"socket\"]\n---\n\n\n\n\n### socket的概念\n\n套接字（socket）是通信的基石，是支持TCP/IP协议的网络通信的基本操作单元。它是网络通信过程中端点的抽象表示，包含进行网络通信必须的五种信息：连接使用的协议，本地主机的IP地址，本地进程的协议端口，远地主机的IP地址，远地进程的协议端口。\n<!--more-->\n\n应用层通过传输层进行数据通信时，TCP会遇到同时为多个应用程序进程提供并发服务的问题。多个TCP连接或多个应用程序进程可能需要通过同一个TCP协议端口传输数据。为了区别不同的应用程序进程和连接，许多计算机操作系统为应用程序与TCP／IP协议交互提供了套接字(Socket)接口。应用层可以和传输层通过Socket接口，区分来自不同应用程序进程或网络连接的通信，实现数据传输的并发服务。\n\n\n创建Socket连接时，可以指定使用的传输层协议，Socket可以支持不同的传输层协议（TCP或UDP），当使用TCP协议进行连接时，该Socket连接就是一个TCP连接。\n\nsocket则是对TCP/IP协议的封装和应用（程序员层面上）。也可以说，TPC/IP协议是传输层协议，主要解决数据 如何在网络中传输，而HTTP是应用层协议，主要解决如何包装数据。关于TCP/IP和HTTP协议的关系，网络有一段比较容易理解的介绍：\n```\n我们在传输数据时，可以只使用（传输层）TCP/IP协议，但是那样的话，如 果没有应用层，便无法识别数据内容，如果想要使传输的数据有意义，则必须使用到应用层协议，应用层协议有很多，比如HTTP、FTP、TELNET等，也可以自己定义应用层协议。WEB使用HTTP协议作应用层协议，以封装HTTP文本信息，然后使用TCP/IP做传输层协议将它发到网络上。\n```\n\n\n我们平时说的最多的socket是什么呢，实际上socket是对TCP/IP协议的封装，Socket本身并不是协议，而是一个调用接口\n（API），通过Socket，我们才能使用TCP/IP协议。 实际上，Socket跟TCP/IP协议没有必然的联系。Socket编程接\n口在设计的时候，就希望也能适应其他的网络协议。所以说，Socket的出现 只是使得程序员更方便地使用TCP/IP协议栈而已，是对TCP/IP协议的抽象，从而形成了我们知道的一些最基本的函数接口，比如create、 listen、connect、accept、send、read和write等等\n\n\n**总结**\nsocket是基于tcp、udp协议的抽象，是编程的接口,socket不是协议，socket既可以基于tcp（有状态、连接），也可以基于UDP（无状态连接）\n","slug":"socket知识-2018-8-1","published":1,"updated":"2019-09-23T06:59:19.065Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0w29rkm001iuup2gjmb04pq","content":"<h3 id=\"socket的概念\"><a href=\"#socket的概念\" class=\"headerlink\" title=\"socket的概念\"></a>socket的概念</h3><p>套接字（socket）是通信的基石，是支持TCP/IP协议的网络通信的基本操作单元。它是网络通信过程中端点的抽象表示，包含进行网络通信必须的五种信息：连接使用的协议，本地主机的IP地址，本地进程的协议端口，远地主机的IP地址，远地进程的协议端口。<br><a id=\"more\"></a></p>\n<p>应用层通过传输层进行数据通信时，TCP会遇到同时为多个应用程序进程提供并发服务的问题。多个TCP连接或多个应用程序进程可能需要通过同一个TCP协议端口传输数据。为了区别不同的应用程序进程和连接，许多计算机操作系统为应用程序与TCP／IP协议交互提供了套接字(Socket)接口。应用层可以和传输层通过Socket接口，区分来自不同应用程序进程或网络连接的通信，实现数据传输的并发服务。</p>\n<p>创建Socket连接时，可以指定使用的传输层协议，Socket可以支持不同的传输层协议（TCP或UDP），当使用TCP协议进行连接时，该Socket连接就是一个TCP连接。</p>\n<p>socket则是对TCP/IP协议的封装和应用（程序员层面上）。也可以说，TPC/IP协议是传输层协议，主要解决数据 如何在网络中传输，而HTTP是应用层协议，主要解决如何包装数据。关于TCP/IP和HTTP协议的关系，网络有一段比较容易理解的介绍：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我们在传输数据时，可以只使用（传输层）TCP/IP协议，但是那样的话，如 果没有应用层，便无法识别数据内容，如果想要使传输的数据有意义，则必须使用到应用层协议，应用层协议有很多，比如HTTP、FTP、TELNET等，也可以自己定义应用层协议。WEB使用HTTP协议作应用层协议，以封装HTTP文本信息，然后使用TCP/IP做传输层协议将它发到网络上。</span><br></pre></td></tr></table></figure></p>\n<p>我们平时说的最多的socket是什么呢，实际上socket是对TCP/IP协议的封装，Socket本身并不是协议，而是一个调用接口<br>（API），通过Socket，我们才能使用TCP/IP协议。 实际上，Socket跟TCP/IP协议没有必然的联系。Socket编程接<br>口在设计的时候，就希望也能适应其他的网络协议。所以说，Socket的出现 只是使得程序员更方便地使用TCP/IP协议栈而已，是对TCP/IP协议的抽象，从而形成了我们知道的一些最基本的函数接口，比如create、 listen、connect、accept、send、read和write等等</p>\n<p><strong>总结</strong><br>socket是基于tcp、udp协议的抽象，是编程的接口,socket不是协议，socket既可以基于tcp（有状态、连接），也可以基于UDP（无状态连接）</p>\n","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"<h3 id=\"socket的概念\"><a href=\"#socket的概念\" class=\"headerlink\" title=\"socket的概念\"></a>socket的概念</h3><p>套接字（socket）是通信的基石，是支持TCP/IP协议的网络通信的基本操作单元。它是网络通信过程中端点的抽象表示，包含进行网络通信必须的五种信息：连接使用的协议，本地主机的IP地址，本地进程的协议端口，远地主机的IP地址，远地进程的协议端口。<br>","more":"</p>\n<p>应用层通过传输层进行数据通信时，TCP会遇到同时为多个应用程序进程提供并发服务的问题。多个TCP连接或多个应用程序进程可能需要通过同一个TCP协议端口传输数据。为了区别不同的应用程序进程和连接，许多计算机操作系统为应用程序与TCP／IP协议交互提供了套接字(Socket)接口。应用层可以和传输层通过Socket接口，区分来自不同应用程序进程或网络连接的通信，实现数据传输的并发服务。</p>\n<p>创建Socket连接时，可以指定使用的传输层协议，Socket可以支持不同的传输层协议（TCP或UDP），当使用TCP协议进行连接时，该Socket连接就是一个TCP连接。</p>\n<p>socket则是对TCP/IP协议的封装和应用（程序员层面上）。也可以说，TPC/IP协议是传输层协议，主要解决数据 如何在网络中传输，而HTTP是应用层协议，主要解决如何包装数据。关于TCP/IP和HTTP协议的关系，网络有一段比较容易理解的介绍：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我们在传输数据时，可以只使用（传输层）TCP/IP协议，但是那样的话，如 果没有应用层，便无法识别数据内容，如果想要使传输的数据有意义，则必须使用到应用层协议，应用层协议有很多，比如HTTP、FTP、TELNET等，也可以自己定义应用层协议。WEB使用HTTP协议作应用层协议，以封装HTTP文本信息，然后使用TCP/IP做传输层协议将它发到网络上。</span><br></pre></td></tr></table></figure></p>\n<p>我们平时说的最多的socket是什么呢，实际上socket是对TCP/IP协议的封装，Socket本身并不是协议，而是一个调用接口<br>（API），通过Socket，我们才能使用TCP/IP协议。 实际上，Socket跟TCP/IP协议没有必然的联系。Socket编程接<br>口在设计的时候，就希望也能适应其他的网络协议。所以说，Socket的出现 只是使得程序员更方便地使用TCP/IP协议栈而已，是对TCP/IP协议的抽象，从而形成了我们知道的一些最基本的函数接口，比如create、 listen、connect、accept、send、read和write等等</p>\n<p><strong>总结</strong><br>socket是基于tcp、udp协议的抽象，是编程的接口,socket不是协议，socket既可以基于tcp（有状态、连接），也可以基于UDP（无状态连接）</p>"},{"title":"solr安装分词","date":"2018-04-03T08:31:51.000Z","_content":"\n* 环境 centos7\n### 下载solr\n`地址：http://www.apache.org/dyn/closer.lua/lucene/solr/7.2.1`\n\n#### 解压\n```bash\ntar -xvf solr-7.2.1.tgz\n\n```\n<!--more-->\n\n### 1. 直接使用solr\n```\ncd solrHome(solrHome是solr的路径)\ncd bin\nsolr start\n```\n#### 1.1. 创建core 或者collection 意义一致\n```bash\nsolr create -c articles\n控制台：http://127.0.0.1:8983/solr\n```\n\n#### 1.2. 创建分词器\n```bash\n下载地址：https://pan.baidu.com/s/1smOxPhF\n将解分词资料里的ik-analyzer-solr5-5.x.jar拷贝到你的solr目录下的\\server\\solr-webapp\\webapp\\WEB-INF\\lib目录中去，\n将IKAnalyzer.cfg.xml，mydict.dic（搜狗的扩展词库），stopword.dic放在你的solr目录下的\\server\\solr-webapp\\webapp\\WEB-INF\\classes目录中去\n\n\n修改 articles集合目录下的managed-schema\n\n添加以下4行：\n\n<fieldType name=\"text_ik\" class=\"solr.TextField\">  \n        <analyzer class=\"org.wltea.analyzer.lucene.IKAnalyzer\"/>  \n</fieldType>  \n\n\n重启或者reload\n\n```\n#### 1.3. 创建字段\n```\n{\n    \"add-field\" : {\n        \"name\" : \"name\",\n        \"type\" : \"text_ik\"\n    },\n    \"add-field\" : {\n        \"name\" : \"content\",\n        \"type\" : \"text_ik\",\n        \"stored\" : \"true\"\n    },\n    \"add-field\" : {\n        \"name\" : \"createTime\",\n        \"type\" : \"date\"\n    }\n}\n\npost提交：\nhttp://localhost:8983/solr/articles/schema\n```\n\n#### 1.4. 删除字段\n\n```\n{\n    \"delete-field\" : {\n        \"name\" : \"name\"\n    },\n    \"delete-field\" : {\n        \"name\" : \"content\"\n    }\n}\nhttp://localhost:8983/solr/articles/schema\n```\n\n\n### 2. 使用tomcat作为容器运行solr\n#### 2.1 新创建一个solr_home_new文件夹\n\n```\nexport solr_home=/app/solr-7.2.1\nexport solr_home_new=/app/solr_home\n\n复制 ${solr_home}/server/solr-webapp/webapp 并重命名 ${tomcat}/webapp/solr\ncp -r ${solr_home}/dist  ${solr_home_new}/\ncp ${solr_home}/server/lib/ext/*.jar ${tomcat}/webapp/solr/WEB-INF/lib/\ncp ${solr_home}/server/lib/*.jar ${tomcat}/webapp/solr/WEB-INF/lib/\n#classes文件夹没有自己创建\ncp ${solr_home}/server/resources/log4j.properties ${tomcat}/webapp/solr/WEB-INF/classes \n\n\n#进入 ${tomcat}/webapp/solr/WEB-INF/ 修改web.xml\n修改：修改中间为自己的solr_home_new，我的solr_home_new为solr_home/solr\n\n <env-entry>\n         <env-entry-name>solr/home</env-entry-name>\n         <env-entry-value>/Users/huangzhe/app/solr_home/solr</env-entry-value>\n         <env-entry-type>java.lang.String</env-entry-type>\n</env-entry>\n并注释以下，防止403：\n<!--  <security-constraint>\n    <web-resource-collection>\n      <web-resource-name>Disable TRACE</web-resource-name>\n      <url-pattern>/</url-pattern>\n      <http-method>TRACE</http-method>\n    </web-resource-collection>\n    <auth-constraint/>\n  </security-constraint>\n  <security-constraint>\n    <web-resource-collection>\n      <web-resource-name>Enable everything but TRACE</web-resource-name>\n      <url-pattern>/</url-pattern>\n      <http-method-omission>TRACE</http-method-omission>\n    </web-resource-collection>\n  </security-constraint>\n-->\n\n```\n\n\n#### 2.2 创建core\n```\ncp -r ${solr_home}/server/solr ${solr_home_new}/\ncd ${solr_home_new}/solr\nmkdir new_core\ncp -r configsets/_default/conf new_core\n\n打开浏览器：http://localhost:8080/solr/index.html\n点击：core Admin ,然后更改schema.xml为 managed-schema，点击确定\n```\n\n\n#### 2.3 添加分词器\n与1.2一致，在tomcat下面对应的路径去改\n","source":"_posts/solr安装分词.md","raw":"---\ntitle: solr安装分词\ndate: 2018-04-03 16:31:51\ntags: [\"solr\",\"lucene\",\"search\"]\ncategory: [\"linux\",\"solr\"]\n---\n\n* 环境 centos7\n### 下载solr\n`地址：http://www.apache.org/dyn/closer.lua/lucene/solr/7.2.1`\n\n#### 解压\n```bash\ntar -xvf solr-7.2.1.tgz\n\n```\n<!--more-->\n\n### 1. 直接使用solr\n```\ncd solrHome(solrHome是solr的路径)\ncd bin\nsolr start\n```\n#### 1.1. 创建core 或者collection 意义一致\n```bash\nsolr create -c articles\n控制台：http://127.0.0.1:8983/solr\n```\n\n#### 1.2. 创建分词器\n```bash\n下载地址：https://pan.baidu.com/s/1smOxPhF\n将解分词资料里的ik-analyzer-solr5-5.x.jar拷贝到你的solr目录下的\\server\\solr-webapp\\webapp\\WEB-INF\\lib目录中去，\n将IKAnalyzer.cfg.xml，mydict.dic（搜狗的扩展词库），stopword.dic放在你的solr目录下的\\server\\solr-webapp\\webapp\\WEB-INF\\classes目录中去\n\n\n修改 articles集合目录下的managed-schema\n\n添加以下4行：\n\n<fieldType name=\"text_ik\" class=\"solr.TextField\">  \n        <analyzer class=\"org.wltea.analyzer.lucene.IKAnalyzer\"/>  \n</fieldType>  \n\n\n重启或者reload\n\n```\n#### 1.3. 创建字段\n```\n{\n    \"add-field\" : {\n        \"name\" : \"name\",\n        \"type\" : \"text_ik\"\n    },\n    \"add-field\" : {\n        \"name\" : \"content\",\n        \"type\" : \"text_ik\",\n        \"stored\" : \"true\"\n    },\n    \"add-field\" : {\n        \"name\" : \"createTime\",\n        \"type\" : \"date\"\n    }\n}\n\npost提交：\nhttp://localhost:8983/solr/articles/schema\n```\n\n#### 1.4. 删除字段\n\n```\n{\n    \"delete-field\" : {\n        \"name\" : \"name\"\n    },\n    \"delete-field\" : {\n        \"name\" : \"content\"\n    }\n}\nhttp://localhost:8983/solr/articles/schema\n```\n\n\n### 2. 使用tomcat作为容器运行solr\n#### 2.1 新创建一个solr_home_new文件夹\n\n```\nexport solr_home=/app/solr-7.2.1\nexport solr_home_new=/app/solr_home\n\n复制 ${solr_home}/server/solr-webapp/webapp 并重命名 ${tomcat}/webapp/solr\ncp -r ${solr_home}/dist  ${solr_home_new}/\ncp ${solr_home}/server/lib/ext/*.jar ${tomcat}/webapp/solr/WEB-INF/lib/\ncp ${solr_home}/server/lib/*.jar ${tomcat}/webapp/solr/WEB-INF/lib/\n#classes文件夹没有自己创建\ncp ${solr_home}/server/resources/log4j.properties ${tomcat}/webapp/solr/WEB-INF/classes \n\n\n#进入 ${tomcat}/webapp/solr/WEB-INF/ 修改web.xml\n修改：修改中间为自己的solr_home_new，我的solr_home_new为solr_home/solr\n\n <env-entry>\n         <env-entry-name>solr/home</env-entry-name>\n         <env-entry-value>/Users/huangzhe/app/solr_home/solr</env-entry-value>\n         <env-entry-type>java.lang.String</env-entry-type>\n</env-entry>\n并注释以下，防止403：\n<!--  <security-constraint>\n    <web-resource-collection>\n      <web-resource-name>Disable TRACE</web-resource-name>\n      <url-pattern>/</url-pattern>\n      <http-method>TRACE</http-method>\n    </web-resource-collection>\n    <auth-constraint/>\n  </security-constraint>\n  <security-constraint>\n    <web-resource-collection>\n      <web-resource-name>Enable everything but TRACE</web-resource-name>\n      <url-pattern>/</url-pattern>\n      <http-method-omission>TRACE</http-method-omission>\n    </web-resource-collection>\n  </security-constraint>\n-->\n\n```\n\n\n#### 2.2 创建core\n```\ncp -r ${solr_home}/server/solr ${solr_home_new}/\ncd ${solr_home_new}/solr\nmkdir new_core\ncp -r configsets/_default/conf new_core\n\n打开浏览器：http://localhost:8080/solr/index.html\n点击：core Admin ,然后更改schema.xml为 managed-schema，点击确定\n```\n\n\n#### 2.3 添加分词器\n与1.2一致，在tomcat下面对应的路径去改\n","slug":"solr安装分词","published":1,"updated":"2019-09-23T06:59:18.109Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0w29rkn001muup2t7pknuw4","content":"<ul>\n<li>环境 centos7<h3 id=\"下载solr\"><a href=\"#下载solr\" class=\"headerlink\" title=\"下载solr\"></a>下载solr</h3><code>地址：http://www.apache.org/dyn/closer.lua/lucene/solr/7.2.1</code></li>\n</ul>\n<h4 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xvf solr-7.2.1.tgz</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"1-直接使用solr\"><a href=\"#1-直接使用solr\" class=\"headerlink\" title=\"1. 直接使用solr\"></a>1. 直接使用solr</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd solrHome(solrHome是solr的路径)</span><br><span class=\"line\">cd bin</span><br><span class=\"line\">solr start</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-1-创建core-或者collection-意义一致\"><a href=\"#1-1-创建core-或者collection-意义一致\" class=\"headerlink\" title=\"1.1. 创建core 或者collection 意义一致\"></a>1.1. 创建core 或者collection 意义一致</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">solr create -c articles</span><br><span class=\"line\">控制台：http://127.0.0.1:8983/solr</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-2-创建分词器\"><a href=\"#1-2-创建分词器\" class=\"headerlink\" title=\"1.2. 创建分词器\"></a>1.2. 创建分词器</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载地址：https://pan.baidu.com/s/1smOxPhF</span><br><span class=\"line\">将解分词资料里的ik-analyzer-solr5-5.x.jar拷贝到你的solr目录下的\\server\\solr-webapp\\webapp\\WEB-INF\\lib目录中去，</span><br><span class=\"line\">将IKAnalyzer.cfg.xml，mydict.dic（搜狗的扩展词库），stopword.dic放在你的solr目录下的\\server\\solr-webapp\\webapp\\WEB-INF\\classes目录中去</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">修改 articles集合目录下的managed-schema</span><br><span class=\"line\"></span><br><span class=\"line\">添加以下4行：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;fieldType name=<span class=\"string\">\"text_ik\"</span> class=<span class=\"string\">\"solr.TextField\"</span>&gt;  </span><br><span class=\"line\">        &lt;analyzer class=<span class=\"string\">\"org.wltea.analyzer.lucene.IKAnalyzer\"</span>/&gt;  </span><br><span class=\"line\">&lt;/fieldType&gt;  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">重启或者reload</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-3-创建字段\"><a href=\"#1-3-创建字段\" class=\"headerlink\" title=\"1.3. 创建字段\"></a>1.3. 创建字段</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;add-field&quot; : &#123;</span><br><span class=\"line\">        &quot;name&quot; : &quot;name&quot;,</span><br><span class=\"line\">        &quot;type&quot; : &quot;text_ik&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;add-field&quot; : &#123;</span><br><span class=\"line\">        &quot;name&quot; : &quot;content&quot;,</span><br><span class=\"line\">        &quot;type&quot; : &quot;text_ik&quot;,</span><br><span class=\"line\">        &quot;stored&quot; : &quot;true&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;add-field&quot; : &#123;</span><br><span class=\"line\">        &quot;name&quot; : &quot;createTime&quot;,</span><br><span class=\"line\">        &quot;type&quot; : &quot;date&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">post提交：</span><br><span class=\"line\">http://localhost:8983/solr/articles/schema</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-4-删除字段\"><a href=\"#1-4-删除字段\" class=\"headerlink\" title=\"1.4. 删除字段\"></a>1.4. 删除字段</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;delete-field&quot; : &#123;</span><br><span class=\"line\">        &quot;name&quot; : &quot;name&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;delete-field&quot; : &#123;</span><br><span class=\"line\">        &quot;name&quot; : &quot;content&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http://localhost:8983/solr/articles/schema</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-使用tomcat作为容器运行solr\"><a href=\"#2-使用tomcat作为容器运行solr\" class=\"headerlink\" title=\"2. 使用tomcat作为容器运行solr\"></a>2. 使用tomcat作为容器运行solr</h3><h4 id=\"2-1-新创建一个solr-home-new文件夹\"><a href=\"#2-1-新创建一个solr-home-new文件夹\" class=\"headerlink\" title=\"2.1 新创建一个solr_home_new文件夹\"></a>2.1 新创建一个solr_home_new文件夹</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export solr_home=/app/solr-7.2.1</span><br><span class=\"line\">export solr_home_new=/app/solr_home</span><br><span class=\"line\"></span><br><span class=\"line\">复制 $&#123;solr_home&#125;/server/solr-webapp/webapp 并重命名 $&#123;tomcat&#125;/webapp/solr</span><br><span class=\"line\">cp -r $&#123;solr_home&#125;/dist  $&#123;solr_home_new&#125;/</span><br><span class=\"line\">cp $&#123;solr_home&#125;/server/lib/ext/*.jar $&#123;tomcat&#125;/webapp/solr/WEB-INF/lib/</span><br><span class=\"line\">cp $&#123;solr_home&#125;/server/lib/*.jar $&#123;tomcat&#125;/webapp/solr/WEB-INF/lib/</span><br><span class=\"line\">#classes文件夹没有自己创建</span><br><span class=\"line\">cp $&#123;solr_home&#125;/server/resources/log4j.properties $&#123;tomcat&#125;/webapp/solr/WEB-INF/classes </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#进入 $&#123;tomcat&#125;/webapp/solr/WEB-INF/ 修改web.xml</span><br><span class=\"line\">修改：修改中间为自己的solr_home_new，我的solr_home_new为solr_home/solr</span><br><span class=\"line\"></span><br><span class=\"line\"> &lt;env-entry&gt;</span><br><span class=\"line\">         &lt;env-entry-name&gt;solr/home&lt;/env-entry-name&gt;</span><br><span class=\"line\">         &lt;env-entry-value&gt;/Users/huangzhe/app/solr_home/solr&lt;/env-entry-value&gt;</span><br><span class=\"line\">         &lt;env-entry-type&gt;java.lang.String&lt;/env-entry-type&gt;</span><br><span class=\"line\">&lt;/env-entry&gt;</span><br><span class=\"line\">并注释以下，防止403：</span><br><span class=\"line\">&lt;!--  &lt;security-constraint&gt;</span><br><span class=\"line\">    &lt;web-resource-collection&gt;</span><br><span class=\"line\">      &lt;web-resource-name&gt;Disable TRACE&lt;/web-resource-name&gt;</span><br><span class=\"line\">      &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class=\"line\">      &lt;http-method&gt;TRACE&lt;/http-method&gt;</span><br><span class=\"line\">    &lt;/web-resource-collection&gt;</span><br><span class=\"line\">    &lt;auth-constraint/&gt;</span><br><span class=\"line\">  &lt;/security-constraint&gt;</span><br><span class=\"line\">  &lt;security-constraint&gt;</span><br><span class=\"line\">    &lt;web-resource-collection&gt;</span><br><span class=\"line\">      &lt;web-resource-name&gt;Enable everything but TRACE&lt;/web-resource-name&gt;</span><br><span class=\"line\">      &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class=\"line\">      &lt;http-method-omission&gt;TRACE&lt;/http-method-omission&gt;</span><br><span class=\"line\">    &lt;/web-resource-collection&gt;</span><br><span class=\"line\">  &lt;/security-constraint&gt;</span><br><span class=\"line\">--&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-2-创建core\"><a href=\"#2-2-创建core\" class=\"headerlink\" title=\"2.2 创建core\"></a>2.2 创建core</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp -r $&#123;solr_home&#125;/server/solr $&#123;solr_home_new&#125;/</span><br><span class=\"line\">cd $&#123;solr_home_new&#125;/solr</span><br><span class=\"line\">mkdir new_core</span><br><span class=\"line\">cp -r configsets/_default/conf new_core</span><br><span class=\"line\"></span><br><span class=\"line\">打开浏览器：http://localhost:8080/solr/index.html</span><br><span class=\"line\">点击：core Admin ,然后更改schema.xml为 managed-schema，点击确定</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-3-添加分词器\"><a href=\"#2-3-添加分词器\" class=\"headerlink\" title=\"2.3 添加分词器\"></a>2.3 添加分词器</h4><p>与1.2一致，在tomcat下面对应的路径去改</p>\n","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"<ul>\n<li>环境 centos7<h3 id=\"下载solr\"><a href=\"#下载solr\" class=\"headerlink\" title=\"下载solr\"></a>下载solr</h3><code>地址：http://www.apache.org/dyn/closer.lua/lucene/solr/7.2.1</code></li>\n</ul>\n<h4 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xvf solr-7.2.1.tgz</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"1-直接使用solr\"><a href=\"#1-直接使用solr\" class=\"headerlink\" title=\"1. 直接使用solr\"></a>1. 直接使用solr</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd solrHome(solrHome是solr的路径)</span><br><span class=\"line\">cd bin</span><br><span class=\"line\">solr start</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-1-创建core-或者collection-意义一致\"><a href=\"#1-1-创建core-或者collection-意义一致\" class=\"headerlink\" title=\"1.1. 创建core 或者collection 意义一致\"></a>1.1. 创建core 或者collection 意义一致</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">solr create -c articles</span><br><span class=\"line\">控制台：http://127.0.0.1:8983/solr</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-2-创建分词器\"><a href=\"#1-2-创建分词器\" class=\"headerlink\" title=\"1.2. 创建分词器\"></a>1.2. 创建分词器</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载地址：https://pan.baidu.com/s/1smOxPhF</span><br><span class=\"line\">将解分词资料里的ik-analyzer-solr5-5.x.jar拷贝到你的solr目录下的\\server\\solr-webapp\\webapp\\WEB-INF\\lib目录中去，</span><br><span class=\"line\">将IKAnalyzer.cfg.xml，mydict.dic（搜狗的扩展词库），stopword.dic放在你的solr目录下的\\server\\solr-webapp\\webapp\\WEB-INF\\classes目录中去</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">修改 articles集合目录下的managed-schema</span><br><span class=\"line\"></span><br><span class=\"line\">添加以下4行：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;fieldType name=<span class=\"string\">\"text_ik\"</span> class=<span class=\"string\">\"solr.TextField\"</span>&gt;  </span><br><span class=\"line\">        &lt;analyzer class=<span class=\"string\">\"org.wltea.analyzer.lucene.IKAnalyzer\"</span>/&gt;  </span><br><span class=\"line\">&lt;/fieldType&gt;  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">重启或者reload</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-3-创建字段\"><a href=\"#1-3-创建字段\" class=\"headerlink\" title=\"1.3. 创建字段\"></a>1.3. 创建字段</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;add-field&quot; : &#123;</span><br><span class=\"line\">        &quot;name&quot; : &quot;name&quot;,</span><br><span class=\"line\">        &quot;type&quot; : &quot;text_ik&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;add-field&quot; : &#123;</span><br><span class=\"line\">        &quot;name&quot; : &quot;content&quot;,</span><br><span class=\"line\">        &quot;type&quot; : &quot;text_ik&quot;,</span><br><span class=\"line\">        &quot;stored&quot; : &quot;true&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;add-field&quot; : &#123;</span><br><span class=\"line\">        &quot;name&quot; : &quot;createTime&quot;,</span><br><span class=\"line\">        &quot;type&quot; : &quot;date&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">post提交：</span><br><span class=\"line\">http://localhost:8983/solr/articles/schema</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-4-删除字段\"><a href=\"#1-4-删除字段\" class=\"headerlink\" title=\"1.4. 删除字段\"></a>1.4. 删除字段</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;delete-field&quot; : &#123;</span><br><span class=\"line\">        &quot;name&quot; : &quot;name&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;delete-field&quot; : &#123;</span><br><span class=\"line\">        &quot;name&quot; : &quot;content&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http://localhost:8983/solr/articles/schema</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-使用tomcat作为容器运行solr\"><a href=\"#2-使用tomcat作为容器运行solr\" class=\"headerlink\" title=\"2. 使用tomcat作为容器运行solr\"></a>2. 使用tomcat作为容器运行solr</h3><h4 id=\"2-1-新创建一个solr-home-new文件夹\"><a href=\"#2-1-新创建一个solr-home-new文件夹\" class=\"headerlink\" title=\"2.1 新创建一个solr_home_new文件夹\"></a>2.1 新创建一个solr_home_new文件夹</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export solr_home=/app/solr-7.2.1</span><br><span class=\"line\">export solr_home_new=/app/solr_home</span><br><span class=\"line\"></span><br><span class=\"line\">复制 $&#123;solr_home&#125;/server/solr-webapp/webapp 并重命名 $&#123;tomcat&#125;/webapp/solr</span><br><span class=\"line\">cp -r $&#123;solr_home&#125;/dist  $&#123;solr_home_new&#125;/</span><br><span class=\"line\">cp $&#123;solr_home&#125;/server/lib/ext/*.jar $&#123;tomcat&#125;/webapp/solr/WEB-INF/lib/</span><br><span class=\"line\">cp $&#123;solr_home&#125;/server/lib/*.jar $&#123;tomcat&#125;/webapp/solr/WEB-INF/lib/</span><br><span class=\"line\">#classes文件夹没有自己创建</span><br><span class=\"line\">cp $&#123;solr_home&#125;/server/resources/log4j.properties $&#123;tomcat&#125;/webapp/solr/WEB-INF/classes </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#进入 $&#123;tomcat&#125;/webapp/solr/WEB-INF/ 修改web.xml</span><br><span class=\"line\">修改：修改中间为自己的solr_home_new，我的solr_home_new为solr_home/solr</span><br><span class=\"line\"></span><br><span class=\"line\"> &lt;env-entry&gt;</span><br><span class=\"line\">         &lt;env-entry-name&gt;solr/home&lt;/env-entry-name&gt;</span><br><span class=\"line\">         &lt;env-entry-value&gt;/Users/huangzhe/app/solr_home/solr&lt;/env-entry-value&gt;</span><br><span class=\"line\">         &lt;env-entry-type&gt;java.lang.String&lt;/env-entry-type&gt;</span><br><span class=\"line\">&lt;/env-entry&gt;</span><br><span class=\"line\">并注释以下，防止403：</span><br><span class=\"line\">&lt;!--  &lt;security-constraint&gt;</span><br><span class=\"line\">    &lt;web-resource-collection&gt;</span><br><span class=\"line\">      &lt;web-resource-name&gt;Disable TRACE&lt;/web-resource-name&gt;</span><br><span class=\"line\">      &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class=\"line\">      &lt;http-method&gt;TRACE&lt;/http-method&gt;</span><br><span class=\"line\">    &lt;/web-resource-collection&gt;</span><br><span class=\"line\">    &lt;auth-constraint/&gt;</span><br><span class=\"line\">  &lt;/security-constraint&gt;</span><br><span class=\"line\">  &lt;security-constraint&gt;</span><br><span class=\"line\">    &lt;web-resource-collection&gt;</span><br><span class=\"line\">      &lt;web-resource-name&gt;Enable everything but TRACE&lt;/web-resource-name&gt;</span><br><span class=\"line\">      &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class=\"line\">      &lt;http-method-omission&gt;TRACE&lt;/http-method-omission&gt;</span><br><span class=\"line\">    &lt;/web-resource-collection&gt;</span><br><span class=\"line\">  &lt;/security-constraint&gt;</span><br><span class=\"line\">--&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-2-创建core\"><a href=\"#2-2-创建core\" class=\"headerlink\" title=\"2.2 创建core\"></a>2.2 创建core</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp -r $&#123;solr_home&#125;/server/solr $&#123;solr_home_new&#125;/</span><br><span class=\"line\">cd $&#123;solr_home_new&#125;/solr</span><br><span class=\"line\">mkdir new_core</span><br><span class=\"line\">cp -r configsets/_default/conf new_core</span><br><span class=\"line\"></span><br><span class=\"line\">打开浏览器：http://localhost:8080/solr/index.html</span><br><span class=\"line\">点击：core Admin ,然后更改schema.xml为 managed-schema，点击确定</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-3-添加分词器\"><a href=\"#2-3-添加分词器\" class=\"headerlink\" title=\"2.3 添加分词器\"></a>2.3 添加分词器</h4><p>与1.2一致，在tomcat下面对应的路径去改</p>"},{"title":"springboot websocket使用","date":"2018-12-26T01:39:02.000Z","_content":"\n\n## 简介\n使用springboot websocket过程整理\n\n<!--more-->\n\n### 配置pom依赖\n```xml\n<!--配置springboot web项目-->\n <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n<!--配置springboot websocket-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-websocket</artifactId>\n        </dependency>\n\n```\n### 配置config\n\n```\n /**\n     * 设置websocket bean\n     * @return\n     */\n    @Bean\n    public ServerEndpointExporter serverEndpointExporter() {\n        return new ServerEndpointExporter();\n    }\n\n```\n\n如果是由外部tomcat自己管理则不需要设置，如果是springboot，因为内置tomcat，所以需要设置\n\n\n### websocket主类\n\n```\n@ServerEndpoint(value = \"/webms/{user}\")\n@Component\npublic class Wstest {\n\n\n    private final static Logger logger = LoggerFactory.getLogger(Wstest.class);\n\n    private static AtomicLong count = new AtomicLong(0);\n\n    private static CopyOnWriteArrayList onlineList = new CopyOnWriteArrayList();\n\n    private static ConcurrentHashMap<String,Wstest> onLineMap =new ConcurrentHashMap();\n\n   \n    //与某个客户端的连接会话，需要通过它来给客户端发送数据\n    private Session session;\n\n    /**\n     * 连接建立成功调用的方法\n     */\n    @OnOpen\n    public void onOpen(@PathParam(\"user\") String user, Session session) {\n        this.session = session;\n        onLineMap.put(user,this);\n        count.incrementAndGet();      //在线数加1\n        logger.info(\"有新连接加入！用户为：\"+user+\"    当前在线人数为\" + count.get());\n    }\n\n\n    /**\n     * 连接关闭调用的方法\n     */\n    @OnClose\n    public void onClose(@PathParam(\"user\")  String user) {\n        onLineMap.remove(user);\n        count.decrementAndGet();           //在线数减1\n        logger.info(\"有一连接关闭！用户为：\"+user+\"    当前在线人数为\" + count.get());\n    }\n\n    /**\n     * 收到客户端消息后调用的方法\n     *\n     * @param message 客户端发送过来的消息\n     */\n    @OnMessage\n    public void onMessage(String message, Session session) {\n        System.out.println(\"来自客户端的消息:\" + message);\n    }\n\n    /**\n     * 发生错误时调用\n     *\n     * @OnError\n     */\n    public void onError(Session session, Throwable error) {\n        System.out.println(\"发生错误\");\n        error.printStackTrace();\n    }\n\n\n    /**\n     * 发送消息\n     * @param message\n     * @throws IOException\n     */\n    public void sendMessage(String message) throws IOException {\n        this.session.getBasicRemote().sendText(message);\n    }\n\n\n    /**\n     * 群体发送消息\n     * @param message\n     * @throws IOException\n     */\n    public void sendMessageToAll(String message) throws IOException {\n        for (Map.Entry<String,Wstest> ws:onLineMap.entrySet()) {\n            System.out.println(\"当前用户：\"+ws.getKey());\n            ws.getValue().session.getBasicRemote().sendText(message);\n        }\n    }\n\n\n\n    public static synchronized int getOnlineCount() {\n        return (int) count.get();\n    }\n\n\n}\n```\n\n### 前台页面\n\nindex.html，内容如下\n\n```\n<html>\n    <head>\n\n    </head>\n    <body>\n    <title>WebSocket Echo Client</title>\n    <h2>Websocket Echo Client</h2>\n    <div id=\"output\"></div>\n    <script>\n    // Initialize WebSocket connection and event handlers\n    function setup() {\n        output = document.getElementById(\"output\");\n        ws = new WebSocket(\"ws://localhost:8080/webms/hz\");\n        // Listen for the connection open event then call the sendMessage function\n        ws.onopen = function(e) {\n            log(\"Connected\");\n            sendMessage(\"这是发送的数据\")\n        }\n        // Listen for the close connection event\n        ws.onclose = function(e) {\n            log(\"Disconnected: \" + e.reason);\n        }\n        // Listen for connection errors\n        ws.onerror = function(e) {\n            log(\"Error \");\n        }\n        // Listen for new messages arriving at the client\n        ws.onmessage = function(e) {\n            log(\"Message received: \" + e.data);\n        // Close the socket once one message has arrived.\n            //ws.close();\n        }\n    }\n    // Send a message on the WebSocket.\n    function sendMessage(msg){\n        ws.send(msg);\n        log(\"Message sent\");\n    }\n    // Display logging information in the document.\n    function log(s) {\n        var p = document.createElement(\"p\");\n        p.style.wordWrap = \"break-word\";\n        p.textContent = s;\n        output.appendChild(p);\n        // Also log information on the javascript console\n        console.log(s);\n    }\n    // Start running the example.\n    setup();\n    </script>\n</body>\n\n</html>\n\n```\n\n\n\n\n\n","source":"_posts/springboot-websocket-2018-12-15.md","raw":"---\ntitle: springboot websocket使用\ndate: 2018-12-26 09:39:02\ntags: websocket\ncategories: [\"springboot\",\"websocket\",\"java\"]\n---\n\n\n## 简介\n使用springboot websocket过程整理\n\n<!--more-->\n\n### 配置pom依赖\n```xml\n<!--配置springboot web项目-->\n <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n<!--配置springboot websocket-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-websocket</artifactId>\n        </dependency>\n\n```\n### 配置config\n\n```\n /**\n     * 设置websocket bean\n     * @return\n     */\n    @Bean\n    public ServerEndpointExporter serverEndpointExporter() {\n        return new ServerEndpointExporter();\n    }\n\n```\n\n如果是由外部tomcat自己管理则不需要设置，如果是springboot，因为内置tomcat，所以需要设置\n\n\n### websocket主类\n\n```\n@ServerEndpoint(value = \"/webms/{user}\")\n@Component\npublic class Wstest {\n\n\n    private final static Logger logger = LoggerFactory.getLogger(Wstest.class);\n\n    private static AtomicLong count = new AtomicLong(0);\n\n    private static CopyOnWriteArrayList onlineList = new CopyOnWriteArrayList();\n\n    private static ConcurrentHashMap<String,Wstest> onLineMap =new ConcurrentHashMap();\n\n   \n    //与某个客户端的连接会话，需要通过它来给客户端发送数据\n    private Session session;\n\n    /**\n     * 连接建立成功调用的方法\n     */\n    @OnOpen\n    public void onOpen(@PathParam(\"user\") String user, Session session) {\n        this.session = session;\n        onLineMap.put(user,this);\n        count.incrementAndGet();      //在线数加1\n        logger.info(\"有新连接加入！用户为：\"+user+\"    当前在线人数为\" + count.get());\n    }\n\n\n    /**\n     * 连接关闭调用的方法\n     */\n    @OnClose\n    public void onClose(@PathParam(\"user\")  String user) {\n        onLineMap.remove(user);\n        count.decrementAndGet();           //在线数减1\n        logger.info(\"有一连接关闭！用户为：\"+user+\"    当前在线人数为\" + count.get());\n    }\n\n    /**\n     * 收到客户端消息后调用的方法\n     *\n     * @param message 客户端发送过来的消息\n     */\n    @OnMessage\n    public void onMessage(String message, Session session) {\n        System.out.println(\"来自客户端的消息:\" + message);\n    }\n\n    /**\n     * 发生错误时调用\n     *\n     * @OnError\n     */\n    public void onError(Session session, Throwable error) {\n        System.out.println(\"发生错误\");\n        error.printStackTrace();\n    }\n\n\n    /**\n     * 发送消息\n     * @param message\n     * @throws IOException\n     */\n    public void sendMessage(String message) throws IOException {\n        this.session.getBasicRemote().sendText(message);\n    }\n\n\n    /**\n     * 群体发送消息\n     * @param message\n     * @throws IOException\n     */\n    public void sendMessageToAll(String message) throws IOException {\n        for (Map.Entry<String,Wstest> ws:onLineMap.entrySet()) {\n            System.out.println(\"当前用户：\"+ws.getKey());\n            ws.getValue().session.getBasicRemote().sendText(message);\n        }\n    }\n\n\n\n    public static synchronized int getOnlineCount() {\n        return (int) count.get();\n    }\n\n\n}\n```\n\n### 前台页面\n\nindex.html，内容如下\n\n```\n<html>\n    <head>\n\n    </head>\n    <body>\n    <title>WebSocket Echo Client</title>\n    <h2>Websocket Echo Client</h2>\n    <div id=\"output\"></div>\n    <script>\n    // Initialize WebSocket connection and event handlers\n    function setup() {\n        output = document.getElementById(\"output\");\n        ws = new WebSocket(\"ws://localhost:8080/webms/hz\");\n        // Listen for the connection open event then call the sendMessage function\n        ws.onopen = function(e) {\n            log(\"Connected\");\n            sendMessage(\"这是发送的数据\")\n        }\n        // Listen for the close connection event\n        ws.onclose = function(e) {\n            log(\"Disconnected: \" + e.reason);\n        }\n        // Listen for connection errors\n        ws.onerror = function(e) {\n            log(\"Error \");\n        }\n        // Listen for new messages arriving at the client\n        ws.onmessage = function(e) {\n            log(\"Message received: \" + e.data);\n        // Close the socket once one message has arrived.\n            //ws.close();\n        }\n    }\n    // Send a message on the WebSocket.\n    function sendMessage(msg){\n        ws.send(msg);\n        log(\"Message sent\");\n    }\n    // Display logging information in the document.\n    function log(s) {\n        var p = document.createElement(\"p\");\n        p.style.wordWrap = \"break-word\";\n        p.textContent = s;\n        output.appendChild(p);\n        // Also log information on the javascript console\n        console.log(s);\n    }\n    // Start running the example.\n    setup();\n    </script>\n</body>\n\n</html>\n\n```\n\n\n\n\n\n","slug":"springboot-websocket-2018-12-15","published":1,"updated":"2019-09-23T06:59:17.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0w29rkp001puup2ahhr75bw","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>使用springboot websocket过程整理</p>\n<a id=\"more\"></a>\n<h3 id=\"配置pom依赖\"><a href=\"#配置pom依赖\" class=\"headerlink\" title=\"配置pom依赖\"></a>配置pom依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--配置springboot web项目--&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--配置springboot websocket--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"配置config\"><a href=\"#配置config\" class=\"headerlink\" title=\"配置config\"></a>配置config</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">    * 设置websocket bean</span><br><span class=\"line\">    * @return</span><br><span class=\"line\">    */</span><br><span class=\"line\">   @Bean</span><br><span class=\"line\">   public ServerEndpointExporter serverEndpointExporter() &#123;</span><br><span class=\"line\">       return new ServerEndpointExporter();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>如果是由外部tomcat自己管理则不需要设置，如果是springboot，因为内置tomcat，所以需要设置</p>\n<h3 id=\"websocket主类\"><a href=\"#websocket主类\" class=\"headerlink\" title=\"websocket主类\"></a>websocket主类</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ServerEndpoint(value = &quot;/webms/&#123;user&#125;&quot;)</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class Wstest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    private final static Logger logger = LoggerFactory.getLogger(Wstest.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    private static AtomicLong count = new AtomicLong(0);</span><br><span class=\"line\"></span><br><span class=\"line\">    private static CopyOnWriteArrayList onlineList = new CopyOnWriteArrayList();</span><br><span class=\"line\"></span><br><span class=\"line\">    private static ConcurrentHashMap&lt;String,Wstest&gt; onLineMap =new ConcurrentHashMap();</span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\">    //与某个客户端的连接会话，需要通过它来给客户端发送数据</span><br><span class=\"line\">    private Session session;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 连接建立成功调用的方法</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @OnOpen</span><br><span class=\"line\">    public void onOpen(@PathParam(&quot;user&quot;) String user, Session session) &#123;</span><br><span class=\"line\">        this.session = session;</span><br><span class=\"line\">        onLineMap.put(user,this);</span><br><span class=\"line\">        count.incrementAndGet();      //在线数加1</span><br><span class=\"line\">        logger.info(&quot;有新连接加入！用户为：&quot;+user+&quot;    当前在线人数为&quot; + count.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 连接关闭调用的方法</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @OnClose</span><br><span class=\"line\">    public void onClose(@PathParam(&quot;user&quot;)  String user) &#123;</span><br><span class=\"line\">        onLineMap.remove(user);</span><br><span class=\"line\">        count.decrementAndGet();           //在线数减1</span><br><span class=\"line\">        logger.info(&quot;有一连接关闭！用户为：&quot;+user+&quot;    当前在线人数为&quot; + count.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 收到客户端消息后调用的方法</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param message 客户端发送过来的消息</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @OnMessage</span><br><span class=\"line\">    public void onMessage(String message, Session session) &#123;</span><br><span class=\"line\">        System.out.println(&quot;来自客户端的消息:&quot; + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 发生错误时调用</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @OnError</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void onError(Session session, Throwable error) &#123;</span><br><span class=\"line\">        System.out.println(&quot;发生错误&quot;);</span><br><span class=\"line\">        error.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 发送消息</span><br><span class=\"line\">     * @param message</span><br><span class=\"line\">     * @throws IOException</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void sendMessage(String message) throws IOException &#123;</span><br><span class=\"line\">        this.session.getBasicRemote().sendText(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 群体发送消息</span><br><span class=\"line\">     * @param message</span><br><span class=\"line\">     * @throws IOException</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void sendMessageToAll(String message) throws IOException &#123;</span><br><span class=\"line\">        for (Map.Entry&lt;String,Wstest&gt; ws:onLineMap.entrySet()) &#123;</span><br><span class=\"line\">            System.out.println(&quot;当前用户：&quot;+ws.getKey());</span><br><span class=\"line\">            ws.getValue().session.getBasicRemote().sendText(message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public static synchronized int getOnlineCount() &#123;</span><br><span class=\"line\">        return (int) count.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"前台页面\"><a href=\"#前台页面\" class=\"headerlink\" title=\"前台页面\"></a>前台页面</h3><p>index.html，内容如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">    &lt;title&gt;WebSocket Echo Client&lt;/title&gt;</span><br><span class=\"line\">    &lt;h2&gt;Websocket Echo Client&lt;/h2&gt;</span><br><span class=\"line\">    &lt;div id=&quot;output&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">    // Initialize WebSocket connection and event handlers</span><br><span class=\"line\">    function setup() &#123;</span><br><span class=\"line\">        output = document.getElementById(&quot;output&quot;);</span><br><span class=\"line\">        ws = new WebSocket(&quot;ws://localhost:8080/webms/hz&quot;);</span><br><span class=\"line\">        // Listen for the connection open event then call the sendMessage function</span><br><span class=\"line\">        ws.onopen = function(e) &#123;</span><br><span class=\"line\">            log(&quot;Connected&quot;);</span><br><span class=\"line\">            sendMessage(&quot;这是发送的数据&quot;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // Listen for the close connection event</span><br><span class=\"line\">        ws.onclose = function(e) &#123;</span><br><span class=\"line\">            log(&quot;Disconnected: &quot; + e.reason);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // Listen for connection errors</span><br><span class=\"line\">        ws.onerror = function(e) &#123;</span><br><span class=\"line\">            log(&quot;Error &quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // Listen for new messages arriving at the client</span><br><span class=\"line\">        ws.onmessage = function(e) &#123;</span><br><span class=\"line\">            log(&quot;Message received: &quot; + e.data);</span><br><span class=\"line\">        // Close the socket once one message has arrived.</span><br><span class=\"line\">            //ws.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // Send a message on the WebSocket.</span><br><span class=\"line\">    function sendMessage(msg)&#123;</span><br><span class=\"line\">        ws.send(msg);</span><br><span class=\"line\">        log(&quot;Message sent&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // Display logging information in the document.</span><br><span class=\"line\">    function log(s) &#123;</span><br><span class=\"line\">        var p = document.createElement(&quot;p&quot;);</span><br><span class=\"line\">        p.style.wordWrap = &quot;break-word&quot;;</span><br><span class=\"line\">        p.textContent = s;</span><br><span class=\"line\">        output.appendChild(p);</span><br><span class=\"line\">        // Also log information on the javascript console</span><br><span class=\"line\">        console.log(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // Start running the example.</span><br><span class=\"line\">    setup();</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>使用springboot websocket过程整理</p>","more":"<h3 id=\"配置pom依赖\"><a href=\"#配置pom依赖\" class=\"headerlink\" title=\"配置pom依赖\"></a>配置pom依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--配置springboot web项目--&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--配置springboot websocket--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"配置config\"><a href=\"#配置config\" class=\"headerlink\" title=\"配置config\"></a>配置config</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">    * 设置websocket bean</span><br><span class=\"line\">    * @return</span><br><span class=\"line\">    */</span><br><span class=\"line\">   @Bean</span><br><span class=\"line\">   public ServerEndpointExporter serverEndpointExporter() &#123;</span><br><span class=\"line\">       return new ServerEndpointExporter();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>如果是由外部tomcat自己管理则不需要设置，如果是springboot，因为内置tomcat，所以需要设置</p>\n<h3 id=\"websocket主类\"><a href=\"#websocket主类\" class=\"headerlink\" title=\"websocket主类\"></a>websocket主类</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ServerEndpoint(value = &quot;/webms/&#123;user&#125;&quot;)</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class Wstest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    private final static Logger logger = LoggerFactory.getLogger(Wstest.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    private static AtomicLong count = new AtomicLong(0);</span><br><span class=\"line\"></span><br><span class=\"line\">    private static CopyOnWriteArrayList onlineList = new CopyOnWriteArrayList();</span><br><span class=\"line\"></span><br><span class=\"line\">    private static ConcurrentHashMap&lt;String,Wstest&gt; onLineMap =new ConcurrentHashMap();</span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\">    //与某个客户端的连接会话，需要通过它来给客户端发送数据</span><br><span class=\"line\">    private Session session;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 连接建立成功调用的方法</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @OnOpen</span><br><span class=\"line\">    public void onOpen(@PathParam(&quot;user&quot;) String user, Session session) &#123;</span><br><span class=\"line\">        this.session = session;</span><br><span class=\"line\">        onLineMap.put(user,this);</span><br><span class=\"line\">        count.incrementAndGet();      //在线数加1</span><br><span class=\"line\">        logger.info(&quot;有新连接加入！用户为：&quot;+user+&quot;    当前在线人数为&quot; + count.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 连接关闭调用的方法</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @OnClose</span><br><span class=\"line\">    public void onClose(@PathParam(&quot;user&quot;)  String user) &#123;</span><br><span class=\"line\">        onLineMap.remove(user);</span><br><span class=\"line\">        count.decrementAndGet();           //在线数减1</span><br><span class=\"line\">        logger.info(&quot;有一连接关闭！用户为：&quot;+user+&quot;    当前在线人数为&quot; + count.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 收到客户端消息后调用的方法</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param message 客户端发送过来的消息</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @OnMessage</span><br><span class=\"line\">    public void onMessage(String message, Session session) &#123;</span><br><span class=\"line\">        System.out.println(&quot;来自客户端的消息:&quot; + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 发生错误时调用</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @OnError</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void onError(Session session, Throwable error) &#123;</span><br><span class=\"line\">        System.out.println(&quot;发生错误&quot;);</span><br><span class=\"line\">        error.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 发送消息</span><br><span class=\"line\">     * @param message</span><br><span class=\"line\">     * @throws IOException</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void sendMessage(String message) throws IOException &#123;</span><br><span class=\"line\">        this.session.getBasicRemote().sendText(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 群体发送消息</span><br><span class=\"line\">     * @param message</span><br><span class=\"line\">     * @throws IOException</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void sendMessageToAll(String message) throws IOException &#123;</span><br><span class=\"line\">        for (Map.Entry&lt;String,Wstest&gt; ws:onLineMap.entrySet()) &#123;</span><br><span class=\"line\">            System.out.println(&quot;当前用户：&quot;+ws.getKey());</span><br><span class=\"line\">            ws.getValue().session.getBasicRemote().sendText(message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public static synchronized int getOnlineCount() &#123;</span><br><span class=\"line\">        return (int) count.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"前台页面\"><a href=\"#前台页面\" class=\"headerlink\" title=\"前台页面\"></a>前台页面</h3><p>index.html，内容如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">    &lt;title&gt;WebSocket Echo Client&lt;/title&gt;</span><br><span class=\"line\">    &lt;h2&gt;Websocket Echo Client&lt;/h2&gt;</span><br><span class=\"line\">    &lt;div id=&quot;output&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">    // Initialize WebSocket connection and event handlers</span><br><span class=\"line\">    function setup() &#123;</span><br><span class=\"line\">        output = document.getElementById(&quot;output&quot;);</span><br><span class=\"line\">        ws = new WebSocket(&quot;ws://localhost:8080/webms/hz&quot;);</span><br><span class=\"line\">        // Listen for the connection open event then call the sendMessage function</span><br><span class=\"line\">        ws.onopen = function(e) &#123;</span><br><span class=\"line\">            log(&quot;Connected&quot;);</span><br><span class=\"line\">            sendMessage(&quot;这是发送的数据&quot;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // Listen for the close connection event</span><br><span class=\"line\">        ws.onclose = function(e) &#123;</span><br><span class=\"line\">            log(&quot;Disconnected: &quot; + e.reason);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // Listen for connection errors</span><br><span class=\"line\">        ws.onerror = function(e) &#123;</span><br><span class=\"line\">            log(&quot;Error &quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // Listen for new messages arriving at the client</span><br><span class=\"line\">        ws.onmessage = function(e) &#123;</span><br><span class=\"line\">            log(&quot;Message received: &quot; + e.data);</span><br><span class=\"line\">        // Close the socket once one message has arrived.</span><br><span class=\"line\">            //ws.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // Send a message on the WebSocket.</span><br><span class=\"line\">    function sendMessage(msg)&#123;</span><br><span class=\"line\">        ws.send(msg);</span><br><span class=\"line\">        log(&quot;Message sent&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // Display logging information in the document.</span><br><span class=\"line\">    function log(s) &#123;</span><br><span class=\"line\">        var p = document.createElement(&quot;p&quot;);</span><br><span class=\"line\">        p.style.wordWrap = &quot;break-word&quot;;</span><br><span class=\"line\">        p.textContent = s;</span><br><span class=\"line\">        output.appendChild(p);</span><br><span class=\"line\">        // Also log information on the javascript console</span><br><span class=\"line\">        console.log(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // Start running the example.</span><br><span class=\"line\">    setup();</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>"},{"title":"tcp-socket-http区别","date":"2018-08-01T00:36:02.000Z","_content":"\n\n### 简介\n这三个概念是很容易混淆的，我们将通过以下来阐述具体的区别\n\n### HTTP与socket、tcp的关系\n这是OSI（开放系统连接--open system interconnection）模型\n![osi](/images/internet/2018-8-1-3.png)\n\n<!--more-->\n\n这是三者的关系\n![tcp/http/socket](/images/internet/2018-8-1-4.png)\n\n\n\n### http 与tcp\nhttp是基于tcp的，客户端往服务端发送一个HTTP请求时第一步就是要建立与服务端的TCP连接，也就是先三次握手，“你好，你好，你好”。从HTTP 1.1开始支持持久连接，也就是一次TCP连接可以发送多次的HTTP请求。\n\n**总结**\nHTTP是基于tcp的，属于应用层协议\n\n### http 与socket\n\n由于通常情况下Socket(基于tcp)连接就是TCP连接，因此Socket连接一旦建立，通信双方即可开始相互发送数据内容，直到双方连接断开。但在实际网络应用中，客户端到服务器之间的通信往往需要穿越多个中间节点，例如路由器、网关、防火墙等，大部分防火墙默认会关闭长时间处于非活跃状态的连接而导致 Socket 连接断连，因此需要通过轮询告诉网络，该连接处于活跃状态。\n\n而HTTP连接使用的是“请求—响应”的方式，不仅在请求时需要先建立连接，而且需要客户端向服务器发出请求后，服务器端才能回复数据。\n\n很多情况下，需要服务器端主动向客户端推送数据，保持客户端与服务器数据的实时与同步。此时若双方建立的是Socket连接，服务器就可以直接将数据传送给客户端；若双方建立的是HTTP连接，则服务器需要等到客户端发送一次请求后才能将数据传回给客户端，因此，客户端定时向服务器端发送连接请求，不仅可以保持在线，同时也是在“询问”服务器是否有新的数据，如果有就将数据传给客户端。\n\n**总结**\nhttp协议是应用层的协义，有个比较形象的描述：HTTP是轿车，提供了封装或者显示数据的具体形式；Socket是发动机，提供了网络通信的能力。 \n\n### socket 与tcp/ip\n\n**总结**\nsocket本就是传输层tcp与udp的封装，不是协议，是编程接口，因此可以说tcp与udp的具体实现编程接口是由socket实现的\n\n\n\n\n### 总结\n\n用HTTP的情况：双方不需要时刻保持连接在线，比如客户端资源的获取、文件上传等。\n用Socket的情况：大部分即时通讯应用(QQ、微信)、聊天室等\n\n\n\n\n","source":"_posts/tcp-socket-http区别-2018-8-1.md","raw":"---\ntitle: tcp-socket-http区别\ndate: 2018-08-01 08:36:02\ntags: [\"tcp\",\"http\",\"socket\"]\ncategories: [\"internet\"]\n---\n\n\n### 简介\n这三个概念是很容易混淆的，我们将通过以下来阐述具体的区别\n\n### HTTP与socket、tcp的关系\n这是OSI（开放系统连接--open system interconnection）模型\n![osi](/images/internet/2018-8-1-3.png)\n\n<!--more-->\n\n这是三者的关系\n![tcp/http/socket](/images/internet/2018-8-1-4.png)\n\n\n\n### http 与tcp\nhttp是基于tcp的，客户端往服务端发送一个HTTP请求时第一步就是要建立与服务端的TCP连接，也就是先三次握手，“你好，你好，你好”。从HTTP 1.1开始支持持久连接，也就是一次TCP连接可以发送多次的HTTP请求。\n\n**总结**\nHTTP是基于tcp的，属于应用层协议\n\n### http 与socket\n\n由于通常情况下Socket(基于tcp)连接就是TCP连接，因此Socket连接一旦建立，通信双方即可开始相互发送数据内容，直到双方连接断开。但在实际网络应用中，客户端到服务器之间的通信往往需要穿越多个中间节点，例如路由器、网关、防火墙等，大部分防火墙默认会关闭长时间处于非活跃状态的连接而导致 Socket 连接断连，因此需要通过轮询告诉网络，该连接处于活跃状态。\n\n而HTTP连接使用的是“请求—响应”的方式，不仅在请求时需要先建立连接，而且需要客户端向服务器发出请求后，服务器端才能回复数据。\n\n很多情况下，需要服务器端主动向客户端推送数据，保持客户端与服务器数据的实时与同步。此时若双方建立的是Socket连接，服务器就可以直接将数据传送给客户端；若双方建立的是HTTP连接，则服务器需要等到客户端发送一次请求后才能将数据传回给客户端，因此，客户端定时向服务器端发送连接请求，不仅可以保持在线，同时也是在“询问”服务器是否有新的数据，如果有就将数据传给客户端。\n\n**总结**\nhttp协议是应用层的协义，有个比较形象的描述：HTTP是轿车，提供了封装或者显示数据的具体形式；Socket是发动机，提供了网络通信的能力。 \n\n### socket 与tcp/ip\n\n**总结**\nsocket本就是传输层tcp与udp的封装，不是协议，是编程接口，因此可以说tcp与udp的具体实现编程接口是由socket实现的\n\n\n\n\n### 总结\n\n用HTTP的情况：双方不需要时刻保持连接在线，比如客户端资源的获取、文件上传等。\n用Socket的情况：大部分即时通讯应用(QQ、微信)、聊天室等\n\n\n\n\n","slug":"tcp-socket-http区别-2018-8-1","published":1,"updated":"2019-09-23T06:59:16.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0w29rkr001tuup2fcq483pl","content":"<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>这三个概念是很容易混淆的，我们将通过以下来阐述具体的区别</p>\n<h3 id=\"HTTP与socket、tcp的关系\"><a href=\"#HTTP与socket、tcp的关系\" class=\"headerlink\" title=\"HTTP与socket、tcp的关系\"></a>HTTP与socket、tcp的关系</h3><p>这是OSI（开放系统连接–open system interconnection）模型<br><img src=\"/images/internet/2018-8-1-3.png\" alt=\"osi\"></p>\n<a id=\"more\"></a>\n<p>这是三者的关系<br><img src=\"/images/internet/2018-8-1-4.png\" alt=\"tcp/http/socket\"></p>\n<h3 id=\"http-与tcp\"><a href=\"#http-与tcp\" class=\"headerlink\" title=\"http 与tcp\"></a>http 与tcp</h3><p>http是基于tcp的，客户端往服务端发送一个HTTP请求时第一步就是要建立与服务端的TCP连接，也就是先三次握手，“你好，你好，你好”。从HTTP 1.1开始支持持久连接，也就是一次TCP连接可以发送多次的HTTP请求。</p>\n<p><strong>总结</strong><br>HTTP是基于tcp的，属于应用层协议</p>\n<h3 id=\"http-与socket\"><a href=\"#http-与socket\" class=\"headerlink\" title=\"http 与socket\"></a>http 与socket</h3><p>由于通常情况下Socket(基于tcp)连接就是TCP连接，因此Socket连接一旦建立，通信双方即可开始相互发送数据内容，直到双方连接断开。但在实际网络应用中，客户端到服务器之间的通信往往需要穿越多个中间节点，例如路由器、网关、防火墙等，大部分防火墙默认会关闭长时间处于非活跃状态的连接而导致 Socket 连接断连，因此需要通过轮询告诉网络，该连接处于活跃状态。</p>\n<p>而HTTP连接使用的是“请求—响应”的方式，不仅在请求时需要先建立连接，而且需要客户端向服务器发出请求后，服务器端才能回复数据。</p>\n<p>很多情况下，需要服务器端主动向客户端推送数据，保持客户端与服务器数据的实时与同步。此时若双方建立的是Socket连接，服务器就可以直接将数据传送给客户端；若双方建立的是HTTP连接，则服务器需要等到客户端发送一次请求后才能将数据传回给客户端，因此，客户端定时向服务器端发送连接请求，不仅可以保持在线，同时也是在“询问”服务器是否有新的数据，如果有就将数据传给客户端。</p>\n<p><strong>总结</strong><br>http协议是应用层的协义，有个比较形象的描述：HTTP是轿车，提供了封装或者显示数据的具体形式；Socket是发动机，提供了网络通信的能力。 </p>\n<h3 id=\"socket-与tcp-ip\"><a href=\"#socket-与tcp-ip\" class=\"headerlink\" title=\"socket 与tcp/ip\"></a>socket 与tcp/ip</h3><p><strong>总结</strong><br>socket本就是传输层tcp与udp的封装，不是协议，是编程接口，因此可以说tcp与udp的具体实现编程接口是由socket实现的</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>用HTTP的情况：双方不需要时刻保持连接在线，比如客户端资源的获取、文件上传等。<br>用Socket的情况：大部分即时通讯应用(QQ、微信)、聊天室等</p>\n","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>这三个概念是很容易混淆的，我们将通过以下来阐述具体的区别</p>\n<h3 id=\"HTTP与socket、tcp的关系\"><a href=\"#HTTP与socket、tcp的关系\" class=\"headerlink\" title=\"HTTP与socket、tcp的关系\"></a>HTTP与socket、tcp的关系</h3><p>这是OSI（开放系统连接–open system interconnection）模型<br><img src=\"/images/internet/2018-8-1-3.png\" alt=\"osi\"></p>","more":"<p>这是三者的关系<br><img src=\"/images/internet/2018-8-1-4.png\" alt=\"tcp/http/socket\"></p>\n<h3 id=\"http-与tcp\"><a href=\"#http-与tcp\" class=\"headerlink\" title=\"http 与tcp\"></a>http 与tcp</h3><p>http是基于tcp的，客户端往服务端发送一个HTTP请求时第一步就是要建立与服务端的TCP连接，也就是先三次握手，“你好，你好，你好”。从HTTP 1.1开始支持持久连接，也就是一次TCP连接可以发送多次的HTTP请求。</p>\n<p><strong>总结</strong><br>HTTP是基于tcp的，属于应用层协议</p>\n<h3 id=\"http-与socket\"><a href=\"#http-与socket\" class=\"headerlink\" title=\"http 与socket\"></a>http 与socket</h3><p>由于通常情况下Socket(基于tcp)连接就是TCP连接，因此Socket连接一旦建立，通信双方即可开始相互发送数据内容，直到双方连接断开。但在实际网络应用中，客户端到服务器之间的通信往往需要穿越多个中间节点，例如路由器、网关、防火墙等，大部分防火墙默认会关闭长时间处于非活跃状态的连接而导致 Socket 连接断连，因此需要通过轮询告诉网络，该连接处于活跃状态。</p>\n<p>而HTTP连接使用的是“请求—响应”的方式，不仅在请求时需要先建立连接，而且需要客户端向服务器发出请求后，服务器端才能回复数据。</p>\n<p>很多情况下，需要服务器端主动向客户端推送数据，保持客户端与服务器数据的实时与同步。此时若双方建立的是Socket连接，服务器就可以直接将数据传送给客户端；若双方建立的是HTTP连接，则服务器需要等到客户端发送一次请求后才能将数据传回给客户端，因此，客户端定时向服务器端发送连接请求，不仅可以保持在线，同时也是在“询问”服务器是否有新的数据，如果有就将数据传给客户端。</p>\n<p><strong>总结</strong><br>http协议是应用层的协义，有个比较形象的描述：HTTP是轿车，提供了封装或者显示数据的具体形式；Socket是发动机，提供了网络通信的能力。 </p>\n<h3 id=\"socket-与tcp-ip\"><a href=\"#socket-与tcp-ip\" class=\"headerlink\" title=\"socket 与tcp/ip\"></a>socket 与tcp/ip</h3><p><strong>总结</strong><br>socket本就是传输层tcp与udp的封装，不是协议，是编程接口，因此可以说tcp与udp的具体实现编程接口是由socket实现的</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>用HTTP的情况：双方不需要时刻保持连接在线，比如客户端资源的获取、文件上传等。<br>用Socket的情况：大部分即时通讯应用(QQ、微信)、聊天室等</p>"},{"title":"Tcp名词解析","date":"2018-07-25T00:36:02.000Z","_content":"\n### 简介\n主要介绍一些tcp的专业名词以及相关的含义\n\n#### 在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.\n\n\n* SYN表示建立连接\n\n* FIN表示关闭连接\n\n* ACK表示响应\n\n* PSH表示有 DATA数据传输\n<!--more-->\n\n* RST表示连接重置\n\n\n> 其中，ACK是可能与SYN，FIN等同时使用的，比如SYN和ACK可能同时为1，它表示的就是建立连接之后的响应，\n> 如果只是单个的一个SYN，它表示的只是建立连接。\n> TCP的几次握手就是通过这样的ACK表现出来的。\n> 但SYN与FIN是不会同时为1的，因为前者表示的是建立连接，而后者表示的是断开连接。\n> RST一般是在FIN之后才会出现为1的情况，表示的是连接重置。\n> 一般地，当出现FIN包或RST包时，我们便认为客户端与服务器端断开了连接；而当出现SYN和SYN＋ACK包时，我们认为客户端与服务器建立了一个连接。\n> PSH为1的情况，一般只出现在 DATA内容不为0的包中，也就是说PSH为1表示的是有真正的TCP数据包内容被传递。\n\n\n#### 重传的相关名词\n\n* 处理大负载连接的名词\n```\ntcp_synack_retries   ： 可以用他来减少重试次数\ntcp_max_syn_backlog  ： 可以增大SYN连接数\ntcp_abort_on_overflow： 处理不过来干脆就直接拒绝连接了\n```\n\n* 相关注意的\n\n```\nISN ：init sequence number 初始化序列码\n\nMSL ： max segment lifetime 最大tcp segment存活时间\n\nTIME_WAIT： 为主动关闭方的tcp状态机的状态\n主要有两个原因：1）TIME_WAIT确保有足够的时间让对端收到了ACK，如果被动关闭的那方没有收到Ack，就会触发被动端重发Fin，一来一去正好2个MSL，2）有足够的时间让这个连接不会跟后面的连接混在一起\n\ntcp_tw_reuse：官方文档上说tcp_tw_reuse 加上tcp_timestamps（又叫PAWS, for Protection Against Wrapped Sequence Numbers）可以保证协议的角度上的安全，但是你需要tcp_timestamps在两边都被打开\n\ntcp_tw_recycle：如果是tcp_tw_recycle被打开了话，会假设对端开启了tcp_timestamps，然后会去比较时间戳，如果时间戳变大了，就可以重用。但是，如果对端是一个NAT网络的话（如：一个公司只用一个IP出公网）或是对端的IP被另一台重用了，这个事就复杂了。建链接的SYN可能就被直接丢掉了\n\ntcp_max_tw_buckets：这个是控制并发的TIME_WAIT的数量，默认值是180000，如果超限，那么，系统会把多的给destory掉，然后在日志里打一个警告（如：time wait bucket table overflow），官网文档说这个参数是用来对抗DDoS攻击的。\n\nFast Retransmit ：快速重传机制，当对端没有收到对应的包时，对端会发送三次一样的ack，我们可以通过发送的这种机制，重传丢失的segment\n\nSACK ：Selective Acknowledgment (SACK)，主要是对端接收到的数据块，可以让己方发现哪些没有收到\n\nD-ACK:Duplicate SACK – 重复收到数据的问题,其主要使用了SACK来告诉发送方有哪些数据被重复接收了。\n如果SACK的第一个段的范围被ACK所覆盖，那么就是D-SACK\n如果SACK的第一个段的范围被SACK的第二个段覆盖，那么就是D-SACK\n\n```\n\n\n\nTCP的连接建立和连接关闭，都是通过请求－响应的模式完成的。\n\n### 概念补充-TCP三次握手：\n\nTCP(Transmission Control Protocol)传输控制协议\n\nTCP是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手确认建立一个连接：\n\n位码即tcp标志位，有6种标示：SYN(synchronous建立联机) ACK(acknowledgement 确认) PSH(push传送) FIN(finish结束) RST(reset重置) URG(urgent紧急)Sequence number(顺序号码) Acknowledge number(确认号码)\n\n```\n第一次握手：主机A发送位码为syn＝1，随机产生seq number=1234567的数据包到服务器，主机B由SYN=1知道，A要求建立联机；\n第二次握手：主机B收到请求后要确认联机信息，向A发送ack number=(主机A的seq+1)，syn=1，ACK=1，随机产生seq=7654321的包；\n第三次握手：主机A收到后检查ack number是否正确，即第一次发送的seq number+1，以及位码ACK是否为1，若正确，主机A会再发送ack number=(主机B的seq+1)，ACK=1，主机B收到后确认seq值与ACK=1则连接建立成功。\n\n完成三次握手，主机A与主机B开始传送数据。\n\n\n在TCP/IP协议中，TCP协议提供可靠的连接服务，采用三次握手建立一个连接。\n第一次握手：建立连接时，客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；\n第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；\n第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。完成三次握手，客户端与服务器开始传送数据.\n```\n\n### 概念补充-TCP四次挥手：\n* 以客户端主动挥手为例\n```\n第一次挥手：客户端发送fin=1 ,seq=x,ack=y，此时客户端状态为fin_wait1,等待服务器确认\n第二次挥手：服务端接收后，先发送ack=x+1，此时服务端状态进入close_wait,客户端接收后状态进入fin_wait2\n第三次挥手：服务端发送fin=1,seq=y+1,此时服务端状态进入last_ack，客户端接收后进入time_wait\n第四次挥手：客户端接收到上面两个后，发送ack=y+2,服务端收到后会关闭;\n\n客户端time_wait状态等待timeout时间后，才会释放关闭\n```\n\n* 客户端与服务端同时关闭\n```\n第一次与第二次挥手同时进行\n1.客户端与服务端同时发送fin,seq,ack,两者接收后，此时客户端与服务端同时进入fin_wait1,等待对方确认\n2.客户端与服务端同时发送ack,两者接收后同时进入time_wait\n\n两者都在time_wait状态等待timeout时间后，才会释放关闭\n```\n\n\n\n\n\n\n\n\n\n","source":"_posts/tcp名词解析-2018-07-25.md","raw":"---\ntitle: Tcp名词解析\ndate: 2018-07-25 08:36:02\ntags: tcp\ncategories: [\"internet\",\"tcp\"]\n---\n\n### 简介\n主要介绍一些tcp的专业名词以及相关的含义\n\n#### 在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.\n\n\n* SYN表示建立连接\n\n* FIN表示关闭连接\n\n* ACK表示响应\n\n* PSH表示有 DATA数据传输\n<!--more-->\n\n* RST表示连接重置\n\n\n> 其中，ACK是可能与SYN，FIN等同时使用的，比如SYN和ACK可能同时为1，它表示的就是建立连接之后的响应，\n> 如果只是单个的一个SYN，它表示的只是建立连接。\n> TCP的几次握手就是通过这样的ACK表现出来的。\n> 但SYN与FIN是不会同时为1的，因为前者表示的是建立连接，而后者表示的是断开连接。\n> RST一般是在FIN之后才会出现为1的情况，表示的是连接重置。\n> 一般地，当出现FIN包或RST包时，我们便认为客户端与服务器端断开了连接；而当出现SYN和SYN＋ACK包时，我们认为客户端与服务器建立了一个连接。\n> PSH为1的情况，一般只出现在 DATA内容不为0的包中，也就是说PSH为1表示的是有真正的TCP数据包内容被传递。\n\n\n#### 重传的相关名词\n\n* 处理大负载连接的名词\n```\ntcp_synack_retries   ： 可以用他来减少重试次数\ntcp_max_syn_backlog  ： 可以增大SYN连接数\ntcp_abort_on_overflow： 处理不过来干脆就直接拒绝连接了\n```\n\n* 相关注意的\n\n```\nISN ：init sequence number 初始化序列码\n\nMSL ： max segment lifetime 最大tcp segment存活时间\n\nTIME_WAIT： 为主动关闭方的tcp状态机的状态\n主要有两个原因：1）TIME_WAIT确保有足够的时间让对端收到了ACK，如果被动关闭的那方没有收到Ack，就会触发被动端重发Fin，一来一去正好2个MSL，2）有足够的时间让这个连接不会跟后面的连接混在一起\n\ntcp_tw_reuse：官方文档上说tcp_tw_reuse 加上tcp_timestamps（又叫PAWS, for Protection Against Wrapped Sequence Numbers）可以保证协议的角度上的安全，但是你需要tcp_timestamps在两边都被打开\n\ntcp_tw_recycle：如果是tcp_tw_recycle被打开了话，会假设对端开启了tcp_timestamps，然后会去比较时间戳，如果时间戳变大了，就可以重用。但是，如果对端是一个NAT网络的话（如：一个公司只用一个IP出公网）或是对端的IP被另一台重用了，这个事就复杂了。建链接的SYN可能就被直接丢掉了\n\ntcp_max_tw_buckets：这个是控制并发的TIME_WAIT的数量，默认值是180000，如果超限，那么，系统会把多的给destory掉，然后在日志里打一个警告（如：time wait bucket table overflow），官网文档说这个参数是用来对抗DDoS攻击的。\n\nFast Retransmit ：快速重传机制，当对端没有收到对应的包时，对端会发送三次一样的ack，我们可以通过发送的这种机制，重传丢失的segment\n\nSACK ：Selective Acknowledgment (SACK)，主要是对端接收到的数据块，可以让己方发现哪些没有收到\n\nD-ACK:Duplicate SACK – 重复收到数据的问题,其主要使用了SACK来告诉发送方有哪些数据被重复接收了。\n如果SACK的第一个段的范围被ACK所覆盖，那么就是D-SACK\n如果SACK的第一个段的范围被SACK的第二个段覆盖，那么就是D-SACK\n\n```\n\n\n\nTCP的连接建立和连接关闭，都是通过请求－响应的模式完成的。\n\n### 概念补充-TCP三次握手：\n\nTCP(Transmission Control Protocol)传输控制协议\n\nTCP是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手确认建立一个连接：\n\n位码即tcp标志位，有6种标示：SYN(synchronous建立联机) ACK(acknowledgement 确认) PSH(push传送) FIN(finish结束) RST(reset重置) URG(urgent紧急)Sequence number(顺序号码) Acknowledge number(确认号码)\n\n```\n第一次握手：主机A发送位码为syn＝1，随机产生seq number=1234567的数据包到服务器，主机B由SYN=1知道，A要求建立联机；\n第二次握手：主机B收到请求后要确认联机信息，向A发送ack number=(主机A的seq+1)，syn=1，ACK=1，随机产生seq=7654321的包；\n第三次握手：主机A收到后检查ack number是否正确，即第一次发送的seq number+1，以及位码ACK是否为1，若正确，主机A会再发送ack number=(主机B的seq+1)，ACK=1，主机B收到后确认seq值与ACK=1则连接建立成功。\n\n完成三次握手，主机A与主机B开始传送数据。\n\n\n在TCP/IP协议中，TCP协议提供可靠的连接服务，采用三次握手建立一个连接。\n第一次握手：建立连接时，客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；\n第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；\n第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。完成三次握手，客户端与服务器开始传送数据.\n```\n\n### 概念补充-TCP四次挥手：\n* 以客户端主动挥手为例\n```\n第一次挥手：客户端发送fin=1 ,seq=x,ack=y，此时客户端状态为fin_wait1,等待服务器确认\n第二次挥手：服务端接收后，先发送ack=x+1，此时服务端状态进入close_wait,客户端接收后状态进入fin_wait2\n第三次挥手：服务端发送fin=1,seq=y+1,此时服务端状态进入last_ack，客户端接收后进入time_wait\n第四次挥手：客户端接收到上面两个后，发送ack=y+2,服务端收到后会关闭;\n\n客户端time_wait状态等待timeout时间后，才会释放关闭\n```\n\n* 客户端与服务端同时关闭\n```\n第一次与第二次挥手同时进行\n1.客户端与服务端同时发送fin,seq,ack,两者接收后，此时客户端与服务端同时进入fin_wait1,等待对方确认\n2.客户端与服务端同时发送ack,两者接收后同时进入time_wait\n\n两者都在time_wait状态等待timeout时间后，才会释放关闭\n```\n\n\n\n\n\n\n\n\n\n","slug":"tcp名词解析-2018-07-25","published":1,"updated":"2019-09-23T06:59:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0w29rks001xuup2sm7uslck","content":"<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>主要介绍一些tcp的专业名词以及相关的含义</p>\n<h4 id=\"在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN-FIN-ACK-PSH-RST-URG\"><a href=\"#在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN-FIN-ACK-PSH-RST-URG\" class=\"headerlink\" title=\"在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.\"></a>在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.</h4><ul>\n<li><p>SYN表示建立连接</p>\n</li>\n<li><p>FIN表示关闭连接</p>\n</li>\n<li><p>ACK表示响应</p>\n</li>\n<li><p>PSH表示有 DATA数据传输</p>\n<a id=\"more\"></a>\n</li>\n<li><p>RST表示连接重置</p>\n</li>\n</ul>\n<blockquote>\n<p>其中，ACK是可能与SYN，FIN等同时使用的，比如SYN和ACK可能同时为1，它表示的就是建立连接之后的响应，<br>如果只是单个的一个SYN，它表示的只是建立连接。<br>TCP的几次握手就是通过这样的ACK表现出来的。<br>但SYN与FIN是不会同时为1的，因为前者表示的是建立连接，而后者表示的是断开连接。<br>RST一般是在FIN之后才会出现为1的情况，表示的是连接重置。<br>一般地，当出现FIN包或RST包时，我们便认为客户端与服务器端断开了连接；而当出现SYN和SYN＋ACK包时，我们认为客户端与服务器建立了一个连接。<br>PSH为1的情况，一般只出现在 DATA内容不为0的包中，也就是说PSH为1表示的是有真正的TCP数据包内容被传递。</p>\n</blockquote>\n<h4 id=\"重传的相关名词\"><a href=\"#重传的相关名词\" class=\"headerlink\" title=\"重传的相关名词\"></a>重传的相关名词</h4><ul>\n<li><p>处理大负载连接的名词</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcp_synack_retries   ： 可以用他来减少重试次数</span><br><span class=\"line\">tcp_max_syn_backlog  ： 可以增大SYN连接数</span><br><span class=\"line\">tcp_abort_on_overflow： 处理不过来干脆就直接拒绝连接了</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>相关注意的</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ISN ：init sequence number 初始化序列码</span><br><span class=\"line\"></span><br><span class=\"line\">MSL ： max segment lifetime 最大tcp segment存活时间</span><br><span class=\"line\"></span><br><span class=\"line\">TIME_WAIT： 为主动关闭方的tcp状态机的状态</span><br><span class=\"line\">主要有两个原因：1）TIME_WAIT确保有足够的时间让对端收到了ACK，如果被动关闭的那方没有收到Ack，就会触发被动端重发Fin，一来一去正好2个MSL，2）有足够的时间让这个连接不会跟后面的连接混在一起</span><br><span class=\"line\"></span><br><span class=\"line\">tcp_tw_reuse：官方文档上说tcp_tw_reuse 加上tcp_timestamps（又叫PAWS, for Protection Against Wrapped Sequence Numbers）可以保证协议的角度上的安全，但是你需要tcp_timestamps在两边都被打开</span><br><span class=\"line\"></span><br><span class=\"line\">tcp_tw_recycle：如果是tcp_tw_recycle被打开了话，会假设对端开启了tcp_timestamps，然后会去比较时间戳，如果时间戳变大了，就可以重用。但是，如果对端是一个NAT网络的话（如：一个公司只用一个IP出公网）或是对端的IP被另一台重用了，这个事就复杂了。建链接的SYN可能就被直接丢掉了</span><br><span class=\"line\"></span><br><span class=\"line\">tcp_max_tw_buckets：这个是控制并发的TIME_WAIT的数量，默认值是180000，如果超限，那么，系统会把多的给destory掉，然后在日志里打一个警告（如：time wait bucket table overflow），官网文档说这个参数是用来对抗DDoS攻击的。</span><br><span class=\"line\"></span><br><span class=\"line\">Fast Retransmit ：快速重传机制，当对端没有收到对应的包时，对端会发送三次一样的ack，我们可以通过发送的这种机制，重传丢失的segment</span><br><span class=\"line\"></span><br><span class=\"line\">SACK ：Selective Acknowledgment (SACK)，主要是对端接收到的数据块，可以让己方发现哪些没有收到</span><br><span class=\"line\"></span><br><span class=\"line\">D-ACK:Duplicate SACK – 重复收到数据的问题,其主要使用了SACK来告诉发送方有哪些数据被重复接收了。</span><br><span class=\"line\">如果SACK的第一个段的范围被ACK所覆盖，那么就是D-SACK</span><br><span class=\"line\">如果SACK的第一个段的范围被SACK的第二个段覆盖，那么就是D-SACK</span><br></pre></td></tr></table></figure>\n<p>TCP的连接建立和连接关闭，都是通过请求－响应的模式完成的。</p>\n<h3 id=\"概念补充-TCP三次握手：\"><a href=\"#概念补充-TCP三次握手：\" class=\"headerlink\" title=\"概念补充-TCP三次握手：\"></a>概念补充-TCP三次握手：</h3><p>TCP(Transmission Control Protocol)传输控制协议</p>\n<p>TCP是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手确认建立一个连接：</p>\n<p>位码即tcp标志位，有6种标示：SYN(synchronous建立联机) ACK(acknowledgement 确认) PSH(push传送) FIN(finish结束) RST(reset重置) URG(urgent紧急)Sequence number(顺序号码) Acknowledge number(确认号码)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一次握手：主机A发送位码为syn＝1，随机产生seq number=1234567的数据包到服务器，主机B由SYN=1知道，A要求建立联机；</span><br><span class=\"line\">第二次握手：主机B收到请求后要确认联机信息，向A发送ack number=(主机A的seq+1)，syn=1，ACK=1，随机产生seq=7654321的包；</span><br><span class=\"line\">第三次握手：主机A收到后检查ack number是否正确，即第一次发送的seq number+1，以及位码ACK是否为1，若正确，主机A会再发送ack number=(主机B的seq+1)，ACK=1，主机B收到后确认seq值与ACK=1则连接建立成功。</span><br><span class=\"line\"></span><br><span class=\"line\">完成三次握手，主机A与主机B开始传送数据。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">在TCP/IP协议中，TCP协议提供可靠的连接服务，采用三次握手建立一个连接。</span><br><span class=\"line\">第一次握手：建立连接时，客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；</span><br><span class=\"line\">第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；</span><br><span class=\"line\">第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。完成三次握手，客户端与服务器开始传送数据.</span><br></pre></td></tr></table></figure>\n<h3 id=\"概念补充-TCP四次挥手：\"><a href=\"#概念补充-TCP四次挥手：\" class=\"headerlink\" title=\"概念补充-TCP四次挥手：\"></a>概念补充-TCP四次挥手：</h3><ul>\n<li><p>以客户端主动挥手为例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一次挥手：客户端发送fin=1 ,seq=x,ack=y，此时客户端状态为fin_wait1,等待服务器确认</span><br><span class=\"line\">第二次挥手：服务端接收后，先发送ack=x+1，此时服务端状态进入close_wait,客户端接收后状态进入fin_wait2</span><br><span class=\"line\">第三次挥手：服务端发送fin=1,seq=y+1,此时服务端状态进入last_ack，客户端接收后进入time_wait</span><br><span class=\"line\">第四次挥手：客户端接收到上面两个后，发送ack=y+2,服务端收到后会关闭;</span><br><span class=\"line\"></span><br><span class=\"line\">客户端time_wait状态等待timeout时间后，才会释放关闭</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>客户端与服务端同时关闭</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一次与第二次挥手同时进行</span><br><span class=\"line\">1.客户端与服务端同时发送fin,seq,ack,两者接收后，此时客户端与服务端同时进入fin_wait1,等待对方确认</span><br><span class=\"line\">2.客户端与服务端同时发送ack,两者接收后同时进入time_wait</span><br><span class=\"line\"></span><br><span class=\"line\">两者都在time_wait状态等待timeout时间后，才会释放关闭</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>主要介绍一些tcp的专业名词以及相关的含义</p>\n<h4 id=\"在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN-FIN-ACK-PSH-RST-URG\"><a href=\"#在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN-FIN-ACK-PSH-RST-URG\" class=\"headerlink\" title=\"在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.\"></a>在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.</h4><ul>\n<li><p>SYN表示建立连接</p>\n</li>\n<li><p>FIN表示关闭连接</p>\n</li>\n<li><p>ACK表示响应</p>\n</li>\n<li><p>PSH表示有 DATA数据传输</p>","more":"</li>\n<li><p>RST表示连接重置</p>\n</li>\n</ul>\n<blockquote>\n<p>其中，ACK是可能与SYN，FIN等同时使用的，比如SYN和ACK可能同时为1，它表示的就是建立连接之后的响应，<br>如果只是单个的一个SYN，它表示的只是建立连接。<br>TCP的几次握手就是通过这样的ACK表现出来的。<br>但SYN与FIN是不会同时为1的，因为前者表示的是建立连接，而后者表示的是断开连接。<br>RST一般是在FIN之后才会出现为1的情况，表示的是连接重置。<br>一般地，当出现FIN包或RST包时，我们便认为客户端与服务器端断开了连接；而当出现SYN和SYN＋ACK包时，我们认为客户端与服务器建立了一个连接。<br>PSH为1的情况，一般只出现在 DATA内容不为0的包中，也就是说PSH为1表示的是有真正的TCP数据包内容被传递。</p>\n</blockquote>\n<h4 id=\"重传的相关名词\"><a href=\"#重传的相关名词\" class=\"headerlink\" title=\"重传的相关名词\"></a>重传的相关名词</h4><ul>\n<li><p>处理大负载连接的名词</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcp_synack_retries   ： 可以用他来减少重试次数</span><br><span class=\"line\">tcp_max_syn_backlog  ： 可以增大SYN连接数</span><br><span class=\"line\">tcp_abort_on_overflow： 处理不过来干脆就直接拒绝连接了</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>相关注意的</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ISN ：init sequence number 初始化序列码</span><br><span class=\"line\"></span><br><span class=\"line\">MSL ： max segment lifetime 最大tcp segment存活时间</span><br><span class=\"line\"></span><br><span class=\"line\">TIME_WAIT： 为主动关闭方的tcp状态机的状态</span><br><span class=\"line\">主要有两个原因：1）TIME_WAIT确保有足够的时间让对端收到了ACK，如果被动关闭的那方没有收到Ack，就会触发被动端重发Fin，一来一去正好2个MSL，2）有足够的时间让这个连接不会跟后面的连接混在一起</span><br><span class=\"line\"></span><br><span class=\"line\">tcp_tw_reuse：官方文档上说tcp_tw_reuse 加上tcp_timestamps（又叫PAWS, for Protection Against Wrapped Sequence Numbers）可以保证协议的角度上的安全，但是你需要tcp_timestamps在两边都被打开</span><br><span class=\"line\"></span><br><span class=\"line\">tcp_tw_recycle：如果是tcp_tw_recycle被打开了话，会假设对端开启了tcp_timestamps，然后会去比较时间戳，如果时间戳变大了，就可以重用。但是，如果对端是一个NAT网络的话（如：一个公司只用一个IP出公网）或是对端的IP被另一台重用了，这个事就复杂了。建链接的SYN可能就被直接丢掉了</span><br><span class=\"line\"></span><br><span class=\"line\">tcp_max_tw_buckets：这个是控制并发的TIME_WAIT的数量，默认值是180000，如果超限，那么，系统会把多的给destory掉，然后在日志里打一个警告（如：time wait bucket table overflow），官网文档说这个参数是用来对抗DDoS攻击的。</span><br><span class=\"line\"></span><br><span class=\"line\">Fast Retransmit ：快速重传机制，当对端没有收到对应的包时，对端会发送三次一样的ack，我们可以通过发送的这种机制，重传丢失的segment</span><br><span class=\"line\"></span><br><span class=\"line\">SACK ：Selective Acknowledgment (SACK)，主要是对端接收到的数据块，可以让己方发现哪些没有收到</span><br><span class=\"line\"></span><br><span class=\"line\">D-ACK:Duplicate SACK – 重复收到数据的问题,其主要使用了SACK来告诉发送方有哪些数据被重复接收了。</span><br><span class=\"line\">如果SACK的第一个段的范围被ACK所覆盖，那么就是D-SACK</span><br><span class=\"line\">如果SACK的第一个段的范围被SACK的第二个段覆盖，那么就是D-SACK</span><br></pre></td></tr></table></figure>\n<p>TCP的连接建立和连接关闭，都是通过请求－响应的模式完成的。</p>\n<h3 id=\"概念补充-TCP三次握手：\"><a href=\"#概念补充-TCP三次握手：\" class=\"headerlink\" title=\"概念补充-TCP三次握手：\"></a>概念补充-TCP三次握手：</h3><p>TCP(Transmission Control Protocol)传输控制协议</p>\n<p>TCP是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手确认建立一个连接：</p>\n<p>位码即tcp标志位，有6种标示：SYN(synchronous建立联机) ACK(acknowledgement 确认) PSH(push传送) FIN(finish结束) RST(reset重置) URG(urgent紧急)Sequence number(顺序号码) Acknowledge number(确认号码)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一次握手：主机A发送位码为syn＝1，随机产生seq number=1234567的数据包到服务器，主机B由SYN=1知道，A要求建立联机；</span><br><span class=\"line\">第二次握手：主机B收到请求后要确认联机信息，向A发送ack number=(主机A的seq+1)，syn=1，ACK=1，随机产生seq=7654321的包；</span><br><span class=\"line\">第三次握手：主机A收到后检查ack number是否正确，即第一次发送的seq number+1，以及位码ACK是否为1，若正确，主机A会再发送ack number=(主机B的seq+1)，ACK=1，主机B收到后确认seq值与ACK=1则连接建立成功。</span><br><span class=\"line\"></span><br><span class=\"line\">完成三次握手，主机A与主机B开始传送数据。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">在TCP/IP协议中，TCP协议提供可靠的连接服务，采用三次握手建立一个连接。</span><br><span class=\"line\">第一次握手：建立连接时，客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；</span><br><span class=\"line\">第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；</span><br><span class=\"line\">第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。完成三次握手，客户端与服务器开始传送数据.</span><br></pre></td></tr></table></figure>\n<h3 id=\"概念补充-TCP四次挥手：\"><a href=\"#概念补充-TCP四次挥手：\" class=\"headerlink\" title=\"概念补充-TCP四次挥手：\"></a>概念补充-TCP四次挥手：</h3><ul>\n<li><p>以客户端主动挥手为例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一次挥手：客户端发送fin=1 ,seq=x,ack=y，此时客户端状态为fin_wait1,等待服务器确认</span><br><span class=\"line\">第二次挥手：服务端接收后，先发送ack=x+1，此时服务端状态进入close_wait,客户端接收后状态进入fin_wait2</span><br><span class=\"line\">第三次挥手：服务端发送fin=1,seq=y+1,此时服务端状态进入last_ack，客户端接收后进入time_wait</span><br><span class=\"line\">第四次挥手：客户端接收到上面两个后，发送ack=y+2,服务端收到后会关闭;</span><br><span class=\"line\"></span><br><span class=\"line\">客户端time_wait状态等待timeout时间后，才会释放关闭</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>客户端与服务端同时关闭</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一次与第二次挥手同时进行</span><br><span class=\"line\">1.客户端与服务端同时发送fin,seq,ack,两者接收后，此时客户端与服务端同时进入fin_wait1,等待对方确认</span><br><span class=\"line\">2.客户端与服务端同时发送ack,两者接收后同时进入time_wait</span><br><span class=\"line\"></span><br><span class=\"line\">两者都在time_wait状态等待timeout时间后，才会释放关闭</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"Tcp学习_上","date":"2018-07-20T00:36:02.000Z","_content":"\n> 本文主要参考、copy陈皓老师的tcp那些事儿，再此谢谢陈皓老师\n\n\n### 简介\ntcp在网络OSI的七层模型中第四层--transport层，ip在第三层--network层，Arp在第二层--data link层，在第二层的数据，我们叫Frame，在第三层的数据我们叫Packet，第四层的数据叫segment\n\n### 数据流向\n数据 -> tcp(segment) -> ip(packet) -> data link(frame) \n每个层解析自己的协议，数据交给上层\n<!--more-->\n\n\n### Tcp头格式\n![tcp头部](/images/tcp/tcp-header01.png)\n\n<center>tcp头部</center>\n\n* tcp头部没有ip地址\b，那个是ip层的事，tcp包含源端口、与目标端口\n\n> 一个tcp连接需要源ip、目标ip、源端口、目标端口、\b以及协议才能表示同一个连接\n* sequence number:包序号，解决网络包乱序问题\n* acknowledgement number: 就是ack，用来确认收到消息，解决不丢包的问题\n* window ：advertised-window ，滑动窗口，解决流控\n* tcp flag：包类型，操控tcp的状态机\n\n![tcp头部其他定义](/images/tcp/tcp-header02.png)\n<center>tcp头部其他定义</center>\n\n### tcp的状态机\n网络上的传输是没有连接的，包括TCP也是一样的。而TCP所谓的“连接”，其实只不过是在通讯的双方维护一个“连接状态”，让它看上去好像有连接一样。所以，TCP的状态变换是非常重要的\n\n![tcp状态机](/images/tcp/tcp-fsm.png)\n<center>tcp状态机</center>\n\n![tcp开始关闭示意图](/images/tcp/tcp-open-close.jpg)\n<center>tcp开始关闭示意图</center>\n\n\n#### tcb\n在网络传输层，tcp模块中有一个tcb（传输控制模块，transmit control block），它用于记录tcp协议运行过程中的 变量。对于有多个连接的tcp，每个连接都有一个tcb。tcb结构的定义包括这个连接使用 的源端口、目的端口、目的ip、序号、应答序号、对方窗口大小、己方窗口大小、tcp状态、top输入/输出队列、应用层输出队列、tcp的重传有关变量。\n\n\n#### 对于建链接的3次握手\n主要是要初始化Sequence Number 的初始值。通信的双方要互相通知对方自己的初始化的Sequence Number（缩写为ISN：Inital Sequence Number）——所以叫SYN，全称Synchronize Sequence Numbers。也就上图中的 x 和 y。这个号要作为以后的数据通信的序号，以保证应用层接收到的数据不会因为网络上的传输的问题而乱序（TCP会用这个序号来拼接数据）。\n#### 对于4次挥手\n其实你仔细看是2次，因为TCP是全双工的，所以，发送方和接收方都需要Fin和Ack。只不过，有一方是被动的，所以看上去就成了所谓的4次挥手。如果两边同时断连接，那就会就进入到CLOSING状态，然后到达TIME_WAIT状态。下图是双方同时断连接的示意图（你同样可以对照着TCP状态机看）\n\n![tcp同步关闭示意图](/images/tcp/tcp-closesimul.png)\n<center>tcp同步关闭示意图</center>\n\n\n\n### tcp重传机制\n#### 超时重传机制\n不回ack，死等，当发现方发现收不到ack的超时后，会重传3，有严重的性能问题，会导致多次重传\n\n#### 快速重传机制\ntcp引入了一种叫做fast retransmit的算法，以数据为驱动，不以时间为驱动，解决了timeout的问题\n> 如果某个包没有连续到达，就ack最后那个可能被丢了的包，如果发送方连续收到三次相同的ack，就重传--好处是不用等到timeout再重传\n\n##### 问题\n如果发送发送多个对端，发现三次的ack传来，并不知道是一个对端、还是三个对端，这个时候，是重传丢失的，还是丢失后的都要传\n\n#### sack方法\nSelective Acknowledgment (SACK)，在tcp头里面加入sack的东西，ACK还是Fast Retransmit的ACK，SACK则是汇报收到的数据碎版\n这个协议需要两边都支持，因此在 Linux下，可以通过tcp_sack参数打开这个功能（Linux 2.4后默认打开\n\n![tcp-Sack](/images/tcp/tcp-sack_example.jpg)\n<center>tcp-Sack示意图</center>\n\n##### 问题\n* 问题——接收方Reneging\n所谓Reneging的意思就是接收方有权把已经报给发送端SACK里的数据给丢了。这样干是不被鼓励的，因为这个事会把问题复杂化了，但是，接收方这么做可能会有些极端情况，比如要把内存给别的更重要的东西。所以，发送方也不能完全依赖SACK，还是要依赖ACK，并维护Time-Out，如果后续的ACK没有增长，那么还是要把SACK的东西重传，另外，接收端这边永远不能把SACK的包标记为Ack。\n\n* 问题——性能问题\nSACK会消费发送方的资源，试想，如果一个攻击者给数据发送方发一堆SACK的选项，这会导致发送方开始要重传甚至遍历已经发出的数据，这会消耗很多发送端的资源。\n\n#### Duplicate SACK – 重复收到数据的问题\nLinux下的tcp_dsack参数用于开启这个功能（Linux 2.4后默认打开）\n\nD-SACK使用了SACK的第一个段来做标志，\n如果SACK的第一个段的范围被ACK所覆盖，那么就是D-SACK\n如果SACK的第一个段的范围被SACK的第二个段覆盖，那么就是D-SACK\n\n* 示例一：ACK丢包\n\n下面的示例中，丢了两个ACK，所以，发送端重传了第一个数据包（3000-3499），于是接收端发现重复收到，于是回了一个SACK=3000-3500，因为ACK都到了4000意味着收到了4000之前的所有数据，所以这个SACK就是D-SACK——旨在告诉发送端我收到了重复的数据，而且我们的发送端还知道，数据包没有丢，丢的是ACK包。\n\n```\nTransmitted  Received    ACK Sent\nSegment      Segment     (Including SACK Blocks)\n \n3000-3499    3000-3499   3500 (ACK dropped)\n3500-3999    3500-3999   4000 (ACK dropped)\n3000-3499    3000-3499   4000, SACK=3000-3500\n```\n\n\n* 示例二: 网络延误\n\n下面的示例中，网络包（1000-1499）被网络给延误了，导致发送方没有收到ACK，而后面到达的三个包触发了“Fast Retransmit算法”，所以重传，但重传时，被延误的包又到了，所以，回了一个SACK=1000-1500，因为ACK已到了3000，所以，这个SACK是D-SACK——标识收到了重复的包。\n\n这个案例下，发送端知道之前因为“Fast Retransmit算法”触发的重传不是因为发出去的包丢了，也不是因为回应的ACK包丢了，而是因为网络延时了。\n\n```\nTransmitted    Received    ACK Sent\nSegment        Segment     (Including SACK Blocks)\n \n500-999        500-999     1000\n1000-1499      (delayed)\n1500-1999      1500-1999   1000, SACK=1500-2000\n2000-2499      2000-2499   1000, SACK=1500-2500\n2500-2999      2500-2999   1000, SACK=1500-3000\n1000-1499      1000-1499   3000\n               1000-1499   3000, SACK=1000-1500\n```\n\n* 优点\n1）可以让发送方知道，是发出去的包丢了，还是回来的ACK包丢了。\n\n2）是不是自己的timeout太小了，导致重传。\n\n3）网络上出现了先发的包后到的情况（又称reordering）\n\n4）网络上是不是把我的数据包给复制了。\n\n\n\n### 名词解释\n* msl ：max segment lifetime    tpc segment在网络上的存活时间\n* isn ：init sequence number    初始化序列数字\n* time_wait: 确保有足够时间让对端收到ack，一来一回两个msl ，因此超时设置为2*msl\n* FIN ：finish 表示关闭连接\n* tcp_max_tw_buckets ： time_wait的最大数量，默认为180000\n\n\n\n### 最佳实践\n#### 处理大负载连接\n调整三个TCP参数可供你选择，第一个是：tcp_synack_retries 可以用他来减少重试次数；第二个是：tcp_max_syn_backlog，可以增大SYN连接数；第三个是：tcp_abort_on_overflow 处理不过来干脆就直接拒绝连接了。\n\ntcp_tw_reuse和tcp_tw_recycle来解决TIME_WAIT的问题是非常非常危险的，因为这两个参数违反了TCP协议\n","source":"_posts/tcp学习上-2018-07-24.md","raw":"---\ntitle: Tcp学习_上\ndate: 2018-07-20 08:36:02\ntags: tcp\ncategories: \"internet\"\n---\n\n> 本文主要参考、copy陈皓老师的tcp那些事儿，再此谢谢陈皓老师\n\n\n### 简介\ntcp在网络OSI的七层模型中第四层--transport层，ip在第三层--network层，Arp在第二层--data link层，在第二层的数据，我们叫Frame，在第三层的数据我们叫Packet，第四层的数据叫segment\n\n### 数据流向\n数据 -> tcp(segment) -> ip(packet) -> data link(frame) \n每个层解析自己的协议，数据交给上层\n<!--more-->\n\n\n### Tcp头格式\n![tcp头部](/images/tcp/tcp-header01.png)\n\n<center>tcp头部</center>\n\n* tcp头部没有ip地址\b，那个是ip层的事，tcp包含源端口、与目标端口\n\n> 一个tcp连接需要源ip、目标ip、源端口、目标端口、\b以及协议才能表示同一个连接\n* sequence number:包序号，解决网络包乱序问题\n* acknowledgement number: 就是ack，用来确认收到消息，解决不丢包的问题\n* window ：advertised-window ，滑动窗口，解决流控\n* tcp flag：包类型，操控tcp的状态机\n\n![tcp头部其他定义](/images/tcp/tcp-header02.png)\n<center>tcp头部其他定义</center>\n\n### tcp的状态机\n网络上的传输是没有连接的，包括TCP也是一样的。而TCP所谓的“连接”，其实只不过是在通讯的双方维护一个“连接状态”，让它看上去好像有连接一样。所以，TCP的状态变换是非常重要的\n\n![tcp状态机](/images/tcp/tcp-fsm.png)\n<center>tcp状态机</center>\n\n![tcp开始关闭示意图](/images/tcp/tcp-open-close.jpg)\n<center>tcp开始关闭示意图</center>\n\n\n#### tcb\n在网络传输层，tcp模块中有一个tcb（传输控制模块，transmit control block），它用于记录tcp协议运行过程中的 变量。对于有多个连接的tcp，每个连接都有一个tcb。tcb结构的定义包括这个连接使用 的源端口、目的端口、目的ip、序号、应答序号、对方窗口大小、己方窗口大小、tcp状态、top输入/输出队列、应用层输出队列、tcp的重传有关变量。\n\n\n#### 对于建链接的3次握手\n主要是要初始化Sequence Number 的初始值。通信的双方要互相通知对方自己的初始化的Sequence Number（缩写为ISN：Inital Sequence Number）——所以叫SYN，全称Synchronize Sequence Numbers。也就上图中的 x 和 y。这个号要作为以后的数据通信的序号，以保证应用层接收到的数据不会因为网络上的传输的问题而乱序（TCP会用这个序号来拼接数据）。\n#### 对于4次挥手\n其实你仔细看是2次，因为TCP是全双工的，所以，发送方和接收方都需要Fin和Ack。只不过，有一方是被动的，所以看上去就成了所谓的4次挥手。如果两边同时断连接，那就会就进入到CLOSING状态，然后到达TIME_WAIT状态。下图是双方同时断连接的示意图（你同样可以对照着TCP状态机看）\n\n![tcp同步关闭示意图](/images/tcp/tcp-closesimul.png)\n<center>tcp同步关闭示意图</center>\n\n\n\n### tcp重传机制\n#### 超时重传机制\n不回ack，死等，当发现方发现收不到ack的超时后，会重传3，有严重的性能问题，会导致多次重传\n\n#### 快速重传机制\ntcp引入了一种叫做fast retransmit的算法，以数据为驱动，不以时间为驱动，解决了timeout的问题\n> 如果某个包没有连续到达，就ack最后那个可能被丢了的包，如果发送方连续收到三次相同的ack，就重传--好处是不用等到timeout再重传\n\n##### 问题\n如果发送发送多个对端，发现三次的ack传来，并不知道是一个对端、还是三个对端，这个时候，是重传丢失的，还是丢失后的都要传\n\n#### sack方法\nSelective Acknowledgment (SACK)，在tcp头里面加入sack的东西，ACK还是Fast Retransmit的ACK，SACK则是汇报收到的数据碎版\n这个协议需要两边都支持，因此在 Linux下，可以通过tcp_sack参数打开这个功能（Linux 2.4后默认打开\n\n![tcp-Sack](/images/tcp/tcp-sack_example.jpg)\n<center>tcp-Sack示意图</center>\n\n##### 问题\n* 问题——接收方Reneging\n所谓Reneging的意思就是接收方有权把已经报给发送端SACK里的数据给丢了。这样干是不被鼓励的，因为这个事会把问题复杂化了，但是，接收方这么做可能会有些极端情况，比如要把内存给别的更重要的东西。所以，发送方也不能完全依赖SACK，还是要依赖ACK，并维护Time-Out，如果后续的ACK没有增长，那么还是要把SACK的东西重传，另外，接收端这边永远不能把SACK的包标记为Ack。\n\n* 问题——性能问题\nSACK会消费发送方的资源，试想，如果一个攻击者给数据发送方发一堆SACK的选项，这会导致发送方开始要重传甚至遍历已经发出的数据，这会消耗很多发送端的资源。\n\n#### Duplicate SACK – 重复收到数据的问题\nLinux下的tcp_dsack参数用于开启这个功能（Linux 2.4后默认打开）\n\nD-SACK使用了SACK的第一个段来做标志，\n如果SACK的第一个段的范围被ACK所覆盖，那么就是D-SACK\n如果SACK的第一个段的范围被SACK的第二个段覆盖，那么就是D-SACK\n\n* 示例一：ACK丢包\n\n下面的示例中，丢了两个ACK，所以，发送端重传了第一个数据包（3000-3499），于是接收端发现重复收到，于是回了一个SACK=3000-3500，因为ACK都到了4000意味着收到了4000之前的所有数据，所以这个SACK就是D-SACK——旨在告诉发送端我收到了重复的数据，而且我们的发送端还知道，数据包没有丢，丢的是ACK包。\n\n```\nTransmitted  Received    ACK Sent\nSegment      Segment     (Including SACK Blocks)\n \n3000-3499    3000-3499   3500 (ACK dropped)\n3500-3999    3500-3999   4000 (ACK dropped)\n3000-3499    3000-3499   4000, SACK=3000-3500\n```\n\n\n* 示例二: 网络延误\n\n下面的示例中，网络包（1000-1499）被网络给延误了，导致发送方没有收到ACK，而后面到达的三个包触发了“Fast Retransmit算法”，所以重传，但重传时，被延误的包又到了，所以，回了一个SACK=1000-1500，因为ACK已到了3000，所以，这个SACK是D-SACK——标识收到了重复的包。\n\n这个案例下，发送端知道之前因为“Fast Retransmit算法”触发的重传不是因为发出去的包丢了，也不是因为回应的ACK包丢了，而是因为网络延时了。\n\n```\nTransmitted    Received    ACK Sent\nSegment        Segment     (Including SACK Blocks)\n \n500-999        500-999     1000\n1000-1499      (delayed)\n1500-1999      1500-1999   1000, SACK=1500-2000\n2000-2499      2000-2499   1000, SACK=1500-2500\n2500-2999      2500-2999   1000, SACK=1500-3000\n1000-1499      1000-1499   3000\n               1000-1499   3000, SACK=1000-1500\n```\n\n* 优点\n1）可以让发送方知道，是发出去的包丢了，还是回来的ACK包丢了。\n\n2）是不是自己的timeout太小了，导致重传。\n\n3）网络上出现了先发的包后到的情况（又称reordering）\n\n4）网络上是不是把我的数据包给复制了。\n\n\n\n### 名词解释\n* msl ：max segment lifetime    tpc segment在网络上的存活时间\n* isn ：init sequence number    初始化序列数字\n* time_wait: 确保有足够时间让对端收到ack，一来一回两个msl ，因此超时设置为2*msl\n* FIN ：finish 表示关闭连接\n* tcp_max_tw_buckets ： time_wait的最大数量，默认为180000\n\n\n\n### 最佳实践\n#### 处理大负载连接\n调整三个TCP参数可供你选择，第一个是：tcp_synack_retries 可以用他来减少重试次数；第二个是：tcp_max_syn_backlog，可以增大SYN连接数；第三个是：tcp_abort_on_overflow 处理不过来干脆就直接拒绝连接了。\n\ntcp_tw_reuse和tcp_tw_recycle来解决TIME_WAIT的问题是非常非常危险的，因为这两个参数违反了TCP协议\n","slug":"tcp学习上-2018-07-24","published":1,"updated":"2019-09-23T06:59:13.489Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0w29rkt0020uup2sw6hqw9l","content":"<blockquote>\n<p>本文主要参考、copy陈皓老师的tcp那些事儿，再此谢谢陈皓老师</p>\n</blockquote>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>tcp在网络OSI的七层模型中第四层–transport层，ip在第三层–network层，Arp在第二层–data link层，在第二层的数据，我们叫Frame，在第三层的数据我们叫Packet，第四层的数据叫segment</p>\n<h3 id=\"数据流向\"><a href=\"#数据流向\" class=\"headerlink\" title=\"数据流向\"></a>数据流向</h3><p>数据 -&gt; tcp(segment) -&gt; ip(packet) -&gt; data link(frame)<br>每个层解析自己的协议，数据交给上层<br><a id=\"more\"></a></p>\n<h3 id=\"Tcp头格式\"><a href=\"#Tcp头格式\" class=\"headerlink\" title=\"Tcp头格式\"></a>Tcp头格式</h3><p><img src=\"/images/tcp/tcp-header01.png\" alt=\"tcp头部\"></p>\n<center>tcp头部</center>\n\n<ul>\n<li>tcp头部没有ip地址\b，那个是ip层的事，tcp包含源端口、与目标端口</li>\n</ul>\n<blockquote>\n<p>一个tcp连接需要源ip、目标ip、源端口、目标端口、\b以及协议才能表示同一个连接</p>\n<ul>\n<li>sequence number:包序号，解决网络包乱序问题</li>\n<li>acknowledgement number: 就是ack，用来确认收到消息，解决不丢包的问题</li>\n<li>window ：advertised-window ，滑动窗口，解决流控</li>\n<li>tcp flag：包类型，操控tcp的状态机</li>\n</ul>\n</blockquote>\n<p><img src=\"/images/tcp/tcp-header02.png\" alt=\"tcp头部其他定义\"></p>\n<center>tcp头部其他定义</center>\n\n<h3 id=\"tcp的状态机\"><a href=\"#tcp的状态机\" class=\"headerlink\" title=\"tcp的状态机\"></a>tcp的状态机</h3><p>网络上的传输是没有连接的，包括TCP也是一样的。而TCP所谓的“连接”，其实只不过是在通讯的双方维护一个“连接状态”，让它看上去好像有连接一样。所以，TCP的状态变换是非常重要的</p>\n<p><img src=\"/images/tcp/tcp-fsm.png\" alt=\"tcp状态机\"></p>\n<center>tcp状态机</center>\n\n<p><img src=\"/images/tcp/tcp-open-close.jpg\" alt=\"tcp开始关闭示意图\"></p>\n<center>tcp开始关闭示意图</center>\n\n\n<h4 id=\"tcb\"><a href=\"#tcb\" class=\"headerlink\" title=\"tcb\"></a>tcb</h4><p>在网络传输层，tcp模块中有一个tcb（传输控制模块，transmit control block），它用于记录tcp协议运行过程中的 变量。对于有多个连接的tcp，每个连接都有一个tcb。tcb结构的定义包括这个连接使用 的源端口、目的端口、目的ip、序号、应答序号、对方窗口大小、己方窗口大小、tcp状态、top输入/输出队列、应用层输出队列、tcp的重传有关变量。</p>\n<h4 id=\"对于建链接的3次握手\"><a href=\"#对于建链接的3次握手\" class=\"headerlink\" title=\"对于建链接的3次握手\"></a>对于建链接的3次握手</h4><p>主要是要初始化Sequence Number 的初始值。通信的双方要互相通知对方自己的初始化的Sequence Number（缩写为ISN：Inital Sequence Number）——所以叫SYN，全称Synchronize Sequence Numbers。也就上图中的 x 和 y。这个号要作为以后的数据通信的序号，以保证应用层接收到的数据不会因为网络上的传输的问题而乱序（TCP会用这个序号来拼接数据）。</p>\n<h4 id=\"对于4次挥手\"><a href=\"#对于4次挥手\" class=\"headerlink\" title=\"对于4次挥手\"></a>对于4次挥手</h4><p>其实你仔细看是2次，因为TCP是全双工的，所以，发送方和接收方都需要Fin和Ack。只不过，有一方是被动的，所以看上去就成了所谓的4次挥手。如果两边同时断连接，那就会就进入到CLOSING状态，然后到达TIME_WAIT状态。下图是双方同时断连接的示意图（你同样可以对照着TCP状态机看）</p>\n<p><img src=\"/images/tcp/tcp-closesimul.png\" alt=\"tcp同步关闭示意图\"></p>\n<center>tcp同步关闭示意图</center>\n\n\n\n<h3 id=\"tcp重传机制\"><a href=\"#tcp重传机制\" class=\"headerlink\" title=\"tcp重传机制\"></a>tcp重传机制</h3><h4 id=\"超时重传机制\"><a href=\"#超时重传机制\" class=\"headerlink\" title=\"超时重传机制\"></a>超时重传机制</h4><p>不回ack，死等，当发现方发现收不到ack的超时后，会重传3，有严重的性能问题，会导致多次重传</p>\n<h4 id=\"快速重传机制\"><a href=\"#快速重传机制\" class=\"headerlink\" title=\"快速重传机制\"></a>快速重传机制</h4><p>tcp引入了一种叫做fast retransmit的算法，以数据为驱动，不以时间为驱动，解决了timeout的问题</p>\n<blockquote>\n<p>如果某个包没有连续到达，就ack最后那个可能被丢了的包，如果发送方连续收到三次相同的ack，就重传–好处是不用等到timeout再重传</p>\n</blockquote>\n<h5 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h5><p>如果发送发送多个对端，发现三次的ack传来，并不知道是一个对端、还是三个对端，这个时候，是重传丢失的，还是丢失后的都要传</p>\n<h4 id=\"sack方法\"><a href=\"#sack方法\" class=\"headerlink\" title=\"sack方法\"></a>sack方法</h4><p>Selective Acknowledgment (SACK)，在tcp头里面加入sack的东西，ACK还是Fast Retransmit的ACK，SACK则是汇报收到的数据碎版<br>这个协议需要两边都支持，因此在 Linux下，可以通过tcp_sack参数打开这个功能（Linux 2.4后默认打开</p>\n<p><img src=\"/images/tcp/tcp-sack_example.jpg\" alt=\"tcp-Sack\"></p>\n<center>tcp-Sack示意图</center>\n\n<h5 id=\"问题-1\"><a href=\"#问题-1\" class=\"headerlink\" title=\"问题\"></a>问题</h5><ul>\n<li><p>问题——接收方Reneging<br>所谓Reneging的意思就是接收方有权把已经报给发送端SACK里的数据给丢了。这样干是不被鼓励的，因为这个事会把问题复杂化了，但是，接收方这么做可能会有些极端情况，比如要把内存给别的更重要的东西。所以，发送方也不能完全依赖SACK，还是要依赖ACK，并维护Time-Out，如果后续的ACK没有增长，那么还是要把SACK的东西重传，另外，接收端这边永远不能把SACK的包标记为Ack。</p>\n</li>\n<li><p>问题——性能问题<br>SACK会消费发送方的资源，试想，如果一个攻击者给数据发送方发一堆SACK的选项，这会导致发送方开始要重传甚至遍历已经发出的数据，这会消耗很多发送端的资源。</p>\n</li>\n</ul>\n<h4 id=\"Duplicate-SACK-–-重复收到数据的问题\"><a href=\"#Duplicate-SACK-–-重复收到数据的问题\" class=\"headerlink\" title=\"Duplicate SACK – 重复收到数据的问题\"></a>Duplicate SACK – 重复收到数据的问题</h4><p>Linux下的tcp_dsack参数用于开启这个功能（Linux 2.4后默认打开）</p>\n<p>D-SACK使用了SACK的第一个段来做标志，<br>如果SACK的第一个段的范围被ACK所覆盖，那么就是D-SACK<br>如果SACK的第一个段的范围被SACK的第二个段覆盖，那么就是D-SACK</p>\n<ul>\n<li>示例一：ACK丢包</li>\n</ul>\n<p>下面的示例中，丢了两个ACK，所以，发送端重传了第一个数据包（3000-3499），于是接收端发现重复收到，于是回了一个SACK=3000-3500，因为ACK都到了4000意味着收到了4000之前的所有数据，所以这个SACK就是D-SACK——旨在告诉发送端我收到了重复的数据，而且我们的发送端还知道，数据包没有丢，丢的是ACK包。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Transmitted  Received    ACK Sent</span><br><span class=\"line\">Segment      Segment     (Including SACK Blocks)</span><br><span class=\"line\"> </span><br><span class=\"line\">3000-3499    3000-3499   3500 (ACK dropped)</span><br><span class=\"line\">3500-3999    3500-3999   4000 (ACK dropped)</span><br><span class=\"line\">3000-3499    3000-3499   4000, SACK=3000-3500</span><br></pre></td></tr></table></figure>\n<ul>\n<li>示例二: 网络延误</li>\n</ul>\n<p>下面的示例中，网络包（1000-1499）被网络给延误了，导致发送方没有收到ACK，而后面到达的三个包触发了“Fast Retransmit算法”，所以重传，但重传时，被延误的包又到了，所以，回了一个SACK=1000-1500，因为ACK已到了3000，所以，这个SACK是D-SACK——标识收到了重复的包。</p>\n<p>这个案例下，发送端知道之前因为“Fast Retransmit算法”触发的重传不是因为发出去的包丢了，也不是因为回应的ACK包丢了，而是因为网络延时了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Transmitted    Received    ACK Sent</span><br><span class=\"line\">Segment        Segment     (Including SACK Blocks)</span><br><span class=\"line\"> </span><br><span class=\"line\">500-999        500-999     1000</span><br><span class=\"line\">1000-1499      (delayed)</span><br><span class=\"line\">1500-1999      1500-1999   1000, SACK=1500-2000</span><br><span class=\"line\">2000-2499      2000-2499   1000, SACK=1500-2500</span><br><span class=\"line\">2500-2999      2500-2999   1000, SACK=1500-3000</span><br><span class=\"line\">1000-1499      1000-1499   3000</span><br><span class=\"line\">               1000-1499   3000, SACK=1000-1500</span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点<br>1）可以让发送方知道，是发出去的包丢了，还是回来的ACK包丢了。</li>\n</ul>\n<p>2）是不是自己的timeout太小了，导致重传。</p>\n<p>3）网络上出现了先发的包后到的情况（又称reordering）</p>\n<p>4）网络上是不是把我的数据包给复制了。</p>\n<h3 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h3><ul>\n<li>msl ：max segment lifetime    tpc segment在网络上的存活时间</li>\n<li>isn ：init sequence number    初始化序列数字</li>\n<li>time_wait: 确保有足够时间让对端收到ack，一来一回两个msl ，因此超时设置为2*msl</li>\n<li>FIN ：finish 表示关闭连接</li>\n<li>tcp_max_tw_buckets ： time_wait的最大数量，默认为180000</li>\n</ul>\n<h3 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h3><h4 id=\"处理大负载连接\"><a href=\"#处理大负载连接\" class=\"headerlink\" title=\"处理大负载连接\"></a>处理大负载连接</h4><p>调整三个TCP参数可供你选择，第一个是：tcp_synack_retries 可以用他来减少重试次数；第二个是：tcp_max_syn_backlog，可以增大SYN连接数；第三个是：tcp_abort_on_overflow 处理不过来干脆就直接拒绝连接了。</p>\n<p>tcp_tw_reuse和tcp_tw_recycle来解决TIME_WAIT的问题是非常非常危险的，因为这两个参数违反了TCP协议</p>\n","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"<blockquote>\n<p>本文主要参考、copy陈皓老师的tcp那些事儿，再此谢谢陈皓老师</p>\n</blockquote>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>tcp在网络OSI的七层模型中第四层–transport层，ip在第三层–network层，Arp在第二层–data link层，在第二层的数据，我们叫Frame，在第三层的数据我们叫Packet，第四层的数据叫segment</p>\n<h3 id=\"数据流向\"><a href=\"#数据流向\" class=\"headerlink\" title=\"数据流向\"></a>数据流向</h3><p>数据 -&gt; tcp(segment) -&gt; ip(packet) -&gt; data link(frame)<br>每个层解析自己的协议，数据交给上层<br>","more":"</p>\n<h3 id=\"Tcp头格式\"><a href=\"#Tcp头格式\" class=\"headerlink\" title=\"Tcp头格式\"></a>Tcp头格式</h3><p><img src=\"/images/tcp/tcp-header01.png\" alt=\"tcp头部\"></p>\n<center>tcp头部</center>\n\n<ul>\n<li>tcp头部没有ip地址\b，那个是ip层的事，tcp包含源端口、与目标端口</li>\n</ul>\n<blockquote>\n<p>一个tcp连接需要源ip、目标ip、源端口、目标端口、\b以及协议才能表示同一个连接</p>\n<ul>\n<li>sequence number:包序号，解决网络包乱序问题</li>\n<li>acknowledgement number: 就是ack，用来确认收到消息，解决不丢包的问题</li>\n<li>window ：advertised-window ，滑动窗口，解决流控</li>\n<li>tcp flag：包类型，操控tcp的状态机</li>\n</ul>\n</blockquote>\n<p><img src=\"/images/tcp/tcp-header02.png\" alt=\"tcp头部其他定义\"></p>\n<center>tcp头部其他定义</center>\n\n<h3 id=\"tcp的状态机\"><a href=\"#tcp的状态机\" class=\"headerlink\" title=\"tcp的状态机\"></a>tcp的状态机</h3><p>网络上的传输是没有连接的，包括TCP也是一样的。而TCP所谓的“连接”，其实只不过是在通讯的双方维护一个“连接状态”，让它看上去好像有连接一样。所以，TCP的状态变换是非常重要的</p>\n<p><img src=\"/images/tcp/tcp-fsm.png\" alt=\"tcp状态机\"></p>\n<center>tcp状态机</center>\n\n<p><img src=\"/images/tcp/tcp-open-close.jpg\" alt=\"tcp开始关闭示意图\"></p>\n<center>tcp开始关闭示意图</center>\n\n\n<h4 id=\"tcb\"><a href=\"#tcb\" class=\"headerlink\" title=\"tcb\"></a>tcb</h4><p>在网络传输层，tcp模块中有一个tcb（传输控制模块，transmit control block），它用于记录tcp协议运行过程中的 变量。对于有多个连接的tcp，每个连接都有一个tcb。tcb结构的定义包括这个连接使用 的源端口、目的端口、目的ip、序号、应答序号、对方窗口大小、己方窗口大小、tcp状态、top输入/输出队列、应用层输出队列、tcp的重传有关变量。</p>\n<h4 id=\"对于建链接的3次握手\"><a href=\"#对于建链接的3次握手\" class=\"headerlink\" title=\"对于建链接的3次握手\"></a>对于建链接的3次握手</h4><p>主要是要初始化Sequence Number 的初始值。通信的双方要互相通知对方自己的初始化的Sequence Number（缩写为ISN：Inital Sequence Number）——所以叫SYN，全称Synchronize Sequence Numbers。也就上图中的 x 和 y。这个号要作为以后的数据通信的序号，以保证应用层接收到的数据不会因为网络上的传输的问题而乱序（TCP会用这个序号来拼接数据）。</p>\n<h4 id=\"对于4次挥手\"><a href=\"#对于4次挥手\" class=\"headerlink\" title=\"对于4次挥手\"></a>对于4次挥手</h4><p>其实你仔细看是2次，因为TCP是全双工的，所以，发送方和接收方都需要Fin和Ack。只不过，有一方是被动的，所以看上去就成了所谓的4次挥手。如果两边同时断连接，那就会就进入到CLOSING状态，然后到达TIME_WAIT状态。下图是双方同时断连接的示意图（你同样可以对照着TCP状态机看）</p>\n<p><img src=\"/images/tcp/tcp-closesimul.png\" alt=\"tcp同步关闭示意图\"></p>\n<center>tcp同步关闭示意图</center>\n\n\n\n<h3 id=\"tcp重传机制\"><a href=\"#tcp重传机制\" class=\"headerlink\" title=\"tcp重传机制\"></a>tcp重传机制</h3><h4 id=\"超时重传机制\"><a href=\"#超时重传机制\" class=\"headerlink\" title=\"超时重传机制\"></a>超时重传机制</h4><p>不回ack，死等，当发现方发现收不到ack的超时后，会重传3，有严重的性能问题，会导致多次重传</p>\n<h4 id=\"快速重传机制\"><a href=\"#快速重传机制\" class=\"headerlink\" title=\"快速重传机制\"></a>快速重传机制</h4><p>tcp引入了一种叫做fast retransmit的算法，以数据为驱动，不以时间为驱动，解决了timeout的问题</p>\n<blockquote>\n<p>如果某个包没有连续到达，就ack最后那个可能被丢了的包，如果发送方连续收到三次相同的ack，就重传–好处是不用等到timeout再重传</p>\n</blockquote>\n<h5 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h5><p>如果发送发送多个对端，发现三次的ack传来，并不知道是一个对端、还是三个对端，这个时候，是重传丢失的，还是丢失后的都要传</p>\n<h4 id=\"sack方法\"><a href=\"#sack方法\" class=\"headerlink\" title=\"sack方法\"></a>sack方法</h4><p>Selective Acknowledgment (SACK)，在tcp头里面加入sack的东西，ACK还是Fast Retransmit的ACK，SACK则是汇报收到的数据碎版<br>这个协议需要两边都支持，因此在 Linux下，可以通过tcp_sack参数打开这个功能（Linux 2.4后默认打开</p>\n<p><img src=\"/images/tcp/tcp-sack_example.jpg\" alt=\"tcp-Sack\"></p>\n<center>tcp-Sack示意图</center>\n\n<h5 id=\"问题-1\"><a href=\"#问题-1\" class=\"headerlink\" title=\"问题\"></a>问题</h5><ul>\n<li><p>问题——接收方Reneging<br>所谓Reneging的意思就是接收方有权把已经报给发送端SACK里的数据给丢了。这样干是不被鼓励的，因为这个事会把问题复杂化了，但是，接收方这么做可能会有些极端情况，比如要把内存给别的更重要的东西。所以，发送方也不能完全依赖SACK，还是要依赖ACK，并维护Time-Out，如果后续的ACK没有增长，那么还是要把SACK的东西重传，另外，接收端这边永远不能把SACK的包标记为Ack。</p>\n</li>\n<li><p>问题——性能问题<br>SACK会消费发送方的资源，试想，如果一个攻击者给数据发送方发一堆SACK的选项，这会导致发送方开始要重传甚至遍历已经发出的数据，这会消耗很多发送端的资源。</p>\n</li>\n</ul>\n<h4 id=\"Duplicate-SACK-–-重复收到数据的问题\"><a href=\"#Duplicate-SACK-–-重复收到数据的问题\" class=\"headerlink\" title=\"Duplicate SACK – 重复收到数据的问题\"></a>Duplicate SACK – 重复收到数据的问题</h4><p>Linux下的tcp_dsack参数用于开启这个功能（Linux 2.4后默认打开）</p>\n<p>D-SACK使用了SACK的第一个段来做标志，<br>如果SACK的第一个段的范围被ACK所覆盖，那么就是D-SACK<br>如果SACK的第一个段的范围被SACK的第二个段覆盖，那么就是D-SACK</p>\n<ul>\n<li>示例一：ACK丢包</li>\n</ul>\n<p>下面的示例中，丢了两个ACK，所以，发送端重传了第一个数据包（3000-3499），于是接收端发现重复收到，于是回了一个SACK=3000-3500，因为ACK都到了4000意味着收到了4000之前的所有数据，所以这个SACK就是D-SACK——旨在告诉发送端我收到了重复的数据，而且我们的发送端还知道，数据包没有丢，丢的是ACK包。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Transmitted  Received    ACK Sent</span><br><span class=\"line\">Segment      Segment     (Including SACK Blocks)</span><br><span class=\"line\"> </span><br><span class=\"line\">3000-3499    3000-3499   3500 (ACK dropped)</span><br><span class=\"line\">3500-3999    3500-3999   4000 (ACK dropped)</span><br><span class=\"line\">3000-3499    3000-3499   4000, SACK=3000-3500</span><br></pre></td></tr></table></figure>\n<ul>\n<li>示例二: 网络延误</li>\n</ul>\n<p>下面的示例中，网络包（1000-1499）被网络给延误了，导致发送方没有收到ACK，而后面到达的三个包触发了“Fast Retransmit算法”，所以重传，但重传时，被延误的包又到了，所以，回了一个SACK=1000-1500，因为ACK已到了3000，所以，这个SACK是D-SACK——标识收到了重复的包。</p>\n<p>这个案例下，发送端知道之前因为“Fast Retransmit算法”触发的重传不是因为发出去的包丢了，也不是因为回应的ACK包丢了，而是因为网络延时了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Transmitted    Received    ACK Sent</span><br><span class=\"line\">Segment        Segment     (Including SACK Blocks)</span><br><span class=\"line\"> </span><br><span class=\"line\">500-999        500-999     1000</span><br><span class=\"line\">1000-1499      (delayed)</span><br><span class=\"line\">1500-1999      1500-1999   1000, SACK=1500-2000</span><br><span class=\"line\">2000-2499      2000-2499   1000, SACK=1500-2500</span><br><span class=\"line\">2500-2999      2500-2999   1000, SACK=1500-3000</span><br><span class=\"line\">1000-1499      1000-1499   3000</span><br><span class=\"line\">               1000-1499   3000, SACK=1000-1500</span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点<br>1）可以让发送方知道，是发出去的包丢了，还是回来的ACK包丢了。</li>\n</ul>\n<p>2）是不是自己的timeout太小了，导致重传。</p>\n<p>3）网络上出现了先发的包后到的情况（又称reordering）</p>\n<p>4）网络上是不是把我的数据包给复制了。</p>\n<h3 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h3><ul>\n<li>msl ：max segment lifetime    tpc segment在网络上的存活时间</li>\n<li>isn ：init sequence number    初始化序列数字</li>\n<li>time_wait: 确保有足够时间让对端收到ack，一来一回两个msl ，因此超时设置为2*msl</li>\n<li>FIN ：finish 表示关闭连接</li>\n<li>tcp_max_tw_buckets ： time_wait的最大数量，默认为180000</li>\n</ul>\n<h3 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h3><h4 id=\"处理大负载连接\"><a href=\"#处理大负载连接\" class=\"headerlink\" title=\"处理大负载连接\"></a>处理大负载连接</h4><p>调整三个TCP参数可供你选择，第一个是：tcp_synack_retries 可以用他来减少重试次数；第二个是：tcp_max_syn_backlog，可以增大SYN连接数；第三个是：tcp_abort_on_overflow 处理不过来干脆就直接拒绝连接了。</p>\n<p>tcp_tw_reuse和tcp_tw_recycle来解决TIME_WAIT的问题是非常非常危险的，因为这两个参数违反了TCP协议</p>"},{"title":"Tcp学习-下","date":"2018-07-25T00:36:02.000Z","_content":"\n\n### 简介\ntcp要解决一个很大的事情，就是要在一个网络根据不同的情况来动态调整自己的发包速度---小则让自己更稳定，大则让整个网络更稳定\n\n\n### tcp的rtt算法\ntimeout 太大->重发慢->丢了半天重发-> 没效率->性能差\n\ntimeout 太小->可能没有丢就重发->重发就快、增加网络拥堵，导致更多超时 (恶性循环导致更多重发)\n\n* RTT：round trip time 就是一个数据包从发出去到回来的时间。这样发送端就可以设置RTO\n* RTO：retransmission timeout 重传超时\n* SRTT：smoothed RTT 平滑RTT\n<!--more-->\n\n\n### tcp滑动窗口\ntcp必须解决的可靠传输以及包乱序问题，所以tcp必须知道网络实际的数据处理带宽或者数据处理的速度，这样才不会引起网络拥塞，导致丢包\n\n所以tcp，引入了一些技术做网络流控，sliding window是其中的一个技术，tcp里面有一个字段叫做window，又叫Advertised-window,这个字段是接收端告诉发送端自己还有多少缓冲区可以接收数据。于是发送端就可以根据这个接收端的处理能力发送数据，而不会导致接收端处理不过来。\n\n#### Zero Window\n接收端可能没有多余的窗口了，那么当恢复到足够的窗口大小时，怎么通知发送端呢？ \n\n解决这个问题使用了Zero Window Probe，缩写为zwp，也就是说，发送端在窗口的值变成0后，会发zwp的包给接收方，让接收方来ack他的window，一般这个值会设置3次，第三次大约30-60s，如果3次过后还是0的话，tcp就会发RST把连接断掉\n\n#### Silly Window Syndrome\n糊涂窗口综合征，接收方太忙了，来不及取走Receive window里的数据，那么，会导致发送方越来越小，到最后，如果接收方有几个字节并告诉发送方，那么发送方会义无反顾发送几个字节。\n\n* MTU：以太网 MTU是1500字节，出去TCP+IP头的40个字节，真正的数据传输为1460，这就是MSS，Maximum Transmission Unit，MTU\n* MSS：max segment size 最大tcp包大小\n\n\n\n### TCP的拥塞处理 – Congestion Handling\nTCP不是一个自私的协议，当拥塞发生的时候，要做自我牺牲。就像交通阻塞一样，每个车都应该把路让出来，而不要再去抢路了\n\n拥塞处理的四种算法：\n\n1）慢启动，2）拥塞避免，3）拥塞发生，4）快速恢复\n\n首先，我们来看一下TCP的慢热启动。慢启动的意思是，刚刚加入网络的连接，一点一点地提速，不要一上来就像那些特权车一样霸道地把路占满。新同学上高速还是要慢一点，不要把已经在高速上的秩序给搞乱了。\n\n#### 慢启动的算法如下(cwnd全称Congestion Window)：\n\n1）连接建好的开始先初始化cwnd = 1，表明可以传一个MSS大小的数据。\n\n2）每当收到一个ACK，cwnd++; 呈线性上升\n\n3）每当过了一个RTT，cwnd = cwnd*2; 呈指数让升\n\n4）还有一个ssthresh（slow start threshold），是一个上限，当cwnd >= ssthresh时，就会进入“拥塞避免算法”（后面会说这个算法）\n\n所以，我们可以看到，如果网速很快的话，ACK也会返回得快，RTT也会短，那么，这个慢启动就一点也不慢。下图说明了这个过程。\n\n\n\n#### 拥塞避免算法 – Congestion Avoidance\n前面说过，还有一个ssthresh（slow start threshold），是一个上限，当cwnd >= ssthresh时，就会进入“拥塞避免算法”。一般来说ssthresh的值是65535，单位是字节，当cwnd达到这个值时后，算法如下：\n\n1）收到一个ACK时，cwnd = cwnd + 1/cwnd\n\n2）当每过一个RTT时，cwnd = cwnd + 1\n\n这样就可以避免增长过快导致网络拥塞，慢慢的增加调整到网络的最佳值。很明显，是一个线性上升的算法。\n\n\n前面我们说过，当丢包的时候，会有两种情况：\n\n1）等到RTO超时，重传数据包。TCP认为这种情况太糟糕，反应也很强烈。\n```\nsshthresh =  cwnd /2\ncwnd 重置为 1\n进入慢启动过程\n2）Fast Retransmit算法，也就是在收到3个duplicate ACK时就开启重传，而不用等到RTO超时。\n\nTCP Tahoe的实现和RTO超时一样。\nTCP Reno的实现是：\ncwnd = cwnd /2\nsshthresh = cwnd\n进入快速恢复算法——Fast Recovery\n上面我们可以看到RTO超时后，sshthresh会变成cwnd的一半，这意味着，如果cwnd<=sshthresh时出现的丢包，那么TCP的sshthresh就会减了一半，然后等cwnd又很快地以指数级增涨爬到这个地方时，就会成慢慢的线性增涨。我们可以看到，TCP是怎么通过这种强烈地震荡快速而小心得找到网站流量的平衡点的。\n```\n\n#### 快速恢复算法 – Fast Recovery\nTCP Reno\n\n这个算法定义在RFC5681。快速重传和快速恢复算法一般同时使用。快速恢复算法是认为，你还有3个Duplicated Acks说明网络也不那么糟糕，所以没有必要像RTO超时那么强烈。 注意，正如前面所说，进入Fast Recovery之前，cwnd 和 sshthresh已被更新：\n```\ncwnd = cwnd /2\nsshthresh = cwnd\n然后，真正的Fast Recovery算法如下：\n\ncwnd = sshthresh  + 3 * MSS （3的意思是确认有3个数据包被收到了）\n重传Duplicated ACKs指定的数据包\n如果再收到 duplicated Acks，那么cwnd = cwnd +1\n如果收到了新的Ack，那么，cwnd = sshthresh ，然后就进入了拥塞避免的算法了。\n如果你仔细思考一下上面的这个算法，你就会知道，上面这个算法也有问题，那就是——它依赖于3个重复的Acks。注意，3个重复的Acks并不代表只丢了一个数据包，很有可能是丢了好多包。但这个算法只会重传一个，而剩下的那些包只能等到RTO超时，于是，进入了恶梦模式——超时一个窗口就减半一下，多个超时会超成TCP的传输速度呈级数下降，而且也不会触发Fast Recovery算法了。\n\n通常来说，正如我们前面所说的，SACK或D-SACK的方法可以让Fast Recovery或Sender在做决定时更聪明一些，但是并不是所有的TCP的实现都支持SACK（SACK需要两端都支持），所以，需要一个没有SACK的解决方案。而通过SACK进行拥塞控制的算法是FACK（后面会讲）\n```\n","source":"_posts/tcp学习下-2018-07-26.md","raw":"---\ntitle: Tcp学习-下\ndate: 2018-07-25 08:36:02\ntags: tcp\ncategories: [\"internet\",\"tcp\"]\n---\n\n\n### 简介\ntcp要解决一个很大的事情，就是要在一个网络根据不同的情况来动态调整自己的发包速度---小则让自己更稳定，大则让整个网络更稳定\n\n\n### tcp的rtt算法\ntimeout 太大->重发慢->丢了半天重发-> 没效率->性能差\n\ntimeout 太小->可能没有丢就重发->重发就快、增加网络拥堵，导致更多超时 (恶性循环导致更多重发)\n\n* RTT：round trip time 就是一个数据包从发出去到回来的时间。这样发送端就可以设置RTO\n* RTO：retransmission timeout 重传超时\n* SRTT：smoothed RTT 平滑RTT\n<!--more-->\n\n\n### tcp滑动窗口\ntcp必须解决的可靠传输以及包乱序问题，所以tcp必须知道网络实际的数据处理带宽或者数据处理的速度，这样才不会引起网络拥塞，导致丢包\n\n所以tcp，引入了一些技术做网络流控，sliding window是其中的一个技术，tcp里面有一个字段叫做window，又叫Advertised-window,这个字段是接收端告诉发送端自己还有多少缓冲区可以接收数据。于是发送端就可以根据这个接收端的处理能力发送数据，而不会导致接收端处理不过来。\n\n#### Zero Window\n接收端可能没有多余的窗口了，那么当恢复到足够的窗口大小时，怎么通知发送端呢？ \n\n解决这个问题使用了Zero Window Probe，缩写为zwp，也就是说，发送端在窗口的值变成0后，会发zwp的包给接收方，让接收方来ack他的window，一般这个值会设置3次，第三次大约30-60s，如果3次过后还是0的话，tcp就会发RST把连接断掉\n\n#### Silly Window Syndrome\n糊涂窗口综合征，接收方太忙了，来不及取走Receive window里的数据，那么，会导致发送方越来越小，到最后，如果接收方有几个字节并告诉发送方，那么发送方会义无反顾发送几个字节。\n\n* MTU：以太网 MTU是1500字节，出去TCP+IP头的40个字节，真正的数据传输为1460，这就是MSS，Maximum Transmission Unit，MTU\n* MSS：max segment size 最大tcp包大小\n\n\n\n### TCP的拥塞处理 – Congestion Handling\nTCP不是一个自私的协议，当拥塞发生的时候，要做自我牺牲。就像交通阻塞一样，每个车都应该把路让出来，而不要再去抢路了\n\n拥塞处理的四种算法：\n\n1）慢启动，2）拥塞避免，3）拥塞发生，4）快速恢复\n\n首先，我们来看一下TCP的慢热启动。慢启动的意思是，刚刚加入网络的连接，一点一点地提速，不要一上来就像那些特权车一样霸道地把路占满。新同学上高速还是要慢一点，不要把已经在高速上的秩序给搞乱了。\n\n#### 慢启动的算法如下(cwnd全称Congestion Window)：\n\n1）连接建好的开始先初始化cwnd = 1，表明可以传一个MSS大小的数据。\n\n2）每当收到一个ACK，cwnd++; 呈线性上升\n\n3）每当过了一个RTT，cwnd = cwnd*2; 呈指数让升\n\n4）还有一个ssthresh（slow start threshold），是一个上限，当cwnd >= ssthresh时，就会进入“拥塞避免算法”（后面会说这个算法）\n\n所以，我们可以看到，如果网速很快的话，ACK也会返回得快，RTT也会短，那么，这个慢启动就一点也不慢。下图说明了这个过程。\n\n\n\n#### 拥塞避免算法 – Congestion Avoidance\n前面说过，还有一个ssthresh（slow start threshold），是一个上限，当cwnd >= ssthresh时，就会进入“拥塞避免算法”。一般来说ssthresh的值是65535，单位是字节，当cwnd达到这个值时后，算法如下：\n\n1）收到一个ACK时，cwnd = cwnd + 1/cwnd\n\n2）当每过一个RTT时，cwnd = cwnd + 1\n\n这样就可以避免增长过快导致网络拥塞，慢慢的增加调整到网络的最佳值。很明显，是一个线性上升的算法。\n\n\n前面我们说过，当丢包的时候，会有两种情况：\n\n1）等到RTO超时，重传数据包。TCP认为这种情况太糟糕，反应也很强烈。\n```\nsshthresh =  cwnd /2\ncwnd 重置为 1\n进入慢启动过程\n2）Fast Retransmit算法，也就是在收到3个duplicate ACK时就开启重传，而不用等到RTO超时。\n\nTCP Tahoe的实现和RTO超时一样。\nTCP Reno的实现是：\ncwnd = cwnd /2\nsshthresh = cwnd\n进入快速恢复算法——Fast Recovery\n上面我们可以看到RTO超时后，sshthresh会变成cwnd的一半，这意味着，如果cwnd<=sshthresh时出现的丢包，那么TCP的sshthresh就会减了一半，然后等cwnd又很快地以指数级增涨爬到这个地方时，就会成慢慢的线性增涨。我们可以看到，TCP是怎么通过这种强烈地震荡快速而小心得找到网站流量的平衡点的。\n```\n\n#### 快速恢复算法 – Fast Recovery\nTCP Reno\n\n这个算法定义在RFC5681。快速重传和快速恢复算法一般同时使用。快速恢复算法是认为，你还有3个Duplicated Acks说明网络也不那么糟糕，所以没有必要像RTO超时那么强烈。 注意，正如前面所说，进入Fast Recovery之前，cwnd 和 sshthresh已被更新：\n```\ncwnd = cwnd /2\nsshthresh = cwnd\n然后，真正的Fast Recovery算法如下：\n\ncwnd = sshthresh  + 3 * MSS （3的意思是确认有3个数据包被收到了）\n重传Duplicated ACKs指定的数据包\n如果再收到 duplicated Acks，那么cwnd = cwnd +1\n如果收到了新的Ack，那么，cwnd = sshthresh ，然后就进入了拥塞避免的算法了。\n如果你仔细思考一下上面的这个算法，你就会知道，上面这个算法也有问题，那就是——它依赖于3个重复的Acks。注意，3个重复的Acks并不代表只丢了一个数据包，很有可能是丢了好多包。但这个算法只会重传一个，而剩下的那些包只能等到RTO超时，于是，进入了恶梦模式——超时一个窗口就减半一下，多个超时会超成TCP的传输速度呈级数下降，而且也不会触发Fast Recovery算法了。\n\n通常来说，正如我们前面所说的，SACK或D-SACK的方法可以让Fast Recovery或Sender在做决定时更聪明一些，但是并不是所有的TCP的实现都支持SACK（SACK需要两端都支持），所以，需要一个没有SACK的解决方案。而通过SACK进行拥塞控制的算法是FACK（后面会讲）\n```\n","slug":"tcp学习下-2018-07-26","published":1,"updated":"2019-09-23T06:59:11.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0w29rku0022uup2ll21gehz","content":"<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>tcp要解决一个很大的事情，就是要在一个网络根据不同的情况来动态调整自己的发包速度—小则让自己更稳定，大则让整个网络更稳定</p>\n<h3 id=\"tcp的rtt算法\"><a href=\"#tcp的rtt算法\" class=\"headerlink\" title=\"tcp的rtt算法\"></a>tcp的rtt算法</h3><p>timeout 太大-&gt;重发慢-&gt;丢了半天重发-&gt; 没效率-&gt;性能差</p>\n<p>timeout 太小-&gt;可能没有丢就重发-&gt;重发就快、增加网络拥堵，导致更多超时 (恶性循环导致更多重发)</p>\n<ul>\n<li>RTT：round trip time 就是一个数据包从发出去到回来的时间。这样发送端就可以设置RTO</li>\n<li>RTO：retransmission timeout 重传超时</li>\n<li>SRTT：smoothed RTT 平滑RTT<a id=\"more\"></a>\n</li>\n</ul>\n<h3 id=\"tcp滑动窗口\"><a href=\"#tcp滑动窗口\" class=\"headerlink\" title=\"tcp滑动窗口\"></a>tcp滑动窗口</h3><p>tcp必须解决的可靠传输以及包乱序问题，所以tcp必须知道网络实际的数据处理带宽或者数据处理的速度，这样才不会引起网络拥塞，导致丢包</p>\n<p>所以tcp，引入了一些技术做网络流控，sliding window是其中的一个技术，tcp里面有一个字段叫做window，又叫Advertised-window,这个字段是接收端告诉发送端自己还有多少缓冲区可以接收数据。于是发送端就可以根据这个接收端的处理能力发送数据，而不会导致接收端处理不过来。</p>\n<h4 id=\"Zero-Window\"><a href=\"#Zero-Window\" class=\"headerlink\" title=\"Zero Window\"></a>Zero Window</h4><p>接收端可能没有多余的窗口了，那么当恢复到足够的窗口大小时，怎么通知发送端呢？ </p>\n<p>解决这个问题使用了Zero Window Probe，缩写为zwp，也就是说，发送端在窗口的值变成0后，会发zwp的包给接收方，让接收方来ack他的window，一般这个值会设置3次，第三次大约30-60s，如果3次过后还是0的话，tcp就会发RST把连接断掉</p>\n<h4 id=\"Silly-Window-Syndrome\"><a href=\"#Silly-Window-Syndrome\" class=\"headerlink\" title=\"Silly Window Syndrome\"></a>Silly Window Syndrome</h4><p>糊涂窗口综合征，接收方太忙了，来不及取走Receive window里的数据，那么，会导致发送方越来越小，到最后，如果接收方有几个字节并告诉发送方，那么发送方会义无反顾发送几个字节。</p>\n<ul>\n<li>MTU：以太网 MTU是1500字节，出去TCP+IP头的40个字节，真正的数据传输为1460，这就是MSS，Maximum Transmission Unit，MTU</li>\n<li>MSS：max segment size 最大tcp包大小</li>\n</ul>\n<h3 id=\"TCP的拥塞处理-–-Congestion-Handling\"><a href=\"#TCP的拥塞处理-–-Congestion-Handling\" class=\"headerlink\" title=\"TCP的拥塞处理 – Congestion Handling\"></a>TCP的拥塞处理 – Congestion Handling</h3><p>TCP不是一个自私的协议，当拥塞发生的时候，要做自我牺牲。就像交通阻塞一样，每个车都应该把路让出来，而不要再去抢路了</p>\n<p>拥塞处理的四种算法：</p>\n<p>1）慢启动，2）拥塞避免，3）拥塞发生，4）快速恢复</p>\n<p>首先，我们来看一下TCP的慢热启动。慢启动的意思是，刚刚加入网络的连接，一点一点地提速，不要一上来就像那些特权车一样霸道地把路占满。新同学上高速还是要慢一点，不要把已经在高速上的秩序给搞乱了。</p>\n<h4 id=\"慢启动的算法如下-cwnd全称Congestion-Window-：\"><a href=\"#慢启动的算法如下-cwnd全称Congestion-Window-：\" class=\"headerlink\" title=\"慢启动的算法如下(cwnd全称Congestion Window)：\"></a>慢启动的算法如下(cwnd全称Congestion Window)：</h4><p>1）连接建好的开始先初始化cwnd = 1，表明可以传一个MSS大小的数据。</p>\n<p>2）每当收到一个ACK，cwnd++; 呈线性上升</p>\n<p>3）每当过了一个RTT，cwnd = cwnd*2; 呈指数让升</p>\n<p>4）还有一个ssthresh（slow start threshold），是一个上限，当cwnd &gt;= ssthresh时，就会进入“拥塞避免算法”（后面会说这个算法）</p>\n<p>所以，我们可以看到，如果网速很快的话，ACK也会返回得快，RTT也会短，那么，这个慢启动就一点也不慢。下图说明了这个过程。</p>\n<h4 id=\"拥塞避免算法-–-Congestion-Avoidance\"><a href=\"#拥塞避免算法-–-Congestion-Avoidance\" class=\"headerlink\" title=\"拥塞避免算法 – Congestion Avoidance\"></a>拥塞避免算法 – Congestion Avoidance</h4><p>前面说过，还有一个ssthresh（slow start threshold），是一个上限，当cwnd &gt;= ssthresh时，就会进入“拥塞避免算法”。一般来说ssthresh的值是65535，单位是字节，当cwnd达到这个值时后，算法如下：</p>\n<p>1）收到一个ACK时，cwnd = cwnd + 1/cwnd</p>\n<p>2）当每过一个RTT时，cwnd = cwnd + 1</p>\n<p>这样就可以避免增长过快导致网络拥塞，慢慢的增加调整到网络的最佳值。很明显，是一个线性上升的算法。</p>\n<p>前面我们说过，当丢包的时候，会有两种情况：</p>\n<p>1）等到RTO超时，重传数据包。TCP认为这种情况太糟糕，反应也很强烈。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sshthresh =  cwnd /2</span><br><span class=\"line\">cwnd 重置为 1</span><br><span class=\"line\">进入慢启动过程</span><br><span class=\"line\">2）Fast Retransmit算法，也就是在收到3个duplicate ACK时就开启重传，而不用等到RTO超时。</span><br><span class=\"line\"></span><br><span class=\"line\">TCP Tahoe的实现和RTO超时一样。</span><br><span class=\"line\">TCP Reno的实现是：</span><br><span class=\"line\">cwnd = cwnd /2</span><br><span class=\"line\">sshthresh = cwnd</span><br><span class=\"line\">进入快速恢复算法——Fast Recovery</span><br><span class=\"line\">上面我们可以看到RTO超时后，sshthresh会变成cwnd的一半，这意味着，如果cwnd&lt;=sshthresh时出现的丢包，那么TCP的sshthresh就会减了一半，然后等cwnd又很快地以指数级增涨爬到这个地方时，就会成慢慢的线性增涨。我们可以看到，TCP是怎么通过这种强烈地震荡快速而小心得找到网站流量的平衡点的。</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"快速恢复算法-–-Fast-Recovery\"><a href=\"#快速恢复算法-–-Fast-Recovery\" class=\"headerlink\" title=\"快速恢复算法 – Fast Recovery\"></a>快速恢复算法 – Fast Recovery</h4><p>TCP Reno</p>\n<p>这个算法定义在RFC5681。快速重传和快速恢复算法一般同时使用。快速恢复算法是认为，你还有3个Duplicated Acks说明网络也不那么糟糕，所以没有必要像RTO超时那么强烈。 注意，正如前面所说，进入Fast Recovery之前，cwnd 和 sshthresh已被更新：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cwnd = cwnd /2</span><br><span class=\"line\">sshthresh = cwnd</span><br><span class=\"line\">然后，真正的Fast Recovery算法如下：</span><br><span class=\"line\"></span><br><span class=\"line\">cwnd = sshthresh  + 3 * MSS （3的意思是确认有3个数据包被收到了）</span><br><span class=\"line\">重传Duplicated ACKs指定的数据包</span><br><span class=\"line\">如果再收到 duplicated Acks，那么cwnd = cwnd +1</span><br><span class=\"line\">如果收到了新的Ack，那么，cwnd = sshthresh ，然后就进入了拥塞避免的算法了。</span><br><span class=\"line\">如果你仔细思考一下上面的这个算法，你就会知道，上面这个算法也有问题，那就是——它依赖于3个重复的Acks。注意，3个重复的Acks并不代表只丢了一个数据包，很有可能是丢了好多包。但这个算法只会重传一个，而剩下的那些包只能等到RTO超时，于是，进入了恶梦模式——超时一个窗口就减半一下，多个超时会超成TCP的传输速度呈级数下降，而且也不会触发Fast Recovery算法了。</span><br><span class=\"line\"></span><br><span class=\"line\">通常来说，正如我们前面所说的，SACK或D-SACK的方法可以让Fast Recovery或Sender在做决定时更聪明一些，但是并不是所有的TCP的实现都支持SACK（SACK需要两端都支持），所以，需要一个没有SACK的解决方案。而通过SACK进行拥塞控制的算法是FACK（后面会讲）</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>tcp要解决一个很大的事情，就是要在一个网络根据不同的情况来动态调整自己的发包速度—小则让自己更稳定，大则让整个网络更稳定</p>\n<h3 id=\"tcp的rtt算法\"><a href=\"#tcp的rtt算法\" class=\"headerlink\" title=\"tcp的rtt算法\"></a>tcp的rtt算法</h3><p>timeout 太大-&gt;重发慢-&gt;丢了半天重发-&gt; 没效率-&gt;性能差</p>\n<p>timeout 太小-&gt;可能没有丢就重发-&gt;重发就快、增加网络拥堵，导致更多超时 (恶性循环导致更多重发)</p>\n<ul>\n<li>RTT：round trip time 就是一个数据包从发出去到回来的时间。这样发送端就可以设置RTO</li>\n<li>RTO：retransmission timeout 重传超时</li>\n<li>SRTT：smoothed RTT 平滑RTT","more":"</li>\n</ul>\n<h3 id=\"tcp滑动窗口\"><a href=\"#tcp滑动窗口\" class=\"headerlink\" title=\"tcp滑动窗口\"></a>tcp滑动窗口</h3><p>tcp必须解决的可靠传输以及包乱序问题，所以tcp必须知道网络实际的数据处理带宽或者数据处理的速度，这样才不会引起网络拥塞，导致丢包</p>\n<p>所以tcp，引入了一些技术做网络流控，sliding window是其中的一个技术，tcp里面有一个字段叫做window，又叫Advertised-window,这个字段是接收端告诉发送端自己还有多少缓冲区可以接收数据。于是发送端就可以根据这个接收端的处理能力发送数据，而不会导致接收端处理不过来。</p>\n<h4 id=\"Zero-Window\"><a href=\"#Zero-Window\" class=\"headerlink\" title=\"Zero Window\"></a>Zero Window</h4><p>接收端可能没有多余的窗口了，那么当恢复到足够的窗口大小时，怎么通知发送端呢？ </p>\n<p>解决这个问题使用了Zero Window Probe，缩写为zwp，也就是说，发送端在窗口的值变成0后，会发zwp的包给接收方，让接收方来ack他的window，一般这个值会设置3次，第三次大约30-60s，如果3次过后还是0的话，tcp就会发RST把连接断掉</p>\n<h4 id=\"Silly-Window-Syndrome\"><a href=\"#Silly-Window-Syndrome\" class=\"headerlink\" title=\"Silly Window Syndrome\"></a>Silly Window Syndrome</h4><p>糊涂窗口综合征，接收方太忙了，来不及取走Receive window里的数据，那么，会导致发送方越来越小，到最后，如果接收方有几个字节并告诉发送方，那么发送方会义无反顾发送几个字节。</p>\n<ul>\n<li>MTU：以太网 MTU是1500字节，出去TCP+IP头的40个字节，真正的数据传输为1460，这就是MSS，Maximum Transmission Unit，MTU</li>\n<li>MSS：max segment size 最大tcp包大小</li>\n</ul>\n<h3 id=\"TCP的拥塞处理-–-Congestion-Handling\"><a href=\"#TCP的拥塞处理-–-Congestion-Handling\" class=\"headerlink\" title=\"TCP的拥塞处理 – Congestion Handling\"></a>TCP的拥塞处理 – Congestion Handling</h3><p>TCP不是一个自私的协议，当拥塞发生的时候，要做自我牺牲。就像交通阻塞一样，每个车都应该把路让出来，而不要再去抢路了</p>\n<p>拥塞处理的四种算法：</p>\n<p>1）慢启动，2）拥塞避免，3）拥塞发生，4）快速恢复</p>\n<p>首先，我们来看一下TCP的慢热启动。慢启动的意思是，刚刚加入网络的连接，一点一点地提速，不要一上来就像那些特权车一样霸道地把路占满。新同学上高速还是要慢一点，不要把已经在高速上的秩序给搞乱了。</p>\n<h4 id=\"慢启动的算法如下-cwnd全称Congestion-Window-：\"><a href=\"#慢启动的算法如下-cwnd全称Congestion-Window-：\" class=\"headerlink\" title=\"慢启动的算法如下(cwnd全称Congestion Window)：\"></a>慢启动的算法如下(cwnd全称Congestion Window)：</h4><p>1）连接建好的开始先初始化cwnd = 1，表明可以传一个MSS大小的数据。</p>\n<p>2）每当收到一个ACK，cwnd++; 呈线性上升</p>\n<p>3）每当过了一个RTT，cwnd = cwnd*2; 呈指数让升</p>\n<p>4）还有一个ssthresh（slow start threshold），是一个上限，当cwnd &gt;= ssthresh时，就会进入“拥塞避免算法”（后面会说这个算法）</p>\n<p>所以，我们可以看到，如果网速很快的话，ACK也会返回得快，RTT也会短，那么，这个慢启动就一点也不慢。下图说明了这个过程。</p>\n<h4 id=\"拥塞避免算法-–-Congestion-Avoidance\"><a href=\"#拥塞避免算法-–-Congestion-Avoidance\" class=\"headerlink\" title=\"拥塞避免算法 – Congestion Avoidance\"></a>拥塞避免算法 – Congestion Avoidance</h4><p>前面说过，还有一个ssthresh（slow start threshold），是一个上限，当cwnd &gt;= ssthresh时，就会进入“拥塞避免算法”。一般来说ssthresh的值是65535，单位是字节，当cwnd达到这个值时后，算法如下：</p>\n<p>1）收到一个ACK时，cwnd = cwnd + 1/cwnd</p>\n<p>2）当每过一个RTT时，cwnd = cwnd + 1</p>\n<p>这样就可以避免增长过快导致网络拥塞，慢慢的增加调整到网络的最佳值。很明显，是一个线性上升的算法。</p>\n<p>前面我们说过，当丢包的时候，会有两种情况：</p>\n<p>1）等到RTO超时，重传数据包。TCP认为这种情况太糟糕，反应也很强烈。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sshthresh =  cwnd /2</span><br><span class=\"line\">cwnd 重置为 1</span><br><span class=\"line\">进入慢启动过程</span><br><span class=\"line\">2）Fast Retransmit算法，也就是在收到3个duplicate ACK时就开启重传，而不用等到RTO超时。</span><br><span class=\"line\"></span><br><span class=\"line\">TCP Tahoe的实现和RTO超时一样。</span><br><span class=\"line\">TCP Reno的实现是：</span><br><span class=\"line\">cwnd = cwnd /2</span><br><span class=\"line\">sshthresh = cwnd</span><br><span class=\"line\">进入快速恢复算法——Fast Recovery</span><br><span class=\"line\">上面我们可以看到RTO超时后，sshthresh会变成cwnd的一半，这意味着，如果cwnd&lt;=sshthresh时出现的丢包，那么TCP的sshthresh就会减了一半，然后等cwnd又很快地以指数级增涨爬到这个地方时，就会成慢慢的线性增涨。我们可以看到，TCP是怎么通过这种强烈地震荡快速而小心得找到网站流量的平衡点的。</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"快速恢复算法-–-Fast-Recovery\"><a href=\"#快速恢复算法-–-Fast-Recovery\" class=\"headerlink\" title=\"快速恢复算法 – Fast Recovery\"></a>快速恢复算法 – Fast Recovery</h4><p>TCP Reno</p>\n<p>这个算法定义在RFC5681。快速重传和快速恢复算法一般同时使用。快速恢复算法是认为，你还有3个Duplicated Acks说明网络也不那么糟糕，所以没有必要像RTO超时那么强烈。 注意，正如前面所说，进入Fast Recovery之前，cwnd 和 sshthresh已被更新：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cwnd = cwnd /2</span><br><span class=\"line\">sshthresh = cwnd</span><br><span class=\"line\">然后，真正的Fast Recovery算法如下：</span><br><span class=\"line\"></span><br><span class=\"line\">cwnd = sshthresh  + 3 * MSS （3的意思是确认有3个数据包被收到了）</span><br><span class=\"line\">重传Duplicated ACKs指定的数据包</span><br><span class=\"line\">如果再收到 duplicated Acks，那么cwnd = cwnd +1</span><br><span class=\"line\">如果收到了新的Ack，那么，cwnd = sshthresh ，然后就进入了拥塞避免的算法了。</span><br><span class=\"line\">如果你仔细思考一下上面的这个算法，你就会知道，上面这个算法也有问题，那就是——它依赖于3个重复的Acks。注意，3个重复的Acks并不代表只丢了一个数据包，很有可能是丢了好多包。但这个算法只会重传一个，而剩下的那些包只能等到RTO超时，于是，进入了恶梦模式——超时一个窗口就减半一下，多个超时会超成TCP的传输速度呈级数下降，而且也不会触发Fast Recovery算法了。</span><br><span class=\"line\"></span><br><span class=\"line\">通常来说，正如我们前面所说的，SACK或D-SACK的方法可以让Fast Recovery或Sender在做决定时更聪明一些，但是并不是所有的TCP的实现都支持SACK（SACK需要两端都支持），所以，需要一个没有SACK的解决方案。而通过SACK进行拥塞控制的算法是FACK（后面会讲）</span><br></pre></td></tr></table></figure></p>"},{"title":"字符串反转","date":"2018-02-05T14:36:02.000Z","_content":"\n## 以下为字符串反转的几种方法\n\n### 遍历字符数组\n<!--more-->\n\n```java\n\n    public static void reverse3(String src){\n        if(src==null){\n            throw new IllegalArgumentException(src);\n        }\n        int length=src.length();\n        char[] srcChar=src.toCharArray();\n        for(int i=0;i<length/2;i++){\n            char temp=srcChar[i];\n            srcChar[i]=srcChar[length-i-1];\n            srcChar[length-i-1]=temp;\n        }\n        System.out.println(new String(srcChar));\n    }\n\n\n\n    public static void reverse1(String src){\n        if(src==null){\n            throw new IllegalArgumentException(src);\n        }\n        int length=src.length();\n        char[] dest=new char[length];\n        char[] srcChar=src.toCharArray();\n        for(int i=0;i<length;i++){\n            dest[i]=srcChar[length-i-1];\n        }\n        System.out.println(new String(dest));\n    }\n```\n\n### 递归\n\n```java\n public static String reverse4(String src){\n        if(src==null){\n            throw new IllegalArgumentException(src);\n        }\n        int length=src.length();\n        if(length<=1){\n            return src;\n        }\n        String left=src.substring(0,length/2);\n        String right=src.substring(length/2,length);\n        return reverse4(right)+reverse4(left);\n\n    }\n\n\n```\n\n### 使用StringBuffer\n\n```java\n\n public static void reverse2(String src){\n        if(src==null){\n            throw new IllegalArgumentException(src);\n        }\n        StringBuffer sb=new StringBuffer(src);\n        sb.reverse();\n        System.out.println(sb.toString());\n    }\n\n```","source":"_posts/字符串反转.md","raw":"---\ntitle: 字符串反转\ndate: 2018-02-05 22:36:02\ntags: 工具\ncategories: java\n---\n\n## 以下为字符串反转的几种方法\n\n### 遍历字符数组\n<!--more-->\n\n```java\n\n    public static void reverse3(String src){\n        if(src==null){\n            throw new IllegalArgumentException(src);\n        }\n        int length=src.length();\n        char[] srcChar=src.toCharArray();\n        for(int i=0;i<length/2;i++){\n            char temp=srcChar[i];\n            srcChar[i]=srcChar[length-i-1];\n            srcChar[length-i-1]=temp;\n        }\n        System.out.println(new String(srcChar));\n    }\n\n\n\n    public static void reverse1(String src){\n        if(src==null){\n            throw new IllegalArgumentException(src);\n        }\n        int length=src.length();\n        char[] dest=new char[length];\n        char[] srcChar=src.toCharArray();\n        for(int i=0;i<length;i++){\n            dest[i]=srcChar[length-i-1];\n        }\n        System.out.println(new String(dest));\n    }\n```\n\n### 递归\n\n```java\n public static String reverse4(String src){\n        if(src==null){\n            throw new IllegalArgumentException(src);\n        }\n        int length=src.length();\n        if(length<=1){\n            return src;\n        }\n        String left=src.substring(0,length/2);\n        String right=src.substring(length/2,length);\n        return reverse4(right)+reverse4(left);\n\n    }\n\n\n```\n\n### 使用StringBuffer\n\n```java\n\n public static void reverse2(String src){\n        if(src==null){\n            throw new IllegalArgumentException(src);\n        }\n        StringBuffer sb=new StringBuffer(src);\n        sb.reverse();\n        System.out.println(sb.toString());\n    }\n\n```","slug":"字符串反转","published":1,"updated":"2019-09-23T06:59:09.954Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0w29rkw0026uup2omxax549","content":"<h2 id=\"以下为字符串反转的几种方法\"><a href=\"#以下为字符串反转的几种方法\" class=\"headerlink\" title=\"以下为字符串反转的几种方法\"></a>以下为字符串反转的几种方法</h2><h3 id=\"遍历字符数组\"><a href=\"#遍历字符数组\" class=\"headerlink\" title=\"遍历字符数组\"></a>遍历字符数组</h3><a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">reverse3</span><span class=\"params\">(String src)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(src==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(src);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length=src.length();</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] srcChar=src.toCharArray();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;length/<span class=\"number\">2</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> temp=srcChar[i];</span><br><span class=\"line\">        srcChar[i]=srcChar[length-i-<span class=\"number\">1</span>];</span><br><span class=\"line\">        srcChar[length-i-<span class=\"number\">1</span>]=temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(<span class=\"keyword\">new</span> String(srcChar));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">reverse1</span><span class=\"params\">(String src)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(src==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(src);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length=src.length();</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] dest=<span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[length];</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] srcChar=src.toCharArray();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;length;i++)&#123;</span><br><span class=\"line\">        dest[i]=srcChar[length-i-<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(<span class=\"keyword\">new</span> String(dest));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">reverse4</span><span class=\"params\">(String src)</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(src==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(src);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> length=src.length();</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(length&lt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> src;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       String left=src.substring(<span class=\"number\">0</span>,length/<span class=\"number\">2</span>);</span><br><span class=\"line\">       String right=src.substring(length/<span class=\"number\">2</span>,length);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> reverse4(right)+reverse4(left);</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用StringBuffer\"><a href=\"#使用StringBuffer\" class=\"headerlink\" title=\"使用StringBuffer\"></a>使用StringBuffer</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">reverse2</span><span class=\"params\">(String src)</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(src==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(src);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       StringBuffer sb=<span class=\"keyword\">new</span> StringBuffer(src);</span><br><span class=\"line\">       sb.reverse();</span><br><span class=\"line\">       System.out.println(sb.toString());</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"<h2 id=\"以下为字符串反转的几种方法\"><a href=\"#以下为字符串反转的几种方法\" class=\"headerlink\" title=\"以下为字符串反转的几种方法\"></a>以下为字符串反转的几种方法</h2><h3 id=\"遍历字符数组\"><a href=\"#遍历字符数组\" class=\"headerlink\" title=\"遍历字符数组\"></a>遍历字符数组</h3>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">reverse3</span><span class=\"params\">(String src)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(src==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(src);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length=src.length();</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] srcChar=src.toCharArray();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;length/<span class=\"number\">2</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> temp=srcChar[i];</span><br><span class=\"line\">        srcChar[i]=srcChar[length-i-<span class=\"number\">1</span>];</span><br><span class=\"line\">        srcChar[length-i-<span class=\"number\">1</span>]=temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(<span class=\"keyword\">new</span> String(srcChar));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">reverse1</span><span class=\"params\">(String src)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(src==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(src);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length=src.length();</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] dest=<span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[length];</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] srcChar=src.toCharArray();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;length;i++)&#123;</span><br><span class=\"line\">        dest[i]=srcChar[length-i-<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(<span class=\"keyword\">new</span> String(dest));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">reverse4</span><span class=\"params\">(String src)</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(src==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(src);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> length=src.length();</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(length&lt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> src;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       String left=src.substring(<span class=\"number\">0</span>,length/<span class=\"number\">2</span>);</span><br><span class=\"line\">       String right=src.substring(length/<span class=\"number\">2</span>,length);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> reverse4(right)+reverse4(left);</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用StringBuffer\"><a href=\"#使用StringBuffer\" class=\"headerlink\" title=\"使用StringBuffer\"></a>使用StringBuffer</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">reverse2</span><span class=\"params\">(String src)</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(src==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(src);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       StringBuffer sb=<span class=\"keyword\">new</span> StringBuffer(src);</span><br><span class=\"line\">       sb.reverse();</span><br><span class=\"line\">       System.out.println(sb.toString());</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>"},{"title":"设计模式之空对象模式","date":"2018-07-23T00:36:02.000Z","_content":"\n## 设计模式之空对象模式\n* 23中模式之外的新模式\n\n### 简介\n通过实现一个默认的无意义对象类避免null值实现\n<!--more-->\n\n### 最佳实践\n* 就是指定默认的一个映射对象，方法不实现，默认为空，与实际对象实现同一个接口，这样在源头中解决null值\n* 使用类似于Option这样的对象，获取时判断有值没，再获取\n","source":"_posts/空对象模式-2018-07-23.md","raw":"---\ntitle: 设计模式之空对象模式\ndate: 2018-07-23 08:36:02\ntags: 空对象模式\ncategories: \"power design\"\n---\n\n## 设计模式之空对象模式\n* 23中模式之外的新模式\n\n### 简介\n通过实现一个默认的无意义对象类避免null值实现\n<!--more-->\n\n### 最佳实践\n* 就是指定默认的一个映射对象，方法不实现，默认为空，与实际对象实现同一个接口，这样在源头中解决null值\n* 使用类似于Option这样的对象，获取时判断有值没，再获取\n","slug":"空对象模式-2018-07-23","published":1,"updated":"2019-09-23T06:59:05.916Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0w29rkx0029uup2olgiic29","content":"<h2 id=\"设计模式之空对象模式\"><a href=\"#设计模式之空对象模式\" class=\"headerlink\" title=\"设计模式之空对象模式\"></a>设计模式之空对象模式</h2><ul>\n<li>23中模式之外的新模式</li>\n</ul>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>通过实现一个默认的无意义对象类避免null值实现<br><a id=\"more\"></a></p>\n<h3 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h3><ul>\n<li>就是指定默认的一个映射对象，方法不实现，默认为空，与实际对象实现同一个接口，这样在源头中解决null值</li>\n<li>使用类似于Option这样的对象，获取时判断有值没，再获取</li>\n</ul>\n","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"<h2 id=\"设计模式之空对象模式\"><a href=\"#设计模式之空对象模式\" class=\"headerlink\" title=\"设计模式之空对象模式\"></a>设计模式之空对象模式</h2><ul>\n<li>23中模式之外的新模式</li>\n</ul>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>通过实现一个默认的无意义对象类避免null值实现<br>","more":"</p>\n<h3 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h3><ul>\n<li>就是指定默认的一个映射对象，方法不实现，默认为空，与实际对象实现同一个接口，这样在源头中解决null值</li>\n<li>使用类似于Option这样的对象，获取时判断有值没，再获取</li>\n</ul>"},{"title":"设计模式之对象池模式","date":"2018-07-20T00:36:02.000Z","_content":"\n## 设计模式之对象池模式\n* 23中模式之外的新模式\n\n### 简介\n对象池模式就是依赖于内存中的对象池（在应用启动时进行初始化），通过循环使用对象，减少资源初始化、以及销毁的昂贵损耗！典型的例子是：线程池、连接池\n<!--more-->\n\n\n### 类图\n![对象池](/images/2018-07-19-3.png)\n<center>对象池</center>\n\n\n\n### 最佳实践\n只有在重复生成对象的操作成为影响性能的关键因素时，才适合进行对象池化，但是若池化带来性能提高并不显著或重要的话，建议放弃对象池化技术。\n\n\n### 代码\n```\npackage com.bj.hz.pool;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 8:41 PM\n */\npublic abstract class Pool <T>{\n    private  Map<T,ObjectStatus> pool=new HashMap();\n\n    public Pool() {\n        pool.put(create(),new ObjectStatus());\n    }\n\n    public synchronized T checkout(){\n        for (T t:pool.keySet()){\n            if (!pool.get(t).isIsuse()){\n                pool.get(t).setIsuse(true);\n                return t;\n            }\n        }\n        return null;\n    }\n\n\n    public synchronized void checkIn(T t){\n        pool.get(t).setIsuse(false);\n    }\n\n    public abstract T create();\n\n    private static class ObjectStatus{\n        private boolean isuse;\n\n        public boolean isIsuse() {\n            return isuse;\n        }\n\n        public void setIsuse(boolean isuse) {\n            this.isuse = isuse;\n        }\n\n\n\n    }\n}\n```","source":"_posts/对象池模式-2018-07-20.md","raw":"---\ntitle: 设计模式之对象池模式\ndate: 2018-07-20 08:36:02\ntags: 设计模式\ncategories: \"power design\"\n---\n\n## 设计模式之对象池模式\n* 23中模式之外的新模式\n\n### 简介\n对象池模式就是依赖于内存中的对象池（在应用启动时进行初始化），通过循环使用对象，减少资源初始化、以及销毁的昂贵损耗！典型的例子是：线程池、连接池\n<!--more-->\n\n\n### 类图\n![对象池](/images/2018-07-19-3.png)\n<center>对象池</center>\n\n\n\n### 最佳实践\n只有在重复生成对象的操作成为影响性能的关键因素时，才适合进行对象池化，但是若池化带来性能提高并不显著或重要的话，建议放弃对象池化技术。\n\n\n### 代码\n```\npackage com.bj.hz.pool;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 8:41 PM\n */\npublic abstract class Pool <T>{\n    private  Map<T,ObjectStatus> pool=new HashMap();\n\n    public Pool() {\n        pool.put(create(),new ObjectStatus());\n    }\n\n    public synchronized T checkout(){\n        for (T t:pool.keySet()){\n            if (!pool.get(t).isIsuse()){\n                pool.get(t).setIsuse(true);\n                return t;\n            }\n        }\n        return null;\n    }\n\n\n    public synchronized void checkIn(T t){\n        pool.get(t).setIsuse(false);\n    }\n\n    public abstract T create();\n\n    private static class ObjectStatus{\n        private boolean isuse;\n\n        public boolean isIsuse() {\n            return isuse;\n        }\n\n        public void setIsuse(boolean isuse) {\n            this.isuse = isuse;\n        }\n\n\n\n    }\n}\n```","slug":"对象池模式-2018-07-20","published":1,"updated":"2019-09-23T06:59:08.291Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0w29rkz002buup29a7skcoa","content":"<h2 id=\"设计模式之对象池模式\"><a href=\"#设计模式之对象池模式\" class=\"headerlink\" title=\"设计模式之对象池模式\"></a>设计模式之对象池模式</h2><ul>\n<li>23中模式之外的新模式</li>\n</ul>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>对象池模式就是依赖于内存中的对象池（在应用启动时进行初始化），通过循环使用对象，减少资源初始化、以及销毁的昂贵损耗！典型的例子是：线程池、连接池<br><a id=\"more\"></a></p>\n<h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><img src=\"/images/2018-07-19-3.png\" alt=\"对象池\"></p>\n<center>对象池</center>\n\n\n\n<h3 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h3><p>只有在重复生成对象的操作成为影响性能的关键因素时，才适合进行对象池化，但是若池化带来性能提高并不显著或重要的话，建议放弃对象池化技术。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bj.hz.pool;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-07-19</span><br><span class=\"line\"> * @time: 8:41 PM</span><br><span class=\"line\"> */</span><br><span class=\"line\">public abstract class Pool &lt;T&gt;&#123;</span><br><span class=\"line\">    private  Map&lt;T,ObjectStatus&gt; pool=new HashMap();</span><br><span class=\"line\"></span><br><span class=\"line\">    public Pool() &#123;</span><br><span class=\"line\">        pool.put(create(),new ObjectStatus());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public synchronized T checkout()&#123;</span><br><span class=\"line\">        for (T t:pool.keySet())&#123;</span><br><span class=\"line\">            if (!pool.get(t).isIsuse())&#123;</span><br><span class=\"line\">                pool.get(t).setIsuse(true);</span><br><span class=\"line\">                return t;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public synchronized void checkIn(T t)&#123;</span><br><span class=\"line\">        pool.get(t).setIsuse(false);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public abstract T create();</span><br><span class=\"line\"></span><br><span class=\"line\">    private static class ObjectStatus&#123;</span><br><span class=\"line\">        private boolean isuse;</span><br><span class=\"line\"></span><br><span class=\"line\">        public boolean isIsuse() &#123;</span><br><span class=\"line\">            return isuse;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void setIsuse(boolean isuse) &#123;</span><br><span class=\"line\">            this.isuse = isuse;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"<h2 id=\"设计模式之对象池模式\"><a href=\"#设计模式之对象池模式\" class=\"headerlink\" title=\"设计模式之对象池模式\"></a>设计模式之对象池模式</h2><ul>\n<li>23中模式之外的新模式</li>\n</ul>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>对象池模式就是依赖于内存中的对象池（在应用启动时进行初始化），通过循环使用对象，减少资源初始化、以及销毁的昂贵损耗！典型的例子是：线程池、连接池<br>","more":"</p>\n<h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><img src=\"/images/2018-07-19-3.png\" alt=\"对象池\"></p>\n<center>对象池</center>\n\n\n\n<h3 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h3><p>只有在重复生成对象的操作成为影响性能的关键因素时，才适合进行对象池化，但是若池化带来性能提高并不显著或重要的话，建议放弃对象池化技术。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bj.hz.pool;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-07-19</span><br><span class=\"line\"> * @time: 8:41 PM</span><br><span class=\"line\"> */</span><br><span class=\"line\">public abstract class Pool &lt;T&gt;&#123;</span><br><span class=\"line\">    private  Map&lt;T,ObjectStatus&gt; pool=new HashMap();</span><br><span class=\"line\"></span><br><span class=\"line\">    public Pool() &#123;</span><br><span class=\"line\">        pool.put(create(),new ObjectStatus());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public synchronized T checkout()&#123;</span><br><span class=\"line\">        for (T t:pool.keySet())&#123;</span><br><span class=\"line\">            if (!pool.get(t).isIsuse())&#123;</span><br><span class=\"line\">                pool.get(t).setIsuse(true);</span><br><span class=\"line\">                return t;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public synchronized void checkIn(T t)&#123;</span><br><span class=\"line\">        pool.get(t).setIsuse(false);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public abstract T create();</span><br><span class=\"line\"></span><br><span class=\"line\">    private static class ObjectStatus&#123;</span><br><span class=\"line\">        private boolean isuse;</span><br><span class=\"line\"></span><br><span class=\"line\">        public boolean isIsuse() &#123;</span><br><span class=\"line\">            return isuse;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void setIsuse(boolean isuse) &#123;</span><br><span class=\"line\">            this.isuse = isuse;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"读源码注意的东西","date":"2018-02-06T08:00:24.000Z","_content":"## 修改相关\n###### 2018/2/6  创建\n\n## 怎样读源码，该注意什么问题\n\n*前提：读懂源码的动机与原因是什么。*\n     *看下该项目的设计文档与架构图，宏观上对一些概念有些认识*\n     *从感兴趣的点设置断点、开始debug*\n<!--more-->\n\n\n* 了解语言\n* 了解设计模式\n* 了解命名习惯-统一规约\n* 是了解整体架构，而不是地毯式遍历每一行代码\n* 了解架构： 从上至下（要有层次感） 层级、每个层级由多个角色构成，角色的互动\n    系统如何初始化（为接下来的所有任务做准备）-> 系统的相关的其他系统（界面等||设定系统的边界）-> 系统如何反应事件-> 系统如何处理异常与错误\n\n","source":"_posts/读源码注意的东西.md","raw":"---\ntitle: 读源码注意的东西\ndate: 2018-02-06 16:00:24\ntags: [\"源码\",\"方法\"]\ncategories: \"java\"\n---\n## 修改相关\n###### 2018/2/6  创建\n\n## 怎样读源码，该注意什么问题\n\n*前提：读懂源码的动机与原因是什么。*\n     *看下该项目的设计文档与架构图，宏观上对一些概念有些认识*\n     *从感兴趣的点设置断点、开始debug*\n<!--more-->\n\n\n* 了解语言\n* 了解设计模式\n* 了解命名习惯-统一规约\n* 是了解整体架构，而不是地毯式遍历每一行代码\n* 了解架构： 从上至下（要有层次感） 层级、每个层级由多个角色构成，角色的互动\n    系统如何初始化（为接下来的所有任务做准备）-> 系统的相关的其他系统（界面等||设定系统的边界）-> 系统如何反应事件-> 系统如何处理异常与错误\n\n","slug":"读源码注意的东西","published":1,"updated":"2019-09-23T06:58:59.354Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0w29rl0002euup2ltisktsz","content":"<h2 id=\"修改相关\"><a href=\"#修改相关\" class=\"headerlink\" title=\"修改相关\"></a>修改相关</h2><h6 id=\"2018-2-6-创建\"><a href=\"#2018-2-6-创建\" class=\"headerlink\" title=\"2018/2/6  创建\"></a>2018/2/6  创建</h6><h2 id=\"怎样读源码，该注意什么问题\"><a href=\"#怎样读源码，该注意什么问题\" class=\"headerlink\" title=\"怎样读源码，该注意什么问题\"></a>怎样读源码，该注意什么问题</h2><p><em>前提：读懂源码的动机与原因是什么。</em><br>     <em>看下该项目的设计文档与架构图，宏观上对一些概念有些认识</em><br>     <em>从感兴趣的点设置断点、开始debug</em><br><a id=\"more\"></a></p>\n<ul>\n<li>了解语言</li>\n<li>了解设计模式</li>\n<li>了解命名习惯-统一规约</li>\n<li>是了解整体架构，而不是地毯式遍历每一行代码</li>\n<li>了解架构： 从上至下（要有层次感） 层级、每个层级由多个角色构成，角色的互动<br>  系统如何初始化（为接下来的所有任务做准备）-&gt; 系统的相关的其他系统（界面等||设定系统的边界）-&gt; 系统如何反应事件-&gt; 系统如何处理异常与错误</li>\n</ul>\n","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"<h2 id=\"修改相关\"><a href=\"#修改相关\" class=\"headerlink\" title=\"修改相关\"></a>修改相关</h2><h6 id=\"2018-2-6-创建\"><a href=\"#2018-2-6-创建\" class=\"headerlink\" title=\"2018/2/6  创建\"></a>2018/2/6  创建</h6><h2 id=\"怎样读源码，该注意什么问题\"><a href=\"#怎样读源码，该注意什么问题\" class=\"headerlink\" title=\"怎样读源码，该注意什么问题\"></a>怎样读源码，该注意什么问题</h2><p><em>前提：读懂源码的动机与原因是什么。</em><br>     <em>看下该项目的设计文档与架构图，宏观上对一些概念有些认识</em><br>     <em>从感兴趣的点设置断点、开始debug</em><br>","more":"</p>\n<ul>\n<li>了解语言</li>\n<li>了解设计模式</li>\n<li>了解命名习惯-统一规约</li>\n<li>是了解整体架构，而不是地毯式遍历每一行代码</li>\n<li>了解架构： 从上至下（要有层次感） 层级、每个层级由多个角色构成，角色的互动<br>  系统如何初始化（为接下来的所有任务做准备）-&gt; 系统的相关的其他系统（界面等||设定系统的边界）-&gt; 系统如何反应事件-&gt; 系统如何处理异常与错误</li>\n</ul>"},{"title":"设计模式之规格模式","date":"2018-07-19T14:36:02.000Z","_content":"\n## 设计模式之规格模式\n* 23中模式之外的新模式\n\n### 简介\n在一系列对象中根据条件搜索！类似sql，但不同的是从内存中的对象进行搜索\n具体类似于LINQ（Language Integrated Query）语言集成查询\n<!--more-->\n\n### 初步实践\n> 1.创建一个接口，实现按照某种条件筛选：IUserProvider\n  2.实现以上接口:UserProvider，通过具体的对象类进行抽象方法的实现（例如：遍历实体类数组，进行判断，然后返回结果数组或列表）\n  3.实现具体对象，类似User实体类\n  4.实现场景类，初始化一个拥有User的数组或列表，实例化UserProvider，并使用相关方法，获取结果\n\n* 请注意以上实现，我们可以发现一旦业务发生变更，我们需要改对应的接口方法、需要实现对应的接口，很不容易进行扩展。\n\n* 第二种：那么我们是否可以将对应的搜索条件进行封装，创建一个接口：IUserSpecification，定义是否满足的方法，返回bool值，这样就可以在多种条件下（业务变更等），进行无缝扩展。只用实现该接口，就可以扩展多个条件类。\n\n* 对于类似于sql的多个条件查询下，在数据量大的情况下容易造成性能较差，因为需要经过好多轮循环\n\n* 第三种：可以知道一般条件组合，基本离不开与或非、这三种模式是固定的，我们可以通过这三种模式进行统一的条件封装。\n> 1.我们创建一个条件规格接口：IUserSpecification,实现判断是否满足，返回bool值\n  2.创建一个抽象类实现IUserSpecification：ComposionSpecificaiton，并且通过模板方法实现与或非三种条件规格的生成，具体接口的实现由具体类来实现。此抽象类依赖于具体的实现（请按照实际情况分析，不要死学）\n  3.继承ComposionSpecificaiton，实现具体的判断方法\n  4.在场景类中，通过条件规格的实现类，使用与或非方法对多个条件进行封装，然后进行计算\n\n#### 第三种方法最优，使用了组合模式、策略模式、模板模式这三种模式组合成了规格模式。\n\n### 类图\n\n![第二种类图](/images/2018-07-19-2.jpg)\n<center>第二种类图</center>\n\n![第三种类图](/images/2018-07-19-1.jpg)\n<center>第三种类图</center>\n\n\n### 以下为代码\n\n* 定义一个用户：\n```\npackage com.bj.hz.specification.very;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-18\n * @time: 9:48 PM\n */\npublic class User {\n    private String name;\n    private int age;\n\n    public User(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"name='\" + name + '\\'' +\n                \", age=\" + age +\n                '}';\n    }\n}\n\n```\n* 定义一个查询提供类接口以及实现\n\n```\npackage com.bj.hz.specification.very;\n\n\nimport java.util.ArrayList;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-18\n * @time: 10:07 PM\n */\npublic interface IUserProvider {\n    ArrayList<User> findUser(IUserSpecification specification);\n}\n\n```\n* 提供实现\n```\npackage com.bj.hz.specification.very;\n\n\n\nimport java.util.ArrayList;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-18\n * @time: 10:09 PM\n */\npublic class UserProvider implements IUserProvider {\n\n    private ArrayList<User> users;\n\n    public UserProvider(ArrayList<User> users) {\n        this.users = users;\n    }\n\n    @Override\n    public ArrayList<User> findUser(IUserSpecification specification) {\n        ArrayList<User> result=new ArrayList<>();\n        for (User u:users){\n            if (specification.isSatisfiedBy(u)){\n                result.add(u);\n            }\n        }\n        return result;\n    }\n}\n\n```\n* 规格条件接口\n```\npackage com.bj.hz.specification.very;\n\n/**\n * Created with hzz\n * Description:为了适应未来变化的需求，将运算封装到接口之内\n *\n * @author: huangzhe\n * @date: 2018-07-18\n * @time: 10:02 PM\n */\npublic interface IUserSpecification {\n    public boolean isSatisfiedBy(User user);\n}\n\n```\n* 组合模式的接口，其实可以定义三个装饰器（请自行想象）分别实现 与或非\n```\npackage com.bj.hz.specification.very;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:06 AM\n */\npublic abstract class AbstractComposition implements IUserSpecification {\n\n\n\n    public IUserSpecification and(IUserSpecification userSpecification){\n        return new AndSpecification(this,userSpecification);\n    }\n\n    public IUserSpecification or(IUserSpecification userSpecification){\n        return new OrSpecification(this,userSpecification);\n    }\n    public IUserSpecification not(IUserSpecification userSpecification){\n        return new NotSpecification(this);\n    }\n\n}\n\n```\n* 分别是与或非实现\n\n```\npackage com.bj.hz.specification.very;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:08 AM\n */\npublic class AndSpecification extends AbstractComposition {\n\n    private IUserSpecification _left;\n    private IUserSpecification _right;\n\n    public AndSpecification(IUserSpecification _left, IUserSpecification _right) {\n        this._left = _left;\n        this._right = _right;\n    }\n\n    @Override\n    public boolean isSatisfiedBy(User user) {\n        return _left.isSatisfiedBy(user) && _right.isSatisfiedBy(user);\n    }\n}\n\n\n```\n\n```\npackage com.bj.hz.specification.very;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:09 AM\n */\npublic class OrSpecification extends AbstractComposition {\n\n    private IUserSpecification _left;\n    private IUserSpecification _right;\n\n    public OrSpecification(IUserSpecification _left, IUserSpecification _right) {\n        this._left = _left;\n        this._right = _right;\n    }\n\n    @Override\n    public boolean isSatisfiedBy(User user) {\n        return _left.isSatisfiedBy(user) || _right.isSatisfiedBy(user);\n    }\n}\n\n```\n\n```\npackage com.bj.hz.specification.very;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:10 AM\n */\npublic class NotSpecification extends AbstractComposition {\n\n    private IUserSpecification userSpecification;\n\n    public NotSpecification(IUserSpecification userSpecification) {\n        this.userSpecification = userSpecification;\n    }\n\n    @Override\n    public boolean isSatisfiedBy(User user) {\n        return !userSpecification.isSatisfiedBy(user);\n    }\n}\n\n```\n* 根据名称查询\n```\npackage com.bj.hz.specification.very;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:29 AM\n */\npublic class FindByNameSpecification extends AbstractComposition {\n\n    private String name;\n\n    public FindByNameSpecification(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public boolean isSatisfiedBy(User user) {\n        return user.getName().equals(name);\n    }\n}\n\n```\n* 根据大于给定的年龄查询\n```\npackage com.bj.hz.specification.very;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:31 AM\n */\npublic class FindByAgeThanSpecification extends AbstractComposition {\n\n    private int age;\n\n    public FindByAgeThanSpecification(int age) {\n        this.age = age;\n    }\n\n    @Override\n    public boolean isSatisfiedBy(User user) {\n        return user.getAge()>age;\n    }\n}\n\n```\n\n* 场景类具体实现\n```\npackage com.bj.hz.specification.very;\n\n\n\n\nimport java.util.ArrayList;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-18\n * @time: 10:12 PM\n */\npublic class Client {\n    public static void main(String[] args) {\n        ArrayList<User> users = new ArrayList<>();\n        users.add(new User(\"121\", 3));\n        users.add(new User(\"犁牛\", 10));\n        users.add(new User(\"测试\", 18));\n        users.add(new User(\"hah\", 16));\n        users.add(new User(\"黄啦啦\", 19));\n        users.add(new User(\"吴啦啦\", 20));\n        System.out.println(\"========年龄大于16的==========\");\n        IUserProvider userProvider=new UserProvider(users);\n        for (User user:userProvider.findUser(new FindByNameSpecification(\"hah\").and(new FindByAgeThanSpecification(14)))){\n            System.out.println(user);\n        }\n\n    }\n}\n\n```\n\n\n\n","source":"_posts/规格模式-2018-07-19.md","raw":"---\ntitle: 设计模式之规格模式\ndate: 2018-07-19 22:36:02\ntags: 设计模式\ncategories: \"power design\"\n---\n\n## 设计模式之规格模式\n* 23中模式之外的新模式\n\n### 简介\n在一系列对象中根据条件搜索！类似sql，但不同的是从内存中的对象进行搜索\n具体类似于LINQ（Language Integrated Query）语言集成查询\n<!--more-->\n\n### 初步实践\n> 1.创建一个接口，实现按照某种条件筛选：IUserProvider\n  2.实现以上接口:UserProvider，通过具体的对象类进行抽象方法的实现（例如：遍历实体类数组，进行判断，然后返回结果数组或列表）\n  3.实现具体对象，类似User实体类\n  4.实现场景类，初始化一个拥有User的数组或列表，实例化UserProvider，并使用相关方法，获取结果\n\n* 请注意以上实现，我们可以发现一旦业务发生变更，我们需要改对应的接口方法、需要实现对应的接口，很不容易进行扩展。\n\n* 第二种：那么我们是否可以将对应的搜索条件进行封装，创建一个接口：IUserSpecification，定义是否满足的方法，返回bool值，这样就可以在多种条件下（业务变更等），进行无缝扩展。只用实现该接口，就可以扩展多个条件类。\n\n* 对于类似于sql的多个条件查询下，在数据量大的情况下容易造成性能较差，因为需要经过好多轮循环\n\n* 第三种：可以知道一般条件组合，基本离不开与或非、这三种模式是固定的，我们可以通过这三种模式进行统一的条件封装。\n> 1.我们创建一个条件规格接口：IUserSpecification,实现判断是否满足，返回bool值\n  2.创建一个抽象类实现IUserSpecification：ComposionSpecificaiton，并且通过模板方法实现与或非三种条件规格的生成，具体接口的实现由具体类来实现。此抽象类依赖于具体的实现（请按照实际情况分析，不要死学）\n  3.继承ComposionSpecificaiton，实现具体的判断方法\n  4.在场景类中，通过条件规格的实现类，使用与或非方法对多个条件进行封装，然后进行计算\n\n#### 第三种方法最优，使用了组合模式、策略模式、模板模式这三种模式组合成了规格模式。\n\n### 类图\n\n![第二种类图](/images/2018-07-19-2.jpg)\n<center>第二种类图</center>\n\n![第三种类图](/images/2018-07-19-1.jpg)\n<center>第三种类图</center>\n\n\n### 以下为代码\n\n* 定义一个用户：\n```\npackage com.bj.hz.specification.very;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-18\n * @time: 9:48 PM\n */\npublic class User {\n    private String name;\n    private int age;\n\n    public User(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"name='\" + name + '\\'' +\n                \", age=\" + age +\n                '}';\n    }\n}\n\n```\n* 定义一个查询提供类接口以及实现\n\n```\npackage com.bj.hz.specification.very;\n\n\nimport java.util.ArrayList;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-18\n * @time: 10:07 PM\n */\npublic interface IUserProvider {\n    ArrayList<User> findUser(IUserSpecification specification);\n}\n\n```\n* 提供实现\n```\npackage com.bj.hz.specification.very;\n\n\n\nimport java.util.ArrayList;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-18\n * @time: 10:09 PM\n */\npublic class UserProvider implements IUserProvider {\n\n    private ArrayList<User> users;\n\n    public UserProvider(ArrayList<User> users) {\n        this.users = users;\n    }\n\n    @Override\n    public ArrayList<User> findUser(IUserSpecification specification) {\n        ArrayList<User> result=new ArrayList<>();\n        for (User u:users){\n            if (specification.isSatisfiedBy(u)){\n                result.add(u);\n            }\n        }\n        return result;\n    }\n}\n\n```\n* 规格条件接口\n```\npackage com.bj.hz.specification.very;\n\n/**\n * Created with hzz\n * Description:为了适应未来变化的需求，将运算封装到接口之内\n *\n * @author: huangzhe\n * @date: 2018-07-18\n * @time: 10:02 PM\n */\npublic interface IUserSpecification {\n    public boolean isSatisfiedBy(User user);\n}\n\n```\n* 组合模式的接口，其实可以定义三个装饰器（请自行想象）分别实现 与或非\n```\npackage com.bj.hz.specification.very;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:06 AM\n */\npublic abstract class AbstractComposition implements IUserSpecification {\n\n\n\n    public IUserSpecification and(IUserSpecification userSpecification){\n        return new AndSpecification(this,userSpecification);\n    }\n\n    public IUserSpecification or(IUserSpecification userSpecification){\n        return new OrSpecification(this,userSpecification);\n    }\n    public IUserSpecification not(IUserSpecification userSpecification){\n        return new NotSpecification(this);\n    }\n\n}\n\n```\n* 分别是与或非实现\n\n```\npackage com.bj.hz.specification.very;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:08 AM\n */\npublic class AndSpecification extends AbstractComposition {\n\n    private IUserSpecification _left;\n    private IUserSpecification _right;\n\n    public AndSpecification(IUserSpecification _left, IUserSpecification _right) {\n        this._left = _left;\n        this._right = _right;\n    }\n\n    @Override\n    public boolean isSatisfiedBy(User user) {\n        return _left.isSatisfiedBy(user) && _right.isSatisfiedBy(user);\n    }\n}\n\n\n```\n\n```\npackage com.bj.hz.specification.very;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:09 AM\n */\npublic class OrSpecification extends AbstractComposition {\n\n    private IUserSpecification _left;\n    private IUserSpecification _right;\n\n    public OrSpecification(IUserSpecification _left, IUserSpecification _right) {\n        this._left = _left;\n        this._right = _right;\n    }\n\n    @Override\n    public boolean isSatisfiedBy(User user) {\n        return _left.isSatisfiedBy(user) || _right.isSatisfiedBy(user);\n    }\n}\n\n```\n\n```\npackage com.bj.hz.specification.very;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:10 AM\n */\npublic class NotSpecification extends AbstractComposition {\n\n    private IUserSpecification userSpecification;\n\n    public NotSpecification(IUserSpecification userSpecification) {\n        this.userSpecification = userSpecification;\n    }\n\n    @Override\n    public boolean isSatisfiedBy(User user) {\n        return !userSpecification.isSatisfiedBy(user);\n    }\n}\n\n```\n* 根据名称查询\n```\npackage com.bj.hz.specification.very;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:29 AM\n */\npublic class FindByNameSpecification extends AbstractComposition {\n\n    private String name;\n\n    public FindByNameSpecification(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public boolean isSatisfiedBy(User user) {\n        return user.getName().equals(name);\n    }\n}\n\n```\n* 根据大于给定的年龄查询\n```\npackage com.bj.hz.specification.very;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:31 AM\n */\npublic class FindByAgeThanSpecification extends AbstractComposition {\n\n    private int age;\n\n    public FindByAgeThanSpecification(int age) {\n        this.age = age;\n    }\n\n    @Override\n    public boolean isSatisfiedBy(User user) {\n        return user.getAge()>age;\n    }\n}\n\n```\n\n* 场景类具体实现\n```\npackage com.bj.hz.specification.very;\n\n\n\n\nimport java.util.ArrayList;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-18\n * @time: 10:12 PM\n */\npublic class Client {\n    public static void main(String[] args) {\n        ArrayList<User> users = new ArrayList<>();\n        users.add(new User(\"121\", 3));\n        users.add(new User(\"犁牛\", 10));\n        users.add(new User(\"测试\", 18));\n        users.add(new User(\"hah\", 16));\n        users.add(new User(\"黄啦啦\", 19));\n        users.add(new User(\"吴啦啦\", 20));\n        System.out.println(\"========年龄大于16的==========\");\n        IUserProvider userProvider=new UserProvider(users);\n        for (User user:userProvider.findUser(new FindByNameSpecification(\"hah\").and(new FindByAgeThanSpecification(14)))){\n            System.out.println(user);\n        }\n\n    }\n}\n\n```\n\n\n\n","slug":"规格模式-2018-07-19","published":1,"updated":"2019-09-23T06:59:03.905Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0w29rl1002huup2qlupndkg","content":"<h2 id=\"设计模式之规格模式\"><a href=\"#设计模式之规格模式\" class=\"headerlink\" title=\"设计模式之规格模式\"></a>设计模式之规格模式</h2><ul>\n<li>23中模式之外的新模式</li>\n</ul>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>在一系列对象中根据条件搜索！类似sql，但不同的是从内存中的对象进行搜索<br>具体类似于LINQ（Language Integrated Query）语言集成查询<br><a id=\"more\"></a></p>\n<h3 id=\"初步实践\"><a href=\"#初步实践\" class=\"headerlink\" title=\"初步实践\"></a>初步实践</h3><blockquote>\n<p>1.创建一个接口，实现按照某种条件筛选：IUserProvider<br>  2.实现以上接口:UserProvider，通过具体的对象类进行抽象方法的实现（例如：遍历实体类数组，进行判断，然后返回结果数组或列表）<br>  3.实现具体对象，类似User实体类<br>  4.实现场景类，初始化一个拥有User的数组或列表，实例化UserProvider，并使用相关方法，获取结果</p>\n</blockquote>\n<ul>\n<li><p>请注意以上实现，我们可以发现一旦业务发生变更，我们需要改对应的接口方法、需要实现对应的接口，很不容易进行扩展。</p>\n</li>\n<li><p>第二种：那么我们是否可以将对应的搜索条件进行封装，创建一个接口：IUserSpecification，定义是否满足的方法，返回bool值，这样就可以在多种条件下（业务变更等），进行无缝扩展。只用实现该接口，就可以扩展多个条件类。</p>\n</li>\n<li><p>对于类似于sql的多个条件查询下，在数据量大的情况下容易造成性能较差，因为需要经过好多轮循环</p>\n</li>\n<li><p>第三种：可以知道一般条件组合，基本离不开与或非、这三种模式是固定的，我们可以通过这三种模式进行统一的条件封装。</p>\n<blockquote>\n<p>1.我们创建一个条件规格接口：IUserSpecification,实现判断是否满足，返回bool值<br>2.创建一个抽象类实现IUserSpecification：ComposionSpecificaiton，并且通过模板方法实现与或非三种条件规格的生成，具体接口的实现由具体类来实现。此抽象类依赖于具体的实现（请按照实际情况分析，不要死学）<br>3.继承ComposionSpecificaiton，实现具体的判断方法<br>4.在场景类中，通过条件规格的实现类，使用与或非方法对多个条件进行封装，然后进行计算</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"第三种方法最优，使用了组合模式、策略模式、模板模式这三种模式组合成了规格模式。\"><a href=\"#第三种方法最优，使用了组合模式、策略模式、模板模式这三种模式组合成了规格模式。\" class=\"headerlink\" title=\"第三种方法最优，使用了组合模式、策略模式、模板模式这三种模式组合成了规格模式。\"></a>第三种方法最优，使用了组合模式、策略模式、模板模式这三种模式组合成了规格模式。</h4><h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><img src=\"/images/2018-07-19-2.jpg\" alt=\"第二种类图\"></p>\n<center>第二种类图</center>\n\n<p><img src=\"/images/2018-07-19-1.jpg\" alt=\"第三种类图\"></p>\n<center>第三种类图</center>\n\n\n<h3 id=\"以下为代码\"><a href=\"#以下为代码\" class=\"headerlink\" title=\"以下为代码\"></a>以下为代码</h3><ul>\n<li><p>定义一个用户：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bj.hz.specification.very;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-07-18</span><br><span class=\"line\"> * @time: 9:48 PM</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class User &#123;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    private int age;</span><br><span class=\"line\"></span><br><span class=\"line\">    public User(String name, int age) &#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">        this.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getName() &#123;</span><br><span class=\"line\">        return name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setName(String name) &#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getAge() &#123;</span><br><span class=\"line\">        return age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setAge(int age) &#123;</span><br><span class=\"line\">        this.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String toString() &#123;</span><br><span class=\"line\">        return &quot;User&#123;&quot; +</span><br><span class=\"line\">                &quot;name=&apos;&quot; + name + &apos;\\&apos;&apos; +</span><br><span class=\"line\">                &quot;, age=&quot; + age +</span><br><span class=\"line\">                &apos;&#125;&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义一个查询提供类接口以及实现</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bj.hz.specification.very;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-07-18</span><br><span class=\"line\"> * @time: 10:07 PM</span><br><span class=\"line\"> */</span><br><span class=\"line\">public interface IUserProvider &#123;</span><br><span class=\"line\">    ArrayList&lt;User&gt; findUser(IUserSpecification specification);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>提供实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bj.hz.specification.very;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-07-18</span><br><span class=\"line\"> * @time: 10:09 PM</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class UserProvider implements IUserProvider &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private ArrayList&lt;User&gt; users;</span><br><span class=\"line\"></span><br><span class=\"line\">    public UserProvider(ArrayList&lt;User&gt; users) &#123;</span><br><span class=\"line\">        this.users = users;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public ArrayList&lt;User&gt; findUser(IUserSpecification specification) &#123;</span><br><span class=\"line\">        ArrayList&lt;User&gt; result=new ArrayList&lt;&gt;();</span><br><span class=\"line\">        for (User u:users)&#123;</span><br><span class=\"line\">            if (specification.isSatisfiedBy(u))&#123;</span><br><span class=\"line\">                result.add(u);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>规格条件接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bj.hz.specification.very;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:为了适应未来变化的需求，将运算封装到接口之内</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-07-18</span><br><span class=\"line\"> * @time: 10:02 PM</span><br><span class=\"line\"> */</span><br><span class=\"line\">public interface IUserSpecification &#123;</span><br><span class=\"line\">    public boolean isSatisfiedBy(User user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>组合模式的接口，其实可以定义三个装饰器（请自行想象）分别实现 与或非</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bj.hz.specification.very;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-07-19</span><br><span class=\"line\"> * @time: 9:06 AM</span><br><span class=\"line\"> */</span><br><span class=\"line\">public abstract class AbstractComposition implements IUserSpecification &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public IUserSpecification and(IUserSpecification userSpecification)&#123;</span><br><span class=\"line\">        return new AndSpecification(this,userSpecification);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public IUserSpecification or(IUserSpecification userSpecification)&#123;</span><br><span class=\"line\">        return new OrSpecification(this,userSpecification);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public IUserSpecification not(IUserSpecification userSpecification)&#123;</span><br><span class=\"line\">        return new NotSpecification(this);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分别是与或非实现</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bj.hz.specification.very;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-07-19</span><br><span class=\"line\"> * @time: 9:08 AM</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class AndSpecification extends AbstractComposition &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private IUserSpecification _left;</span><br><span class=\"line\">    private IUserSpecification _right;</span><br><span class=\"line\"></span><br><span class=\"line\">    public AndSpecification(IUserSpecification _left, IUserSpecification _right) &#123;</span><br><span class=\"line\">        this._left = _left;</span><br><span class=\"line\">        this._right = _right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean isSatisfiedBy(User user) &#123;</span><br><span class=\"line\">        return _left.isSatisfiedBy(user) &amp;&amp; _right.isSatisfiedBy(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bj.hz.specification.very;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-07-19</span><br><span class=\"line\"> * @time: 9:09 AM</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class OrSpecification extends AbstractComposition &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private IUserSpecification _left;</span><br><span class=\"line\">    private IUserSpecification _right;</span><br><span class=\"line\"></span><br><span class=\"line\">    public OrSpecification(IUserSpecification _left, IUserSpecification _right) &#123;</span><br><span class=\"line\">        this._left = _left;</span><br><span class=\"line\">        this._right = _right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean isSatisfiedBy(User user) &#123;</span><br><span class=\"line\">        return _left.isSatisfiedBy(user) || _right.isSatisfiedBy(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bj.hz.specification.very;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-07-19</span><br><span class=\"line\"> * @time: 9:10 AM</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class NotSpecification extends AbstractComposition &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private IUserSpecification userSpecification;</span><br><span class=\"line\"></span><br><span class=\"line\">    public NotSpecification(IUserSpecification userSpecification) &#123;</span><br><span class=\"line\">        this.userSpecification = userSpecification;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean isSatisfiedBy(User user) &#123;</span><br><span class=\"line\">        return !userSpecification.isSatisfiedBy(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>根据名称查询</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bj.hz.specification.very;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-07-19</span><br><span class=\"line\"> * @time: 9:29 AM</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class FindByNameSpecification extends AbstractComposition &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    public FindByNameSpecification(String name) &#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean isSatisfiedBy(User user) &#123;</span><br><span class=\"line\">        return user.getName().equals(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>根据大于给定的年龄查询</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bj.hz.specification.very;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-07-19</span><br><span class=\"line\"> * @time: 9:31 AM</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class FindByAgeThanSpecification extends AbstractComposition &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int age;</span><br><span class=\"line\"></span><br><span class=\"line\">    public FindByAgeThanSpecification(int age) &#123;</span><br><span class=\"line\">        this.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean isSatisfiedBy(User user) &#123;</span><br><span class=\"line\">        return user.getAge()&gt;age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>场景类具体实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bj.hz.specification.very;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-07-18</span><br><span class=\"line\"> * @time: 10:12 PM</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class Client &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        ArrayList&lt;User&gt; users = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        users.add(new User(&quot;121&quot;, 3));</span><br><span class=\"line\">        users.add(new User(&quot;犁牛&quot;, 10));</span><br><span class=\"line\">        users.add(new User(&quot;测试&quot;, 18));</span><br><span class=\"line\">        users.add(new User(&quot;hah&quot;, 16));</span><br><span class=\"line\">        users.add(new User(&quot;黄啦啦&quot;, 19));</span><br><span class=\"line\">        users.add(new User(&quot;吴啦啦&quot;, 20));</span><br><span class=\"line\">        System.out.println(&quot;========年龄大于16的==========&quot;);</span><br><span class=\"line\">        IUserProvider userProvider=new UserProvider(users);</span><br><span class=\"line\">        for (User user:userProvider.findUser(new FindByNameSpecification(&quot;hah&quot;).and(new FindByAgeThanSpecification(14))))&#123;</span><br><span class=\"line\">            System.out.println(user);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"<h2 id=\"设计模式之规格模式\"><a href=\"#设计模式之规格模式\" class=\"headerlink\" title=\"设计模式之规格模式\"></a>设计模式之规格模式</h2><ul>\n<li>23中模式之外的新模式</li>\n</ul>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>在一系列对象中根据条件搜索！类似sql，但不同的是从内存中的对象进行搜索<br>具体类似于LINQ（Language Integrated Query）语言集成查询<br>","more":"</p>\n<h3 id=\"初步实践\"><a href=\"#初步实践\" class=\"headerlink\" title=\"初步实践\"></a>初步实践</h3><blockquote>\n<p>1.创建一个接口，实现按照某种条件筛选：IUserProvider<br>  2.实现以上接口:UserProvider，通过具体的对象类进行抽象方法的实现（例如：遍历实体类数组，进行判断，然后返回结果数组或列表）<br>  3.实现具体对象，类似User实体类<br>  4.实现场景类，初始化一个拥有User的数组或列表，实例化UserProvider，并使用相关方法，获取结果</p>\n</blockquote>\n<ul>\n<li><p>请注意以上实现，我们可以发现一旦业务发生变更，我们需要改对应的接口方法、需要实现对应的接口，很不容易进行扩展。</p>\n</li>\n<li><p>第二种：那么我们是否可以将对应的搜索条件进行封装，创建一个接口：IUserSpecification，定义是否满足的方法，返回bool值，这样就可以在多种条件下（业务变更等），进行无缝扩展。只用实现该接口，就可以扩展多个条件类。</p>\n</li>\n<li><p>对于类似于sql的多个条件查询下，在数据量大的情况下容易造成性能较差，因为需要经过好多轮循环</p>\n</li>\n<li><p>第三种：可以知道一般条件组合，基本离不开与或非、这三种模式是固定的，我们可以通过这三种模式进行统一的条件封装。</p>\n<blockquote>\n<p>1.我们创建一个条件规格接口：IUserSpecification,实现判断是否满足，返回bool值<br>2.创建一个抽象类实现IUserSpecification：ComposionSpecificaiton，并且通过模板方法实现与或非三种条件规格的生成，具体接口的实现由具体类来实现。此抽象类依赖于具体的实现（请按照实际情况分析，不要死学）<br>3.继承ComposionSpecificaiton，实现具体的判断方法<br>4.在场景类中，通过条件规格的实现类，使用与或非方法对多个条件进行封装，然后进行计算</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"第三种方法最优，使用了组合模式、策略模式、模板模式这三种模式组合成了规格模式。\"><a href=\"#第三种方法最优，使用了组合模式、策略模式、模板模式这三种模式组合成了规格模式。\" class=\"headerlink\" title=\"第三种方法最优，使用了组合模式、策略模式、模板模式这三种模式组合成了规格模式。\"></a>第三种方法最优，使用了组合模式、策略模式、模板模式这三种模式组合成了规格模式。</h4><h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><img src=\"/images/2018-07-19-2.jpg\" alt=\"第二种类图\"></p>\n<center>第二种类图</center>\n\n<p><img src=\"/images/2018-07-19-1.jpg\" alt=\"第三种类图\"></p>\n<center>第三种类图</center>\n\n\n<h3 id=\"以下为代码\"><a href=\"#以下为代码\" class=\"headerlink\" title=\"以下为代码\"></a>以下为代码</h3><ul>\n<li><p>定义一个用户：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bj.hz.specification.very;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-07-18</span><br><span class=\"line\"> * @time: 9:48 PM</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class User &#123;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    private int age;</span><br><span class=\"line\"></span><br><span class=\"line\">    public User(String name, int age) &#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">        this.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getName() &#123;</span><br><span class=\"line\">        return name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setName(String name) &#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getAge() &#123;</span><br><span class=\"line\">        return age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setAge(int age) &#123;</span><br><span class=\"line\">        this.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String toString() &#123;</span><br><span class=\"line\">        return &quot;User&#123;&quot; +</span><br><span class=\"line\">                &quot;name=&apos;&quot; + name + &apos;\\&apos;&apos; +</span><br><span class=\"line\">                &quot;, age=&quot; + age +</span><br><span class=\"line\">                &apos;&#125;&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义一个查询提供类接口以及实现</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bj.hz.specification.very;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-07-18</span><br><span class=\"line\"> * @time: 10:07 PM</span><br><span class=\"line\"> */</span><br><span class=\"line\">public interface IUserProvider &#123;</span><br><span class=\"line\">    ArrayList&lt;User&gt; findUser(IUserSpecification specification);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>提供实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bj.hz.specification.very;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-07-18</span><br><span class=\"line\"> * @time: 10:09 PM</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class UserProvider implements IUserProvider &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private ArrayList&lt;User&gt; users;</span><br><span class=\"line\"></span><br><span class=\"line\">    public UserProvider(ArrayList&lt;User&gt; users) &#123;</span><br><span class=\"line\">        this.users = users;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public ArrayList&lt;User&gt; findUser(IUserSpecification specification) &#123;</span><br><span class=\"line\">        ArrayList&lt;User&gt; result=new ArrayList&lt;&gt;();</span><br><span class=\"line\">        for (User u:users)&#123;</span><br><span class=\"line\">            if (specification.isSatisfiedBy(u))&#123;</span><br><span class=\"line\">                result.add(u);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>规格条件接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bj.hz.specification.very;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:为了适应未来变化的需求，将运算封装到接口之内</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-07-18</span><br><span class=\"line\"> * @time: 10:02 PM</span><br><span class=\"line\"> */</span><br><span class=\"line\">public interface IUserSpecification &#123;</span><br><span class=\"line\">    public boolean isSatisfiedBy(User user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>组合模式的接口，其实可以定义三个装饰器（请自行想象）分别实现 与或非</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bj.hz.specification.very;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-07-19</span><br><span class=\"line\"> * @time: 9:06 AM</span><br><span class=\"line\"> */</span><br><span class=\"line\">public abstract class AbstractComposition implements IUserSpecification &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public IUserSpecification and(IUserSpecification userSpecification)&#123;</span><br><span class=\"line\">        return new AndSpecification(this,userSpecification);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public IUserSpecification or(IUserSpecification userSpecification)&#123;</span><br><span class=\"line\">        return new OrSpecification(this,userSpecification);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public IUserSpecification not(IUserSpecification userSpecification)&#123;</span><br><span class=\"line\">        return new NotSpecification(this);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分别是与或非实现</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bj.hz.specification.very;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-07-19</span><br><span class=\"line\"> * @time: 9:08 AM</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class AndSpecification extends AbstractComposition &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private IUserSpecification _left;</span><br><span class=\"line\">    private IUserSpecification _right;</span><br><span class=\"line\"></span><br><span class=\"line\">    public AndSpecification(IUserSpecification _left, IUserSpecification _right) &#123;</span><br><span class=\"line\">        this._left = _left;</span><br><span class=\"line\">        this._right = _right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean isSatisfiedBy(User user) &#123;</span><br><span class=\"line\">        return _left.isSatisfiedBy(user) &amp;&amp; _right.isSatisfiedBy(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bj.hz.specification.very;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-07-19</span><br><span class=\"line\"> * @time: 9:09 AM</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class OrSpecification extends AbstractComposition &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private IUserSpecification _left;</span><br><span class=\"line\">    private IUserSpecification _right;</span><br><span class=\"line\"></span><br><span class=\"line\">    public OrSpecification(IUserSpecification _left, IUserSpecification _right) &#123;</span><br><span class=\"line\">        this._left = _left;</span><br><span class=\"line\">        this._right = _right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean isSatisfiedBy(User user) &#123;</span><br><span class=\"line\">        return _left.isSatisfiedBy(user) || _right.isSatisfiedBy(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bj.hz.specification.very;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-07-19</span><br><span class=\"line\"> * @time: 9:10 AM</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class NotSpecification extends AbstractComposition &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private IUserSpecification userSpecification;</span><br><span class=\"line\"></span><br><span class=\"line\">    public NotSpecification(IUserSpecification userSpecification) &#123;</span><br><span class=\"line\">        this.userSpecification = userSpecification;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean isSatisfiedBy(User user) &#123;</span><br><span class=\"line\">        return !userSpecification.isSatisfiedBy(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>根据名称查询</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bj.hz.specification.very;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-07-19</span><br><span class=\"line\"> * @time: 9:29 AM</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class FindByNameSpecification extends AbstractComposition &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    public FindByNameSpecification(String name) &#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean isSatisfiedBy(User user) &#123;</span><br><span class=\"line\">        return user.getName().equals(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>根据大于给定的年龄查询</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bj.hz.specification.very;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-07-19</span><br><span class=\"line\"> * @time: 9:31 AM</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class FindByAgeThanSpecification extends AbstractComposition &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int age;</span><br><span class=\"line\"></span><br><span class=\"line\">    public FindByAgeThanSpecification(int age) &#123;</span><br><span class=\"line\">        this.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean isSatisfiedBy(User user) &#123;</span><br><span class=\"line\">        return user.getAge()&gt;age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>场景类具体实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bj.hz.specification.very;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-07-18</span><br><span class=\"line\"> * @time: 10:12 PM</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class Client &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        ArrayList&lt;User&gt; users = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        users.add(new User(&quot;121&quot;, 3));</span><br><span class=\"line\">        users.add(new User(&quot;犁牛&quot;, 10));</span><br><span class=\"line\">        users.add(new User(&quot;测试&quot;, 18));</span><br><span class=\"line\">        users.add(new User(&quot;hah&quot;, 16));</span><br><span class=\"line\">        users.add(new User(&quot;黄啦啦&quot;, 19));</span><br><span class=\"line\">        users.add(new User(&quot;吴啦啦&quot;, 20));</span><br><span class=\"line\">        System.out.println(&quot;========年龄大于16的==========&quot;);</span><br><span class=\"line\">        IUserProvider userProvider=new UserProvider(users);</span><br><span class=\"line\">        for (User user:userProvider.findUser(new FindByNameSpecification(&quot;hah&quot;).and(new FindByAgeThanSpecification(14))))&#123;</span><br><span class=\"line\">            System.out.println(user);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"设计模式之雇工模式","date":"2018-07-21T00:36:02.000Z","_content":"\n## 设计模式之雇工模式\n* 23中模式之外的新模式\n\n### 简介\n雇工模式也叫做仆人模式：雇工模式是行为模式的一种，它为一组类提供通用的功能，而不需要类实现这些功能，他是命令模式的一种扩展。\n> 类似于厨师、裁缝、园丁等都是一组类，具有清洁的能力，但是我们并没有实现，使用雇工模式，就是简化版的命令模式。让被服务对象实现具体的方法，使用雇工来干活\n<!--more-->\n\n### 类图\n![雇工模式示意图](/images/designPatterns/2018-07-19-4.png)\n<center>雇工模式示意图</center>\n\n### 代码\n\n具有一组能力的对象，以及对应对象的实现\nIserviced\n```\npackage com.bj.hz.hire;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:08 PM\n */\npublic interface Iserviced {\n    public void cleaned();\n}\n\n\npackage com.bj.hz.hire;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:15 PM\n */\npublic class Garden implements Iserviced {\n    @Override\n    public void cleaned() {\n        System.out.println(\"花园被打扫了\");\n    }\n}\n\n\n\npackage com.bj.hz.hire;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:17 PM\n */\npublic class Kitchen implements Iserviced {\n    @Override\n    public void cleaned() {\n        System.out.println(\"厨房被打扫了\");\n    }\n}\n\n\n```\n\n雇工 Servant\n```\npackage com.bj.hz.hire;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:14 PM\n */\npublic class ServantHire {\n    public void clean(Iserviced serviced){\n        serviced.cleaned();\n    }\n}\n```\n\n场景类\nCient\n```\npackage com.bj.hz.hire;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:15 PM\n */\npublic class Client {\n    public static void main(String[] args) {\n\n    }\n}\n```\n\n\n\n","source":"_posts/雇工模式-2018-07-21.md","raw":"---\ntitle: 设计模式之雇工模式\ndate: 2018-07-21 08:36:02\ntags: 雇工模式\ncategories: \"power design\"\n---\n\n## 设计模式之雇工模式\n* 23中模式之外的新模式\n\n### 简介\n雇工模式也叫做仆人模式：雇工模式是行为模式的一种，它为一组类提供通用的功能，而不需要类实现这些功能，他是命令模式的一种扩展。\n> 类似于厨师、裁缝、园丁等都是一组类，具有清洁的能力，但是我们并没有实现，使用雇工模式，就是简化版的命令模式。让被服务对象实现具体的方法，使用雇工来干活\n<!--more-->\n\n### 类图\n![雇工模式示意图](/images/designPatterns/2018-07-19-4.png)\n<center>雇工模式示意图</center>\n\n### 代码\n\n具有一组能力的对象，以及对应对象的实现\nIserviced\n```\npackage com.bj.hz.hire;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:08 PM\n */\npublic interface Iserviced {\n    public void cleaned();\n}\n\n\npackage com.bj.hz.hire;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:15 PM\n */\npublic class Garden implements Iserviced {\n    @Override\n    public void cleaned() {\n        System.out.println(\"花园被打扫了\");\n    }\n}\n\n\n\npackage com.bj.hz.hire;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:17 PM\n */\npublic class Kitchen implements Iserviced {\n    @Override\n    public void cleaned() {\n        System.out.println(\"厨房被打扫了\");\n    }\n}\n\n\n```\n\n雇工 Servant\n```\npackage com.bj.hz.hire;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:14 PM\n */\npublic class ServantHire {\n    public void clean(Iserviced serviced){\n        serviced.cleaned();\n    }\n}\n```\n\n场景类\nCient\n```\npackage com.bj.hz.hire;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:15 PM\n */\npublic class Client {\n    public static void main(String[] args) {\n\n    }\n}\n```\n\n\n\n","slug":"雇工模式-2018-07-21","published":1,"updated":"2019-09-23T06:58:55.474Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0w29rl2002juup298z5onrx","content":"<h2 id=\"设计模式之雇工模式\"><a href=\"#设计模式之雇工模式\" class=\"headerlink\" title=\"设计模式之雇工模式\"></a>设计模式之雇工模式</h2><ul>\n<li>23中模式之外的新模式</li>\n</ul>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>雇工模式也叫做仆人模式：雇工模式是行为模式的一种，它为一组类提供通用的功能，而不需要类实现这些功能，他是命令模式的一种扩展。</p>\n<blockquote>\n<p>类似于厨师、裁缝、园丁等都是一组类，具有清洁的能力，但是我们并没有实现，使用雇工模式，就是简化版的命令模式。让被服务对象实现具体的方法，使用雇工来干活<br><a id=\"more\"></a></p>\n</blockquote>\n<h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><img src=\"/images/designPatterns/2018-07-19-4.png\" alt=\"雇工模式示意图\"></p>\n<center>雇工模式示意图</center>\n\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>具有一组能力的对象，以及对应对象的实现<br>Iserviced<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bj.hz.hire;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-07-19</span><br><span class=\"line\"> * @time: 9:08 PM</span><br><span class=\"line\"> */</span><br><span class=\"line\">public interface Iserviced &#123;</span><br><span class=\"line\">    public void cleaned();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">package com.bj.hz.hire;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-07-19</span><br><span class=\"line\"> * @time: 9:15 PM</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class Garden implements Iserviced &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void cleaned() &#123;</span><br><span class=\"line\">        System.out.println(&quot;花园被打扫了&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">package com.bj.hz.hire;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-07-19</span><br><span class=\"line\"> * @time: 9:17 PM</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class Kitchen implements Iserviced &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void cleaned() &#123;</span><br><span class=\"line\">        System.out.println(&quot;厨房被打扫了&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>雇工 Servant<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bj.hz.hire;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-07-19</span><br><span class=\"line\"> * @time: 9:14 PM</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class ServantHire &#123;</span><br><span class=\"line\">    public void clean(Iserviced serviced)&#123;</span><br><span class=\"line\">        serviced.cleaned();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>场景类<br>Cient<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bj.hz.hire;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-07-19</span><br><span class=\"line\"> * @time: 9:15 PM</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class Client &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"<h2 id=\"设计模式之雇工模式\"><a href=\"#设计模式之雇工模式\" class=\"headerlink\" title=\"设计模式之雇工模式\"></a>设计模式之雇工模式</h2><ul>\n<li>23中模式之外的新模式</li>\n</ul>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>雇工模式也叫做仆人模式：雇工模式是行为模式的一种，它为一组类提供通用的功能，而不需要类实现这些功能，他是命令模式的一种扩展。</p>\n<blockquote>\n<p>类似于厨师、裁缝、园丁等都是一组类，具有清洁的能力，但是我们并没有实现，使用雇工模式，就是简化版的命令模式。让被服务对象实现具体的方法，使用雇工来干活<br>","more":"</p>\n</blockquote>\n<h3 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h3><p><img src=\"/images/designPatterns/2018-07-19-4.png\" alt=\"雇工模式示意图\"></p>\n<center>雇工模式示意图</center>\n\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>具有一组能力的对象，以及对应对象的实现<br>Iserviced<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bj.hz.hire;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-07-19</span><br><span class=\"line\"> * @time: 9:08 PM</span><br><span class=\"line\"> */</span><br><span class=\"line\">public interface Iserviced &#123;</span><br><span class=\"line\">    public void cleaned();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">package com.bj.hz.hire;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-07-19</span><br><span class=\"line\"> * @time: 9:15 PM</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class Garden implements Iserviced &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void cleaned() &#123;</span><br><span class=\"line\">        System.out.println(&quot;花园被打扫了&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">package com.bj.hz.hire;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-07-19</span><br><span class=\"line\"> * @time: 9:17 PM</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class Kitchen implements Iserviced &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void cleaned() &#123;</span><br><span class=\"line\">        System.out.println(&quot;厨房被打扫了&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>雇工 Servant<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bj.hz.hire;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-07-19</span><br><span class=\"line\"> * @time: 9:14 PM</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class ServantHire &#123;</span><br><span class=\"line\">    public void clean(Iserviced serviced)&#123;</span><br><span class=\"line\">        serviced.cleaned();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>场景类<br>Cient<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bj.hz.hire;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created with hzz</span><br><span class=\"line\"> * Description:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author: huangzhe</span><br><span class=\"line\"> * @date: 2018-07-19</span><br><span class=\"line\"> * @time: 9:15 PM</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class Client &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"设计模式之黑板模式","date":"2018-07-22T00:36:02.000Z","_content":"\n## 设计模式之黑板模式\n* 23中模式之外的新模式\n\n### 简介\n黑板模式是观察者模式的一个扩展，允许消息的读写同时进行，广泛地交互消息\n就像一个黑板，任何一个老师都可以写东西，同学都可以看东西，在时间上和空间上彻底解耦\n\n<!--more-->\n\n### 示意图\n![黑板模式示意图](/images/designPatterns/2018-07-22-1.png)\n<center>黑板模式示意图</center>\n\n### 最佳实践\n* 使用数据库作为黑板，大量消息访问下回影响性能。\n* 使用消息队列作为黑板，订阅发布式\n\n> 消息队列：使用推模式、拉模式实现，具体请参考一些消息队列，kafka\n\n","source":"_posts/黑板模式-2018-07-22.md","raw":"---\ntitle: 设计模式之黑板模式\ndate: 2018-07-22 08:36:02\ntags: 黑板模式\ncategories: \"power design\"\n---\n\n## 设计模式之黑板模式\n* 23中模式之外的新模式\n\n### 简介\n黑板模式是观察者模式的一个扩展，允许消息的读写同时进行，广泛地交互消息\n就像一个黑板，任何一个老师都可以写东西，同学都可以看东西，在时间上和空间上彻底解耦\n\n<!--more-->\n\n### 示意图\n![黑板模式示意图](/images/designPatterns/2018-07-22-1.png)\n<center>黑板模式示意图</center>\n\n### 最佳实践\n* 使用数据库作为黑板，大量消息访问下回影响性能。\n* 使用消息队列作为黑板，订阅发布式\n\n> 消息队列：使用推模式、拉模式实现，具体请参考一些消息队列，kafka\n\n","slug":"黑板模式-2018-07-22","published":1,"updated":"2019-09-23T06:59:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0w29rl4002luup2o6av8d7l","content":"<h2 id=\"设计模式之黑板模式\"><a href=\"#设计模式之黑板模式\" class=\"headerlink\" title=\"设计模式之黑板模式\"></a>设计模式之黑板模式</h2><ul>\n<li>23中模式之外的新模式</li>\n</ul>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>黑板模式是观察者模式的一个扩展，允许消息的读写同时进行，广泛地交互消息<br>就像一个黑板，任何一个老师都可以写东西，同学都可以看东西，在时间上和空间上彻底解耦</p>\n<a id=\"more\"></a>\n<h3 id=\"示意图\"><a href=\"#示意图\" class=\"headerlink\" title=\"示意图\"></a>示意图</h3><p><img src=\"/images/designPatterns/2018-07-22-1.png\" alt=\"黑板模式示意图\"></p>\n<center>黑板模式示意图</center>\n\n<h3 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h3><ul>\n<li>使用数据库作为黑板，大量消息访问下回影响性能。</li>\n<li>使用消息队列作为黑板，订阅发布式</li>\n</ul>\n<blockquote>\n<p>消息队列：使用推模式、拉模式实现，具体请参考一些消息队列，kafka</p>\n</blockquote>\n","site":{"data":{"next":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":true,"appid":"gMYAPacVqPWUwIv6s3NvPrvi-MdYXbMMI","appkey":"aCFpsgXDS3IUgcyxmeI99BS8","notify":false,"verify":false,"placeholder":"Just go go go comment","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg","fireworks":true,"love":false}}},"excerpt":"<h2 id=\"设计模式之黑板模式\"><a href=\"#设计模式之黑板模式\" class=\"headerlink\" title=\"设计模式之黑板模式\"></a>设计模式之黑板模式</h2><ul>\n<li>23中模式之外的新模式</li>\n</ul>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>黑板模式是观察者模式的一个扩展，允许消息的读写同时进行，广泛地交互消息<br>就像一个黑板，任何一个老师都可以写东西，同学都可以看东西，在时间上和空间上彻底解耦</p>","more":"<h3 id=\"示意图\"><a href=\"#示意图\" class=\"headerlink\" title=\"示意图\"></a>示意图</h3><p><img src=\"/images/designPatterns/2018-07-22-1.png\" alt=\"黑板模式示意图\"></p>\n<center>黑板模式示意图</center>\n\n<h3 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h3><ul>\n<li>使用数据库作为黑板，大量消息访问下回影响性能。</li>\n<li>使用消息队列作为黑板，订阅发布式</li>\n</ul>\n<blockquote>\n<p>消息队列：使用推模式、拉模式实现，具体请参考一些消息队列，kafka</p>\n</blockquote>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck0w29rjs0002uup2mv3hxdib","category_id":"ck0w29rjv0003uup2i5yijrwj","_id":"ck0w29rk8000luup21zo394n3"},{"post_id":"ck0w29rjy0006uup2a08wnz6l","category_id":"ck0w29rjv0003uup2i5yijrwj","_id":"ck0w29rkd000wuup2ftvz5q3m"},{"post_id":"ck0w29rjy0006uup2a08wnz6l","category_id":"ck0w29rk8000kuup2mv76b7r1","_id":"ck0w29rkf0010uup2jijxfo0i"},{"post_id":"ck0w29rjo0000uup29kvpkpz3","category_id":"ck0w29rjv0003uup2i5yijrwj","_id":"ck0w29rkg0013uup2ilrvc33h"},{"post_id":"ck0w29rjo0000uup29kvpkpz3","category_id":"ck0w29rkb000quup2bulb770a","_id":"ck0w29rkh0017uup21d0dkmpk"},{"post_id":"ck0w29rjz0007uup2xwygfldt","category_id":"ck0w29rjv0003uup2i5yijrwj","_id":"ck0w29rkj001auup2pimvq0hf"},{"post_id":"ck0w29rjz0007uup2xwygfldt","category_id":"ck0w29rke000xuup2saqp19fv","_id":"ck0w29rkk001euup26urqq69e"},{"post_id":"ck0w29rk2000buup2781y904n","category_id":"ck0w29rjv0003uup2i5yijrwj","_id":"ck0w29rkn001kuup2l0lh35wc"},{"post_id":"ck0w29rk2000buup2781y904n","category_id":"ck0w29rkg0015uup2rwrw58c0","_id":"ck0w29rko001nuup2aipo18a6"},{"post_id":"ck0w29rkj001buup2tron0trj","category_id":"ck0w29rjv0003uup2i5yijrwj","_id":"ck0w29rkq001quup2tk1vjc15"},{"post_id":"ck0w29rk4000duup21p2gdxbs","category_id":"ck0w29rjv0003uup2i5yijrwj","_id":"ck0w29rkr001uuup22s16jw52"},{"post_id":"ck0w29rk4000duup21p2gdxbs","category_id":"ck0w29rkk001duup2231jdts3","_id":"ck0w29rkt001yuup2uly8wri2"},{"post_id":"ck0w29rk6000huup2d4pqdrvs","category_id":"ck0w29rjv0003uup2i5yijrwj","_id":"ck0w29rku0021uup20zd9w64c"},{"post_id":"ck0w29rk6000huup2d4pqdrvs","category_id":"ck0w29rkn001luup2v9a118kc","_id":"ck0w29rkw0024uup2t0ebaijh"},{"post_id":"ck0w29rk7000juup2x6j9zrr6","category_id":"ck0w29rjv0003uup2i5yijrwj","_id":"ck0w29rl0002cuup2f7j2nc37"},{"post_id":"ck0w29rk7000juup2x6j9zrr6","category_id":"ck0w29rkt001zuup2yzuxi5wr","_id":"ck0w29rl1002fuup2gyl3fh4t"},{"post_id":"ck0w29rkf0011uup2xmi8l1b6","category_id":"ck0w29rl5002nuup2mzyn6hix","_id":"ck0w29rl6002uuup28uwxzyit"},{"post_id":"ck0w29rki0018uup2tkcdm6ta","category_id":"ck0w29rjv0003uup2i5yijrwj","_id":"ck0w29rl70031uup2h0hou4p9"},{"post_id":"ck0w29rki0018uup2tkcdm6ta","category_id":"ck0w29rl6002wuup26nwheijy","_id":"ck0w29rl80033uup28tye8l2n"},{"post_id":"ck0w29rkr001tuup2fcq483pl","category_id":"ck0w29rkx0027uup2ymaslgcx","_id":"ck0w29rlb003iuup2io9mhrvb"},{"post_id":"ck0w29rjx0005uup2mrldrg1n","category_id":"ck0w29rjv0003uup2i5yijrwj","_id":"ck0w29rld003ruup2imbksk3c"},{"post_id":"ck0w29rjx0005uup2mrldrg1n","category_id":"ck0w29rkq001suup2q12ijlbx","_id":"ck0w29rld003tuup267f80pdo"},{"post_id":"ck0w29rjx0005uup2mrldrg1n","category_id":"ck0w29rlb003huup2iaj1xos8","_id":"ck0w29rle003wuup2mht86hzj"},{"post_id":"ck0w29rkt0020uup2sw6hqw9l","category_id":"ck0w29rkx0027uup2ymaslgcx","_id":"ck0w29rle003yuup29lz66lgv"},{"post_id":"ck0w29rkw0026uup2omxax549","category_id":"ck0w29rld003vuup29hecli9b","_id":"ck0w29rlf0043uup2ap0o838w"},{"post_id":"ck0w29rkx0029uup2olgiic29","category_id":"ck0w29rlf0040uup2j56skd7a","_id":"ck0w29rlg0047uup2ioi6jlhn"},{"post_id":"ck0w29rka000puup29b0u3ovo","category_id":"ck0w29rkx0027uup2ymaslgcx","_id":"ck0w29rlh004cuup2sc9734oq"},{"post_id":"ck0w29rka000puup29b0u3ovo","category_id":"ck0w29rlg0044uup2uxoq5vqw","_id":"ck0w29rlh004duup2k4ehp0m4"},{"post_id":"ck0w29rkz002buup29a7skcoa","category_id":"ck0w29rlf0040uup2j56skd7a","_id":"ck0w29rli004fuup23bmu0y6j"},{"post_id":"ck0w29rl0002euup2ltisktsz","category_id":"ck0w29rld003vuup29hecli9b","_id":"ck0w29rli004juup2kxudzqmz"},{"post_id":"ck0w29rkd000vuup2mskj8nmp","category_id":"ck0w29rl0002duup2hkwzs5bf","_id":"ck0w29rlj004ouup20s8e7qun"},{"post_id":"ck0w29rkd000vuup2mskj8nmp","category_id":"ck0w29rlh004euup27nmsennl","_id":"ck0w29rlk004ruup2o4of33fm"},{"post_id":"ck0w29rl1002huup2qlupndkg","category_id":"ck0w29rlf0040uup2j56skd7a","_id":"ck0w29rlk004tuup25ng16jq1"},{"post_id":"ck0w29rl2002juup298z5onrx","category_id":"ck0w29rlf0040uup2j56skd7a","_id":"ck0w29rlm004wuup2129v4m80"},{"post_id":"ck0w29rke000zuup25akww5bb","category_id":"ck0w29rl0002duup2hkwzs5bf","_id":"ck0w29rlm004yuup2jqxccvq0"},{"post_id":"ck0w29rke000zuup25akww5bb","category_id":"ck0w29rlh004euup27nmsennl","_id":"ck0w29rlm004zuup26vhytza2"},{"post_id":"ck0w29rl4002luup2o6av8d7l","category_id":"ck0w29rlf0040uup2j56skd7a","_id":"ck0w29rln0050uup27tpvya6q"},{"post_id":"ck0w29rkk001fuup2n4ksim3m","category_id":"ck0w29rl7002zuup2zlb3n5ye","_id":"ck0w29rln0053uup2wjkmr1bc"},{"post_id":"ck0w29rkk001fuup2n4ksim3m","category_id":"ck0w29rln0051uup246woo3m8","_id":"ck0w29rln0055uup291xszkzp"},{"post_id":"ck0w29rkm001iuup2gjmb04pq","category_id":"ck0w29rkx0027uup2ymaslgcx","_id":"ck0w29rlo0056uup2y67aw67g"},{"post_id":"ck0w29rkm001iuup2gjmb04pq","category_id":"ck0w29rln0052uup2hkzl5oq9","_id":"ck0w29rlo0058uup2ll1my8ah"},{"post_id":"ck0w29rkn001muup2t7pknuw4","category_id":"ck0w29rl0002duup2hkwzs5bf","_id":"ck0w29rlo0059uup2i3414fxl"},{"post_id":"ck0w29rkn001muup2t7pknuw4","category_id":"ck0w29rln0054uup20mhjddof","_id":"ck0w29rlo005buup2e7avcmpq"},{"post_id":"ck0w29rks001xuup2sm7uslck","category_id":"ck0w29rkx0027uup2ymaslgcx","_id":"ck0w29rlp005euup2kciq4hid"},{"post_id":"ck0w29rks001xuup2sm7uslck","category_id":"ck0w29rlo005auup2tg0pyn99","_id":"ck0w29rlp005fuup2v69zpewq"},{"post_id":"ck0w29rku0022uup2ll21gehz","category_id":"ck0w29rkx0027uup2ymaslgcx","_id":"ck0w29rlp005guup22mhfjeih"},{"post_id":"ck0w29rku0022uup2ll21gehz","category_id":"ck0w29rlo005auup2tg0pyn99","_id":"ck0w29rlq005iuup2wociddai"},{"post_id":"ck0w29rkh0016uup2s8yuwt5m","category_id":"ck0w29rl6002ruup20ws3s1qi","_id":"ck0w29rlq005juup2jyl92ckc"},{"post_id":"ck0w29rkh0016uup2s8yuwt5m","category_id":"ck0w29rlm004xuup2idyjwjhr","_id":"ck0w29rlq005kuup25mxe3qv4"},{"post_id":"ck0w29rkh0016uup2s8yuwt5m","category_id":"ck0w29rlp005duup2dqz5mxpc","_id":"ck0w29rlq005luup2rgcgrsc4"},{"post_id":"ck0w29rkp001puup2ahhr75bw","category_id":"ck0w29rl90037uup2smigs422","_id":"ck0w29rlq005muup26k54vlx3"},{"post_id":"ck0w29rkp001puup2ahhr75bw","category_id":"ck0w29rlo0057uup25nmoega2","_id":"ck0w29rlq005nuup2dpdvamzh"},{"post_id":"ck0w29rkp001puup2ahhr75bw","category_id":"ck0w29rlp005huup2i3h663k2","_id":"ck0w29rlq005ouup29bfvh55g"}],"PostTag":[{"post_id":"ck0w29rjy0006uup2a08wnz6l","tag_id":"ck0w29rjw0004uup29gh6cxg1","_id":"ck0w29rk2000auup2zcc7o0q9"},{"post_id":"ck0w29rjo0000uup29kvpkpz3","tag_id":"ck0w29rjw0004uup29gh6cxg1","_id":"ck0w29rk4000cuup25hfd9ege"},{"post_id":"ck0w29rjz0007uup2xwygfldt","tag_id":"ck0w29rjw0004uup29gh6cxg1","_id":"ck0w29rk6000guup27b0knhaz"},{"post_id":"ck0w29rk2000buup2781y904n","tag_id":"ck0w29rjw0004uup29gh6cxg1","_id":"ck0w29rk7000iuup2zbuoz3i6"},{"post_id":"ck0w29rjs0002uup2mv3hxdib","tag_id":"ck0w29rjw0004uup29gh6cxg1","_id":"ck0w29rk9000muup231s32nqh"},{"post_id":"ck0w29rk4000duup21p2gdxbs","tag_id":"ck0w29rjw0004uup29gh6cxg1","_id":"ck0w29rka000ouup2xvkkgboq"},{"post_id":"ck0w29rk6000huup2d4pqdrvs","tag_id":"ck0w29rjw0004uup29gh6cxg1","_id":"ck0w29rkb000ruup2uiut0ewy"},{"post_id":"ck0w29rjx0005uup2mrldrg1n","tag_id":"ck0w29rjw0004uup29gh6cxg1","_id":"ck0w29rkc000uuup208km4kva"},{"post_id":"ck0w29rk7000juup2x6j9zrr6","tag_id":"ck0w29rjw0004uup29gh6cxg1","_id":"ck0w29rke000yuup259kb7kv3"},{"post_id":"ck0w29rka000puup29b0u3ovo","tag_id":"ck0w29rkc000tuup2cawkfyoh","_id":"ck0w29rkg0014uup2h4oxf4sq"},{"post_id":"ck0w29rkb000suup288i17knk","tag_id":"ck0w29rkg0012uup2dnleah1n","_id":"ck0w29rkk001cuup20lgfx7rg"},{"post_id":"ck0w29rki0018uup2tkcdm6ta","tag_id":"ck0w29rjw0004uup29gh6cxg1","_id":"ck0w29rkl001guup2uen63ekj"},{"post_id":"ck0w29rkj001buup2tron0trj","tag_id":"ck0w29rjw0004uup29gh6cxg1","_id":"ck0w29rkn001juup2ecii6wf5"},{"post_id":"ck0w29rkd000vuup2mskj8nmp","tag_id":"ck0w29rkj0019uup2yx6tb08z","_id":"ck0w29rkq001ruup2yq3mvqf0"},{"post_id":"ck0w29rkd000vuup2mskj8nmp","tag_id":"ck0w29rkl001huup26m9sakb5","_id":"ck0w29rks001vuup2w7sfq9t0"},{"post_id":"ck0w29rke000zuup25akww5bb","tag_id":"ck0w29rkl001huup26m9sakb5","_id":"ck0w29rkw0025uup2y73uwqgb"},{"post_id":"ck0w29rke000zuup25akww5bb","tag_id":"ck0w29rks001wuup2vtw9ryg0","_id":"ck0w29rkx0028uup2ygqci7jf"},{"post_id":"ck0w29rkf0011uup2xmi8l1b6","tag_id":"ck0w29rkw0023uup2fkn8cu5x","_id":"ck0w29rl5002muup23zbnwd3n"},{"post_id":"ck0w29rkf0011uup2xmi8l1b6","tag_id":"ck0w29rkz002auup2gx2jrtdh","_id":"ck0w29rl5002ouup240kgke9s"},{"post_id":"ck0w29rkf0011uup2xmi8l1b6","tag_id":"ck0w29rl1002guup2kkx4xzfy","_id":"ck0w29rl6002quup2uf25mie5"},{"post_id":"ck0w29rkh0016uup2s8yuwt5m","tag_id":"ck0w29rl4002kuup2zb4ftufl","_id":"ck0w29rl6002suup2y4tjgu4v"},{"post_id":"ck0w29rkk001fuup2n4ksim3m","tag_id":"ck0w29rl5002puup29vaqyed8","_id":"ck0w29rl6002vuup220r0799c"},{"post_id":"ck0w29rkm001iuup2gjmb04pq","tag_id":"ck0w29rl6002tuup2nawo1l9p","_id":"ck0w29rl7002yuup2zd0eo2kj"},{"post_id":"ck0w29rkn001muup2t7pknuw4","tag_id":"ck0w29rl7002xuup2npqx9iy8","_id":"ck0w29rl90038uup2uy05v17e"},{"post_id":"ck0w29rkn001muup2t7pknuw4","tag_id":"ck0w29rl70030uup2ozc0qp1j","_id":"ck0w29rl90039uup25x2ethom"},{"post_id":"ck0w29rkn001muup2t7pknuw4","tag_id":"ck0w29rl80034uup2n4j2mz0l","_id":"ck0w29rl9003cuup214hzbl8a"},{"post_id":"ck0w29rkp001puup2ahhr75bw","tag_id":"ck0w29rl80036uup2h9ydbumf","_id":"ck0w29rla003duup21ro8zfr3"},{"post_id":"ck0w29rkr001tuup2fcq483pl","tag_id":"ck0w29rl9003auup2g8haxwsy","_id":"ck0w29rlb003juup2qt6nis25"},{"post_id":"ck0w29rkr001tuup2fcq483pl","tag_id":"ck0w29rkc000tuup2cawkfyoh","_id":"ck0w29rlb003kuup26bk1zio4"},{"post_id":"ck0w29rkr001tuup2fcq483pl","tag_id":"ck0w29rl6002tuup2nawo1l9p","_id":"ck0w29rlc003nuup2d7he98wn"},{"post_id":"ck0w29rks001xuup2sm7uslck","tag_id":"ck0w29rl9003auup2g8haxwsy","_id":"ck0w29rlc003ouup20j9kekd2"},{"post_id":"ck0w29rkt0020uup2sw6hqw9l","tag_id":"ck0w29rl9003auup2g8haxwsy","_id":"ck0w29rld003suup2uk0s71ox"},{"post_id":"ck0w29rku0022uup2ll21gehz","tag_id":"ck0w29rl9003auup2g8haxwsy","_id":"ck0w29rle003xuup2arku5qgw"},{"post_id":"ck0w29rkw0026uup2omxax549","tag_id":"ck0w29rld003uuup28q17js91","_id":"ck0w29rlf0041uup2u25jye6a"},{"post_id":"ck0w29rkx0029uup2olgiic29","tag_id":"ck0w29rle003zuup2s8sqzt1z","_id":"ck0w29rlg0045uup21xblneuk"},{"post_id":"ck0w29rkz002buup29a7skcoa","tag_id":"ck0w29rlf0042uup2wst4ltja","_id":"ck0w29rlh0049uup2ddoed1nw"},{"post_id":"ck0w29rl0002euup2ltisktsz","tag_id":"ck0w29rlg0046uup29gusss56","_id":"ck0w29rli004huup20m2evwsw"},{"post_id":"ck0w29rl0002euup2ltisktsz","tag_id":"ck0w29rlh004auup2xlwhce9k","_id":"ck0w29rli004iuup2ym237qt4"},{"post_id":"ck0w29rl1002huup2qlupndkg","tag_id":"ck0w29rlf0042uup2wst4ltja","_id":"ck0w29rlj004muup2tl9kwb9i"},{"post_id":"ck0w29rl2002juup298z5onrx","tag_id":"ck0w29rli004kuup2s8j3s4xz","_id":"ck0w29rlk004quup2hd2neg3j"},{"post_id":"ck0w29rl4002luup2o6av8d7l","tag_id":"ck0w29rlj004puup2dqf2x7d9","_id":"ck0w29rlk004uuup2rbnzl7s7"}],"Tag":[{"name":"netty","_id":"ck0w29rjw0004uup29gh6cxg1"},{"name":"http","_id":"ck0w29rkc000tuup2cawkfyoh"},{"name":"hexo","_id":"ck0w29rkg0012uup2dnleah1n"},{"name":"rsync","_id":"ck0w29rkj0019uup2yx6tb08z"},{"name":"rm","_id":"ck0w29rkl001huup26m9sakb5"},{"name":"find","_id":"ck0w29rks001wuup2vtw9ryg0"},{"name":"localtunnel","_id":"ck0w29rkw0023uup2fkn8cu5x"},{"name":"nginx","_id":"ck0w29rkz002auup2gx2jrtdh"},{"name":"内网穿透","_id":"ck0w29rl1002guup2kkx4xzfy"},{"name":"mongodb","_id":"ck0w29rl4002kuup2zb4ftufl"},{"name":"shadowsocks","_id":"ck0w29rl5002puup29vaqyed8"},{"name":"socket","_id":"ck0w29rl6002tuup2nawo1l9p"},{"name":"solr","_id":"ck0w29rl7002xuup2npqx9iy8"},{"name":"lucene","_id":"ck0w29rl70030uup2ozc0qp1j"},{"name":"search","_id":"ck0w29rl80034uup2n4j2mz0l"},{"name":"websocket","_id":"ck0w29rl80036uup2h9ydbumf"},{"name":"tcp","_id":"ck0w29rl9003auup2g8haxwsy"},{"name":"工具","_id":"ck0w29rld003uuup28q17js91"},{"name":"空对象模式","_id":"ck0w29rle003zuup2s8sqzt1z"},{"name":"设计模式","_id":"ck0w29rlf0042uup2wst4ltja"},{"name":"源码","_id":"ck0w29rlg0046uup29gusss56"},{"name":"方法","_id":"ck0w29rlh004auup2xlwhce9k"},{"name":"雇工模式","_id":"ck0w29rli004kuup2s8j3s4xz"},{"name":"黑板模式","_id":"ck0w29rlj004puup2dqf2x7d9"}]}}