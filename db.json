{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/2018-07-19-3.png","path":"images/2018-07-19-3.png","modified":1,"renderable":0},{"_id":"source/images/favicon-16x16-me.png","path":"images/favicon-16x16-me.png","modified":1,"renderable":0},{"_id":"source/images/favicon-32x32-me.png","path":"images/favicon-32x32-me.png","modified":1,"renderable":0},{"_id":"source/images/user.jpg","path":"images/user.jpg","modified":1,"renderable":0},{"_id":"source/images/2018-07-19-2.jpg","path":"images/2018-07-19-2.jpg","modified":1,"renderable":0},{"_id":"source/images/2018-07-19-4.png","path":"images/2018-07-19-4.png","modified":1,"renderable":0},{"_id":"source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":0},{"_id":"source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":1,"renderable":0},{"_id":"source/images/2018-07-19-1.jpg","path":"images/2018-07-19-1.jpg","modified":1,"renderable":0},{"_id":"source/images/2018-07-22-1.png","path":"images/2018-07-22-1.png","modified":1,"renderable":0},{"_id":"source/images/tcp/tcp-closesimul.png","path":"images/tcp/tcp-closesimul.png","modified":1,"renderable":0},{"_id":"source/images/tcp/tcp-fsm.png","path":"images/tcp/tcp-fsm.png","modified":1,"renderable":0},{"_id":"source/images/tcp/tcp-sack_example.jpg","path":"images/tcp/tcp-sack_example.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"source/images/designPattern/2018-07-19-4.png","path":"images/designPattern/2018-07-19-4.png","modified":1,"renderable":0},{"_id":"source/images/tcp/2018-07-19-4.png","path":"images/tcp/2018-07-19-4.png","modified":1,"renderable":0},{"_id":"source/images/tcp/tcp-open-close.jpg","path":"images/tcp/tcp-open-close.jpg","modified":1,"renderable":0},{"_id":"source/images/designPattern/2018-07-22-1.png","path":"images/designPattern/2018-07-22-1.png","modified":1,"renderable":0},{"_id":"source/images/tcp/2018-07-22-1.png","path":"images/tcp/2018-07-22-1.png","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/LICENSE","path":"lib/bookmark/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/README.md","path":"lib/bookmark/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/bookmark/bookmark.min.js","path":"lib/bookmark/bookmark.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"be7d891ec2284c4458f29d1781225e0d7184502b","modified":1517896141000},{"_id":"source/CNAME","hash":"18405f89065cfe083c02072f4c9010eb51726364","modified":1517312736000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1517633040000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1517633040000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1517633040000},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1517633040000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1517633040000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1517633040000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1517633040000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1517633040000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1517633040000},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1517633040000},{"_id":"themes/next/README.md","hash":"04451e616a5656f4fe1b17b06e0c3a1ae0b110f3","modified":1517633040000},{"_id":"themes/next/bower.json","hash":"3d3870b07762bb8246766180e68480267b204331","modified":1517633040000},{"_id":"themes/next/_config.yml","hash":"1e71e0e2b44cacc064d080b7299d2856ebb847ed","modified":1517633356000},{"_id":"themes/next/crowdin.yml","hash":"fe22a450cc1272b7ac5476e6b33a999f8b8a2034","modified":1517633040000},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1517633040000},{"_id":"themes/next/package.json","hash":"6a4dc5c36f6f6e612768d0c1cbec88ee72445c1b","modified":1517641832000},{"_id":"source/.vscode/settings.json","hash":"dff8a1731f59ccad056b346102d1e1d014b843f3","modified":1519809798000},{"_id":"source/_data/next.yml","hash":"d26fd6e7e8a487c353c20e6538344629af6f0f9f","modified":1517895944000},{"_id":"source/_posts/hello-world.md","hash":"2829a8facd70ba992535795ff22fd1a868c2d82d","modified":1517637541000},{"_id":"source/_posts/hexo安装部署教程.md","hash":"a06258a3f7091e4542509a2ad4d6ad438248027a","modified":1517669092000},{"_id":"source/_posts/linux下使用rsync快速删除大量文件.md","hash":"67fd0b22d8524073adaef1df374badf51a9121a9","modified":1517669095000},{"_id":"source/_posts/linux删除文件除过某个文件.md","hash":"1ac3a662f049938c50b7db0ac294657b41f0c1a1","modified":1517669097000},{"_id":"source/_posts/localtunnel-server端搭建.md","hash":"511d068fb96b11de000ca31bf5af1e05dc6f0a8b","modified":1521079373000},{"_id":"source/_posts/netty-codec-2018-07-17.md","hash":"bd95a9219d4f81a3e057e222d00381356ae50f74","modified":1532922944000},{"_id":"source/_posts/solr安装分词.md","hash":"30071fd4d829e81d2a4e571b34a44e8439cb08d1","modified":1522744446000},{"_id":"source/_posts/tcp名词解析-2018-07-25.md","hash":"e10f3ce7894648b17a9717f0fbf906b9abf712e5","modified":1532922745000},{"_id":"source/_posts/tcp学习上-2018-07-24.md","hash":"b44c0f76be24722d76724b3c55d0e609011cc189","modified":1532922745000},{"_id":"source/_posts/tcp学习下-2018-07-26.md","hash":"c46727ae87aee5f82e4a8205753a8981d09eb88c","modified":1532922745000},{"_id":"source/_posts/字符串反转.md","hash":"bf0a1f3cd11f9e2ae881d20c34ccf4dafa395ab9","modified":1517841616000},{"_id":"source/_posts/对象池模式-2018-07-20.md","hash":"a5bb4d2100daddb1475d89f15b68d89705d15ae2","modified":1532042554000},{"_id":"source/_posts/空对象模式-2018-07-23.md","hash":"6aee3b71d655178df3f743728dfc04056a9b7bed","modified":1532930981000},{"_id":"source/_posts/规格模式-2018-07-19.md","hash":"8c0153ec9ac684e2e7eaecdbfccbfac7a30225b4","modified":1532042567000},{"_id":"source/_posts/读源码注意的东西.md","hash":"1a62566c92f1a46e6a3f0f0a0d6e382f9bfcecdd","modified":1517904429000},{"_id":"source/_posts/雇工模式-2018-07-21.md","hash":"e3e2d841d55538f4bd68b61b01b439c7515bacaa","modified":1532930981000},{"_id":"source/_posts/黑板模式-2018-07-22.md","hash":"35a11eee413bb7d1b0039d6214d60cdbebd933c7","modified":1532930981000},{"_id":"source/categories/index.md","hash":"29c672c7c93ddeb00481d526a5df7b321a9b2d0a","modified":1517638193000},{"_id":"source/images/2018-07-19-3.png","hash":"4afa29723a342528369a694a36ec9235752eb907","modified":1532042033000},{"_id":"source/images/favicon-16x16-me.png","hash":"7996042cab719ea8f84147360bc7c2bc3b57bfed","modified":1517886669000},{"_id":"source/images/favicon-32x32-me.png","hash":"0a172da57a44eca07093987052cdab4636a49b74","modified":1517896234000},{"_id":"source/images/user.jpg","hash":"0c62ef39a5218b196b235a3f631e090b6f913be6","modified":1517639211000},{"_id":"source/tags/index.md","hash":"c27dfa3de53945be28a93104db62b3f1604aa0d3","modified":1517638137000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"792b4e3c3544d51164e8a414219dc1b388dc65dc","modified":1517633040000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"dc6bcc75f2d790aa291cdf54ae127a4a10bc75a5","modified":1517633040000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1517633040000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1517633040000},{"_id":"themes/next/.github/stale.yml","hash":"1bbdd20d025010ec57225712be82988a26485836","modified":1517633040000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1517633040000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"4c8267e33fe7ffc524f936ee0099f5f695dbb2d1","modified":1517633040000},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1517633040000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1517633040000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1517633040000},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1517633040000},{"_id":"themes/next/docs/MATH.md","hash":"d047b8a3d9aa49b478a33e5a326195d460cb4589","modified":1517633040000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1517633040000},{"_id":"themes/next/git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1517633040000},{"_id":"themes/next/git/config","hash":"e2ca9fa6f115d4406d24bf0df53fc26ce13e0c9b","modified":1517633040000},{"_id":"themes/next/git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1517633040000},{"_id":"themes/next/git/index","hash":"f5420f20de2dfe18708e162531f4f92def00aaa4","modified":1517633040000},{"_id":"themes/next/git/packed-refs","hash":"d88613a5b4229bdc472ba20ce8275b373724c158","modified":1517633040000},{"_id":"themes/next/languages/_en.yml","hash":"285370f53786c536e8a21a396a59d7b5fb506bbf","modified":1517633040000},{"_id":"themes/next/languages/ar.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/bg.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/bn.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/cs.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/da.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/de.yml","hash":"dbf375a056b235f56b4c717c093596e4099f8061","modified":1517633040000},{"_id":"themes/next/languages/el.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/es.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/et.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/fa.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/fi.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/fr.yml","hash":"d3795a581c4d699a1ec1744bbcd053e203003f54","modified":1517633040000},{"_id":"themes/next/languages/he.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/hi.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/hr.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/hu.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/id.yml","hash":"b1ac9b0268067f3399a12d15ffca99d35a21dea3","modified":1517633040000},{"_id":"themes/next/languages/it.yml","hash":"76e6e2eb47256452c9ba59fd6d7209515724e36c","modified":1517633040000},{"_id":"themes/next/languages/ja.yml","hash":"9149ff729876540c825f15ef240788d00f372de6","modified":1517633040000},{"_id":"themes/next/languages/jv.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/ko.yml","hash":"a799b84d4dfb0ac9559208676a30879fcb2c20d3","modified":1517633040000},{"_id":"themes/next/languages/lt.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/lv.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/ms.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/nl.yml","hash":"f05bb96a919e109a865ca5e1a3ac94db96a5db60","modified":1517633040000},{"_id":"themes/next/languages/no.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/pa.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/pl.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/pt-BR.yml","hash":"e5d19c4ddffe9c770d106a4e0ffc2dc643e7f6d2","modified":1517633040000},{"_id":"themes/next/languages/pt.yml","hash":"272815bea0de47d2d7f77e0846cee05fe3569423","modified":1517633040000},{"_id":"themes/next/languages/ro.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/ru.yml","hash":"063bc77639364f5f2f0bfb4e46d7db1256663c27","modified":1517633040000},{"_id":"themes/next/languages/sl.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/sr.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/sv.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/th.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/tr.yml","hash":"2e287f7e9b384d3844946a34aec246ef56abd3e6","modified":1517633040000},{"_id":"themes/next/languages/uk.yml","hash":"4bbc13647cbc9705fe2be9b74b352f16d4b54625","modified":1517633040000},{"_id":"themes/next/languages/vi.yml","hash":"61048c4d4c50bf7c1af59f3100b4736c7012f95a","modified":1517633040000},{"_id":"themes/next/languages/zh-CN.yml","hash":"dce2ffd1cca39451a9bad8ed234f065e2141e13f","modified":1517633040000},{"_id":"themes/next/languages/zh-HK.yml","hash":"9a51892c195d5139a0144baca34d3375d66f23a3","modified":1517633040000},{"_id":"themes/next/languages/zh-TW.yml","hash":"382f8a7b99a8e765cf000d3c7dcb6b5d5aaea69a","modified":1517633040000},{"_id":"themes/next/layout/_layout.swig","hash":"18530ef538c4cbcfebb15758e0f396acdeae91a0","modified":1517842215000},{"_id":"themes/next/layout/archive.swig","hash":"833a2213d31be45a12b8e4e5e609073978bd251b","modified":1517633040000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1517633040000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1517633040000},{"_id":"themes/next/layout/page.swig","hash":"e17757096eb878f1e9c34c567d7898a37305c302","modified":1517633040000},{"_id":"themes/next/layout/post.swig","hash":"8e2d079b46076996cc9343213d5bf7da8178d32d","modified":1517633040000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1517633040000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1517633040000},{"_id":"themes/next/scripts/merge-configs.js","hash":"ca9845dc76f5710b4c6fba5fe25ff0d2fcf0adaa","modified":1517633040000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1517633040000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1517633040000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1517633040000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1517633040000},{"_id":"source/images/2018-07-19-2.jpg","hash":"71062aef88ea80d3bb04916d614347d474ee14f0","modified":1532042033000},{"_id":"source/images/2018-07-19-4.png","hash":"67d9260a1b58610b706068231d435d8817d17eaf","modified":1532042033000},{"_id":"source/images/alipay.jpg","hash":"3dfb01e438e0788f909c8e66d438fd33d1e8d868","modified":1517665835000},{"_id":"source/images/wechatpay.jpg","hash":"7acda7d3f65cbb3da2a72915898e61d2b36ba316","modified":1517665828000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517633040000},{"_id":"source/images/2018-07-19-1.jpg","hash":"269ff751555853ec356339d906ee2a45600385fd","modified":1532042033000},{"_id":"source/images/2018-07-22-1.png","hash":"204d024885123bbe8769a7e24f4db03c211ab5e0","modified":1532042033000},{"_id":"source/images/tcp/.error","hash":"35dcbe5bcd650e2ca7d543c5ef4992e690573e30","modified":1532922944000},{"_id":"source/images/tcp/tcp-closesimul.png","hash":"cd24aa24f17629070dfe9e41a88f6cdd97edde16","modified":1532922745000},{"_id":"source/images/tcp/tcp-fsm.png","hash":"34c92f937d294d778591f86b31e6ae895f949f0a","modified":1532922745000},{"_id":"source/images/tcp/tcp-sack_example.jpg","hash":"294237bfa9cc12494178f8e04805ffc917f0ed19","modified":1532922745000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1517633040000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1517633040000},{"_id":"themes/next/docs/ru/README.md","hash":"ce63302a8c224ea845fd078fc6323f65c9c9ebce","modified":1517633040000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1517633040000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"d6a6efdee5f830515c21423465646d06bef84375","modified":1517633040000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1517633040000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1517633040000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"1c7df019737656fdfd8d124c7c045a64ac8a2a8d","modified":1517633040000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"af873cf9f8dae09324d556322af37452087b238a","modified":1517633040000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"c1ba919f70efe87a39e6217883e1625af0b2c23c","modified":1517633040000},{"_id":"themes/next/git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1517633040000},{"_id":"themes/next/git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1517633040000},{"_id":"themes/next/git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1517633040000},{"_id":"themes/next/git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1517633040000},{"_id":"themes/next/git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1517633040000},{"_id":"themes/next/git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1517633040000},{"_id":"themes/next/git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1517633040000},{"_id":"themes/next/git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1517633040000},{"_id":"themes/next/git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1517633040000},{"_id":"themes/next/git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1517633040000},{"_id":"themes/next/git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1517633040000},{"_id":"themes/next/git/logs/HEAD","hash":"3786ad71419aa12d84829f94568868455a5ea74d","modified":1517633040000},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1517633040000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1517633040000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1517633040000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1517633040000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"83b0242c0e2cf20959aa2845b1a14de757cd765f","modified":1517633040000},{"_id":"themes/next/layout/_macro/post.swig","hash":"cf1909b2646404e3a7b5165aa79c9cd9b2a4d8a4","modified":1517633040000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"aa620c582143f43ba1cb1a5e59240041a911185b","modified":1517633040000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"203fedd8ae676de5950a0adec79d91e426b726c4","modified":1517633040000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"fea45ab314b9ea23edab25c2b8620f909d856b1d","modified":1517633040000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5df32b286a8265ba82a4ef5e1439ff34751545ad","modified":1517633040000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"8811170dc60053d815023f3ee99c6b0f0d0ae059","modified":1517633040000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ab12994e20edeed75b277f3e3dbba69375e52005","modified":1517633040000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1517633040000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1517633040000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1517633040000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1517633040000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1517633040000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1517633040000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1517633040000},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1517633040000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1517633040000},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1517633040000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1517633040000},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1517633040000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1517633040000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1517633040000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1517633040000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1517633040000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1517633040000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1517633040000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1517633040000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1517633040000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1517633040000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1517633040000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1517633040000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1517633040000},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1517633040000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1517633040000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1517633040000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1517633040000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1517633040000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1517633040000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1517633040000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1517633040000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1517633040000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1517633040000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1517633040000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1517633040000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1517633040000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1517633040000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1517633040000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1517633040000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1517633040000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1517633040000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1517633040000},{"_id":"themes/next/source/js/.DS_Store","hash":"1a55470d12aa81a3fc4fc3c35fc91d497e0af0c9","modified":1523085764000},{"_id":"source/images/designPattern/2018-07-19-4.png","hash":"67d9260a1b58610b706068231d435d8817d17eaf","modified":1532930137000},{"_id":"source/images/tcp/2018-07-19-4.png","hash":"67d9260a1b58610b706068231d435d8817d17eaf","modified":1532930003000},{"_id":"source/images/tcp/tcp-open-close.jpg","hash":"d42e412fd11045e5f11d316937f9541bfc9ce1e2","modified":1532922745000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517633040000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517633040000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517633040000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517633040000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517633040000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517633040000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517633040000},{"_id":"source/images/designPattern/2018-07-22-1.png","hash":"204d024885123bbe8769a7e24f4db03c211ab5e0","modified":1532930137000},{"_id":"source/images/tcp/2018-07-22-1.png","hash":"204d024885123bbe8769a7e24f4db03c211ab5e0","modified":1532930003000},{"_id":"themes/next/git/objects/pack/pack-1269648f5d9138dbc11a36e3c17b6c78add232cf.idx","hash":"56cdca8bfd0188b0995d06a48d0124787bd9bb13","modified":1517633040000},{"_id":"themes/next/git/refs/heads/master","hash":"e55272d5cdbf0917d8a6aa5b94b8a13cd33cf543","modified":1517633040000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1517633040000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"b8e84eb0e961a89d3f662081c7511a5b8da3aabf","modified":1517633040000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"e2e3494f35f8bd8d828536a4a273f99e9ed28084","modified":1517633040000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1517633040000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1517633040000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1517633040000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1517633040000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1517633040000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1517633040000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1517633040000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1517633040000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1517633040000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1517633040000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1517633040000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1517633040000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1517633040000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1517633040000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1517633040000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1517633040000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1517633040000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1517633040000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1517633040000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1517633040000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1517633040000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1517633040000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1517633040000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1517633040000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"2fbee33a4ccd7c8217c73e85a9a1488170e05629","modified":1517633040000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1517633040000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"17a54796f6e03fc834880a58efca45c286e40e40","modified":1517633040000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"40e3cacbd5fa5f2948d0179eff6dd88053e8648e","modified":1517633040000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"6f340d122a9816ccdf4b45b662880a4b2d087671","modified":1517633040000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1517633040000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"42f62695029834d45934705c619035733762309e","modified":1517633040000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1517633040000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1517633040000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"011ae6303afacddabc4ddf570fe3dd227569cd4f","modified":1517633040000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1517633040000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1517633040000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1517633040000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1517633040000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1517633040000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1517633040000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1517633040000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1517633040000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1517633040000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1517633040000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"32392d213f5d05bc26b2dc452f2fc6fea9d44f6d","modified":1517633040000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"2a479f5ed8350e0155948130aeabd83b88886a61","modified":1517633040000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1517633040000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1517633040000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"531cdedd7fbe8cb1dab2e4328774a9f6b15b59da","modified":1517633040000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1517633040000},{"_id":"themes/next/source/js/src/love.js","hash":"effa770d8085f7e7fb903de217ce521dff163780","modified":1517842151000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1517633040000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1517633040000},{"_id":"themes/next/source/js/src/post-details.js","hash":"d1333fb588d4521b4d1e9c69aef06e0ad1bf0b12","modified":1517633040000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1517633040000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1517633040000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1517633040000},{"_id":"themes/next/source/lib/bookmark/.gitignore","hash":"5410a1bef9807f666cd92a0d2020f700e67e4096","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/LICENSE","hash":"1440355648a72be5b7625fe6fa055b462fcc78b0","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/README.md","hash":"ecfb09270cf202fb2228e9a79fa970b60be69222","modified":1517640263000},{"_id":"themes/next/source/lib/bookmark/bookmark.min.js","hash":"0f676687733e8f50a9d668f76686524bf0fa6b2d","modified":1517640263000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1517633040000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1517633040000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1517633040000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1517633040000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1517633040000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1517633040000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1517633040000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1517633040000}],"Category":[{"name":"linux","_id":"cjk7vj0ib0006hd39i4uqnhlf"},{"name":"内网穿透","_id":"cjk7vj0ik000ghd39tfxolr57"},{"name":"netty","_id":"cjk7vj0in000khd39do67ft2i"},{"name":"shell","parent":"cjk7vj0ib0006hd39i4uqnhlf","_id":"cjk7vj0ir000rhd396k4sz8ei"},{"name":"solr","parent":"cjk7vj0ib0006hd39i4uqnhlf","_id":"cjk7vj0iv000whd39bslnueck"},{"name":"internet","_id":"cjk7vj0iy0012hd39sbw0rbar"},{"name":"java","_id":"cjk7vj0j2001jhd39ssuoc2ys"},{"name":"power design","_id":"cjk7vj0j2001mhd39m62tlocj"},{"name":"codec","parent":"cjk7vj0in000khd39do67ft2i","_id":"cjk7vj0j3001phd39r6fwatlc"},{"name":"tcp","parent":"cjk7vj0iy0012hd39sbw0rbar","_id":"cjk7vj0j8002ehd39b2hafg1z"}],"Data":[{"_id":"next","data":{"override":true,"cache":{"enable":true},"favicon":{"small":"/images/favicon-16x16-me.png","medium":"/images/favicon-32x32-me.png"},"keywords":"fighting, fly","rss":null,"footer":{"icon":"user","copyright":"wdd承包一切！！！","powered":false,"theme":{"enable":false,"version":"--Hzz"},"custom_text":"personal blog | <a target=\"_blank\" rel=\"external nofollow\" href=\"http://blog.wudd.top\"><b>deliver_love</b></a>"},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"点滴":"/ || home","标签":"/tags/ || tag","分类":"/categories/ || th","归档":"/archives/ || archive"},"menu_settings":{"icons":true,"badges":false},"scheme":"Mist","site_state":true,"social":{"GitHub":"https://github.com/fastZhe || github","Weibo":"http://weibo.com/3420794550 || weibo"},"social_icons":{"enable":true,"icons_only":false,"transition":false,"exturl":false},"github_banner":"https://github.com/fastZhe || Follow me on GitHub","links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"right","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"updated_diff":false,"categories":true},"symbols_count_time":{"separated_meta":true,"item_text_post":true,"item_text_total":false,"awl":5,"wpm":200},"reward_comment":"坚持原创技术分享，您的支持将鼓励我继续创作！","wechatpay":"/images/wechatpay.jpg","alipay":"/images/alipay.jpg","post_copyright":{"enable":false,"license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0</a>"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","cheers_enabled":true,"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"math":{"enable":false,"per_page":true,"engine":"mathjax","mathjax":{"cdn":"//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"cdn":"//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css"}},"han":false,"pangu":false,"disqus":{"enable":false,"shortname":null,"count":true,"lazyload":false},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"bookmark":{"enable":true,"save":"auto"},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"reading_progress":{"enable":false,"color":"#37c6c0","height":"2px"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":false,"fastclick":false,"lazyload":false,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"pangu":null,"needmoreshare2_js":null,"needmoreshare2_css":null,"bookmark":null},"css":"css","js":"js","images":"images","version":"6.0.3","avatar":"/images/user.jpg"}}],"Page":[{"title":"categories","date":"2018-02-03T06:09:32.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-02-03 14:09:32\ntype: \"categories\"\n---\n","updated":"2018-02-03T06:09:53.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjk7vj0i30001hd399g5k39bq"},{"title":"tags","date":"2018-02-03T06:08:24.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-02-03 14:08:24\ntype: \"tags\"\n---\n","updated":"2018-02-03T06:08:57.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjk7vj0oo002xhd39f01cpe5b"}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n<!--more-->\n\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n<!--more-->\n\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-01-30T11:45:36.000Z","updated":"2018-02-03T05:59:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk7vj0hz0000hd3906tvygvk"},{"title":"hexo安装部署教程","date":"2018-01-30T15:18:15.000Z","_content":"##    建立一个\bgithubpage项目\n### 使用自定义域名访问博客的前提：\n> 有域名解析至你的github page 我的域名为：blog.wudd.top\n\n\n####   建立一个分支 hexo\n* hexo为项目管理分支，即hexo博客项目的主分支\n* master分支为博客展示页面的分支（\b建好项目即存在的分支）\n\n##  在本地 \bclone hexo 分支\n\n```bash\n#克隆hexo分支\n$ git clone -b hexo git地址\n#进入\b克隆好的项目\n$ cd 项目名\n```\n##  安装hexo 以及相关的主题\n```bash\n#全局安装hexo\n$ sudo npm install -g hexo-cli\n#初始化hexo\n$ hexo init .\n```\n####  编辑项目目录下的 _config.yml文件\n##### ps\n* site:为博客自定义\b内容\n* 主题theme：主题配置项为第四步安装的，默认为自带的，也可不修改\n* deploy:填写自己的githubpage地址，分支为master\n* url:填写自己的博客访问url\n```bash\n#编辑项目根目录下的配置文件，修改以下其他可不修改：\b\n$ vim _config.yml\n \n  5 # Site\n  6 title: Hzhe\n  7 subtitle: you...\n  8 description: blog java\n  9 author: hzz\n 10 language:\n 11 timezone:\n 12\n 13 # URL\n 14 ## If your site is put in a subdirectory, set url as 'http://yoursite.com/ch    ild' and root as '/child/'\n 15 url: http://blog.wudd.top\n 16 root: /\n 17 permalink: :year/:month/:day/:title/\n 18 permalink_defaults:\n# Extensions\n 73 ## Plugins: https://hexo.io/plugins/\n 74 ## Themes: https://hexo.io/themes/ \n 75 theme: hexo-theme-laughing\n 76\n 77 # Deployment\n 78 ## Docs: https://hexo.io/docs/deployment.html\n 79 deploy:\n 80   type: git\n 81   repo: https://github.com/fastZhe/fastZhe.github.io\n 82   branch: master\n\n```\n##  安装hexo相关的主题\n* signature:个人签名\n* author.head:个人头像\n* navication:菜单栏\n* copyright：建议都关闭\n* socail:社交媒体连接\n```bash\n#进入theme文件夹\n$ cd theme\n#安装主题（不是必须）\n$ npm install hexo-renderer-pug --save\n$ git clone git@github.com:BoizZ/hexo-theme-laughing.git\n#删除主题文件夹内的.git\n$ cd hexo-theme-laughing ; rm -fr .git\n#编辑主题配置文件\n$ vim _config.yml\n\n  6 page_background: http://callfiles.ueibo.com/hexo-theme-laughing/page_backgro    und.jpg\n  7 page_menu_button: dark\n  8 post_background: http://callfiles.ueibo.com/hexo-theme-laughing/post_backgro    und.jpg\n  9 post_menu_button: light\n 10 title_plancehold: 随笔\n 11 author:\n 12   head: https://tva3.sinaimg.cn/crop.0.0.750.750.180/cbe52eb6jw8ew3l78tj4qj2    0ku0kv75s.jpg\n 13   signature: 世界那么大，我想去看看。。。KEEP FIGHTING\n 14 navication:\n 15   - name: Github\n 16     link: https://github.com/fastZhe\n 17 # content\n 18 content_width: 800\n\n 21 social:\n 22   - name: Github\n 23     icon: github\n 24     link: https://github.com\n 25   - name: Weibo\n 26     icon: weibo\n 27     link: https://weibo.com/p/1005053420794550/home?from=page_100505&mod=TAB    &is_all=1\n\n # Copyright\n 33 copyright:\n 34   record: false\n 35   hexo: false\n 36   laughing: true\n```\n\n##  编辑githubpage 项目根目录下的.gitignore\n* 配置成以下：避免项目管理分支缺少相关目录\n* 推送至hexo分支\n```bash\n$ vim .gitignore\n\n.DS_Store\nThumbs.db\n*.log\n.deploy*/\n\n$ git add .gitignore \n$ git commit -m \"\"\n$ git push origin hexo\n```\n\n##  新建编辑CNAME 自动\b映射对应的域名\n* 填写自己访问的博客地址\n* ps 这个是我的域名，请换成自己的\n* 推送至hexo分支\n```bash\n$ vim source/CNAME\nblog.wudd.top\n\n$ git add . \n$ git commit -m \"\"\n$ git push origin hexo\n```\n\n\n##  发布博客以及推送操作\n```bash\n#新建博客\n$ hexo new \"博客名\"\nINFO  Created: ~/me/blog/fast/fastZhe.github.io/source/_posts/hexo安装部署教程.md\n#编辑博客\n$ vim ~/me/blog/fast/fastZhe.github.io/source/_posts/hexo安装部署教程.md\n#推送至远程项目目录进行保存分支为hexo（保存项目目录，多机操作）\n$ git add .\n$ git commit -m \"最新博客等。。。\"\n$ git push origin hexo\n#生成博客\n$ hexo g\n#本地预览（在本地验证博客是否有问题）,访问以下地址即可\n$ hexo server\n➜  fastZhe.github.io git:(hexo) ✗ hexo server\nINFO  Start processing\nINFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.\n\n#部署博客至githubpage\nhexo d\n```\n\n### 打开页面 \b你的域名，请尽情欣赏吧！！！\n","source":"_posts/hexo安装部署教程.md","raw":"---\ntitle: hexo安装部署教程\ndate: 2018-01-30 23:18:15\ntags: \"hexo\"\n---\n##    建立一个\bgithubpage项目\n### 使用自定义域名访问博客的前提：\n> 有域名解析至你的github page 我的域名为：blog.wudd.top\n\n\n####   建立一个分支 hexo\n* hexo为项目管理分支，即hexo博客项目的主分支\n* master分支为博客展示页面的分支（\b建好项目即存在的分支）\n\n##  在本地 \bclone hexo 分支\n\n```bash\n#克隆hexo分支\n$ git clone -b hexo git地址\n#进入\b克隆好的项目\n$ cd 项目名\n```\n##  安装hexo 以及相关的主题\n```bash\n#全局安装hexo\n$ sudo npm install -g hexo-cli\n#初始化hexo\n$ hexo init .\n```\n####  编辑项目目录下的 _config.yml文件\n##### ps\n* site:为博客自定义\b内容\n* 主题theme：主题配置项为第四步安装的，默认为自带的，也可不修改\n* deploy:填写自己的githubpage地址，分支为master\n* url:填写自己的博客访问url\n```bash\n#编辑项目根目录下的配置文件，修改以下其他可不修改：\b\n$ vim _config.yml\n \n  5 # Site\n  6 title: Hzhe\n  7 subtitle: you...\n  8 description: blog java\n  9 author: hzz\n 10 language:\n 11 timezone:\n 12\n 13 # URL\n 14 ## If your site is put in a subdirectory, set url as 'http://yoursite.com/ch    ild' and root as '/child/'\n 15 url: http://blog.wudd.top\n 16 root: /\n 17 permalink: :year/:month/:day/:title/\n 18 permalink_defaults:\n# Extensions\n 73 ## Plugins: https://hexo.io/plugins/\n 74 ## Themes: https://hexo.io/themes/ \n 75 theme: hexo-theme-laughing\n 76\n 77 # Deployment\n 78 ## Docs: https://hexo.io/docs/deployment.html\n 79 deploy:\n 80   type: git\n 81   repo: https://github.com/fastZhe/fastZhe.github.io\n 82   branch: master\n\n```\n##  安装hexo相关的主题\n* signature:个人签名\n* author.head:个人头像\n* navication:菜单栏\n* copyright：建议都关闭\n* socail:社交媒体连接\n```bash\n#进入theme文件夹\n$ cd theme\n#安装主题（不是必须）\n$ npm install hexo-renderer-pug --save\n$ git clone git@github.com:BoizZ/hexo-theme-laughing.git\n#删除主题文件夹内的.git\n$ cd hexo-theme-laughing ; rm -fr .git\n#编辑主题配置文件\n$ vim _config.yml\n\n  6 page_background: http://callfiles.ueibo.com/hexo-theme-laughing/page_backgro    und.jpg\n  7 page_menu_button: dark\n  8 post_background: http://callfiles.ueibo.com/hexo-theme-laughing/post_backgro    und.jpg\n  9 post_menu_button: light\n 10 title_plancehold: 随笔\n 11 author:\n 12   head: https://tva3.sinaimg.cn/crop.0.0.750.750.180/cbe52eb6jw8ew3l78tj4qj2    0ku0kv75s.jpg\n 13   signature: 世界那么大，我想去看看。。。KEEP FIGHTING\n 14 navication:\n 15   - name: Github\n 16     link: https://github.com/fastZhe\n 17 # content\n 18 content_width: 800\n\n 21 social:\n 22   - name: Github\n 23     icon: github\n 24     link: https://github.com\n 25   - name: Weibo\n 26     icon: weibo\n 27     link: https://weibo.com/p/1005053420794550/home?from=page_100505&mod=TAB    &is_all=1\n\n # Copyright\n 33 copyright:\n 34   record: false\n 35   hexo: false\n 36   laughing: true\n```\n\n##  编辑githubpage 项目根目录下的.gitignore\n* 配置成以下：避免项目管理分支缺少相关目录\n* 推送至hexo分支\n```bash\n$ vim .gitignore\n\n.DS_Store\nThumbs.db\n*.log\n.deploy*/\n\n$ git add .gitignore \n$ git commit -m \"\"\n$ git push origin hexo\n```\n\n##  新建编辑CNAME 自动\b映射对应的域名\n* 填写自己访问的博客地址\n* ps 这个是我的域名，请换成自己的\n* 推送至hexo分支\n```bash\n$ vim source/CNAME\nblog.wudd.top\n\n$ git add . \n$ git commit -m \"\"\n$ git push origin hexo\n```\n\n\n##  发布博客以及推送操作\n```bash\n#新建博客\n$ hexo new \"博客名\"\nINFO  Created: ~/me/blog/fast/fastZhe.github.io/source/_posts/hexo安装部署教程.md\n#编辑博客\n$ vim ~/me/blog/fast/fastZhe.github.io/source/_posts/hexo安装部署教程.md\n#推送至远程项目目录进行保存分支为hexo（保存项目目录，多机操作）\n$ git add .\n$ git commit -m \"最新博客等。。。\"\n$ git push origin hexo\n#生成博客\n$ hexo g\n#本地预览（在本地验证博客是否有问题）,访问以下地址即可\n$ hexo server\n➜  fastZhe.github.io git:(hexo) ✗ hexo server\nINFO  Start processing\nINFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.\n\n#部署博客至githubpage\nhexo d\n```\n\n### 打开页面 \b你的域名，请尽情欣赏吧！！！\n","slug":"hexo安装部署教程","published":1,"updated":"2018-02-03T14:44:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk7vj0i40002hd39rxb3qys6"},{"title":"linux下使用rsync快速删除大量文件","date":"2018-01-31T10:07:52.000Z","_content":"\n## 问题：快速删除一个文件夹下的大量文件？\n* 使用rm 大量文件会很慢，更大时并且会报错\n> 实际原理：遍历删除\n\n```bash\n$ rm -fr *\n```\n\n* 使用rsync删除\n> 实际原理：使用空文件夹替换要删除的文件夹\n\n\n\n```bash\n#建立新的空文件夹\n$ mkdir src\n#建立实际有很多文件的文件夹\n$ mkdir dest\n#模拟生成大量文件  900000个文件\n$ touch file{1..900000}\n#使用rsync删除\n# -r 包含文件夹 -l 符号链接 -p 权限 permission -t 保持文件修改时间 -D 特殊设备\n$ rsync --delete-before -rlptD src/ dest\n#或者(与上面一样的效果)\n$ rsync -a --delete-before --no-o --no-g src/ dest\n```\n","source":"_posts/linux下使用rsync快速删除大量文件.md","raw":"---\ntitle: linux下使用rsync快速删除大量文件\ndate: 2018-01-31 18:07:52\ntags: [\"rsync\",\"rm\"]\ncategory: [\"linux\",\"shell\"]\n---\n\n## 问题：快速删除一个文件夹下的大量文件？\n* 使用rm 大量文件会很慢，更大时并且会报错\n> 实际原理：遍历删除\n\n```bash\n$ rm -fr *\n```\n\n* 使用rsync删除\n> 实际原理：使用空文件夹替换要删除的文件夹\n\n\n\n```bash\n#建立新的空文件夹\n$ mkdir src\n#建立实际有很多文件的文件夹\n$ mkdir dest\n#模拟生成大量文件  900000个文件\n$ touch file{1..900000}\n#使用rsync删除\n# -r 包含文件夹 -l 符号链接 -p 权限 permission -t 保持文件修改时间 -D 特殊设备\n$ rsync --delete-before -rlptD src/ dest\n#或者(与上面一样的效果)\n$ rsync -a --delete-before --no-o --no-g src/ dest\n```\n","slug":"linux下使用rsync快速删除大量文件","published":1,"updated":"2018-02-03T14:44:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk7vj0i70003hd39lprt919x"},{"title":"linux删除文件除过某个文件","date":"2018-02-01T01:43:10.000Z","_content":"\n### 使用rm \n> 删除除了file1 的文件\n\n\n\n```bash\nrm -fr !(file1)\n```\n\n\n### 使用find\n> 删除除了file1\n\n```bash\nfind ./* -not -name \"file1\" | xargs rm -fr\nfind ./* -not -name \"file1\" -exec rm -fr {} \\;\n```\n\n\n\n","source":"_posts/linux删除文件除过某个文件.md","raw":"---\ntitle: linux删除文件除过某个文件\ndate: 2018-02-01 09:43:10\ntags: [\"rm\",\"find\"]\ncategory: [\"linux\",\"shell\"]\n---\n\n### 使用rm \n> 删除除了file1 的文件\n\n\n\n```bash\nrm -fr !(file1)\n```\n\n\n### 使用find\n> 删除除了file1\n\n```bash\nfind ./* -not -name \"file1\" | xargs rm -fr\nfind ./* -not -name \"file1\" -exec rm -fr {} \\;\n```\n\n\n\n","slug":"linux删除文件除过某个文件","published":1,"updated":"2018-02-03T14:44:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk7vj0ia0005hd39s3abjvuo"},{"title":"localtunnel server端搭建","date":"2018-03-15T01:56:46.000Z","_content":"\n## localtunnel server\n### 下载程序\n> 以下地址为localtunnel server的git页面\n\n`https://github.com/localtunnel/server`\n\n> 下载安装\n\n* 前提：本机安装git、 nodejs \n* 有独立域名、独立主机（公网ip）\n\n```bash\n$ git clone  https://github.com/localtunnel/server.git\n$ cd localtunnel-server\n$ npm install\n```\n\n> 启动\n\n```bash\n# 直接使用\n$ bin/server --port 2000\n# 配合 pm2 使用\n$ pm2 start bin/server --name lt -- --port 2000\n```\n\n> server配合nginx使用\n\n* 配置如下：\n\n```nginx\nupstream server {\n\n                server 127.0.0.1:8099;\n        }\nmap $http_upgrade $connection_upgrade {\n    default upgrade;\n    ''      close;\n}\n\nserver {\n        listen 80 default_server;\n        server_name example.com;\n    location / {\n        proxy_pass http://server;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Forwarded-Proto http;\n        proxy_set_header X-NginX-Proxy true;\n     #  proxy_set_header Upgrade $http_upgrade;\n     #  proxy_set_header Connection $connection_upgrade;\n\n        proxy_redirect off;\n                }\n        }\n\n server {\n        listen       443 default_server ssl;\n        server_name  example.com;\n        ssl on;\n        ssl_certificate      /etc/letsencrypt/live/example.com/fullchain.pem;\n        ssl_certificate_key  /etc/letsencrypt/live/example.com/privkey.pem;\n\n        ssl_session_cache    shared:SSL:1m;\n        ssl_session_timeout  5m;\n\n        ssl_ciphers  HIGH:!aNULL:!MD5;\n        ssl_prefer_server_ciphers  on;\n\n        location / {\n\n        proxy_pass http://server/;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Forwarded-Proto https;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n\n        proxy_set_header X-NginX-Proxy true;\n        proxy_redirect off;\n        }\n    }\n```\n\n\n> client端使用\n\n```bash\n# 安装client端\n$ npm i localtunnel -g\n# 使用localtunnel默认服务器启动本地监听8080端口\n$ lt --port 8080\n# 使用自己搭建的服务器启动监听本地8080端口\n$ lt -h http://example.com --port 8080\n# 指定二级域名启动监听\n$ lt -s ceshi -h http://example.com --port 8080 \n```\n\n\n","source":"_posts/localtunnel-server端搭建.md","raw":"---\ntitle: localtunnel server端搭建\ndate: 2018-03-15 09:56:46\ntags: [\"localtunnel\",\"nginx\",\"内网穿透\"]\ncategory: [\"内网穿透\"]\n---\n\n## localtunnel server\n### 下载程序\n> 以下地址为localtunnel server的git页面\n\n`https://github.com/localtunnel/server`\n\n> 下载安装\n\n* 前提：本机安装git、 nodejs \n* 有独立域名、独立主机（公网ip）\n\n```bash\n$ git clone  https://github.com/localtunnel/server.git\n$ cd localtunnel-server\n$ npm install\n```\n\n> 启动\n\n```bash\n# 直接使用\n$ bin/server --port 2000\n# 配合 pm2 使用\n$ pm2 start bin/server --name lt -- --port 2000\n```\n\n> server配合nginx使用\n\n* 配置如下：\n\n```nginx\nupstream server {\n\n                server 127.0.0.1:8099;\n        }\nmap $http_upgrade $connection_upgrade {\n    default upgrade;\n    ''      close;\n}\n\nserver {\n        listen 80 default_server;\n        server_name example.com;\n    location / {\n        proxy_pass http://server;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Forwarded-Proto http;\n        proxy_set_header X-NginX-Proxy true;\n     #  proxy_set_header Upgrade $http_upgrade;\n     #  proxy_set_header Connection $connection_upgrade;\n\n        proxy_redirect off;\n                }\n        }\n\n server {\n        listen       443 default_server ssl;\n        server_name  example.com;\n        ssl on;\n        ssl_certificate      /etc/letsencrypt/live/example.com/fullchain.pem;\n        ssl_certificate_key  /etc/letsencrypt/live/example.com/privkey.pem;\n\n        ssl_session_cache    shared:SSL:1m;\n        ssl_session_timeout  5m;\n\n        ssl_ciphers  HIGH:!aNULL:!MD5;\n        ssl_prefer_server_ciphers  on;\n\n        location / {\n\n        proxy_pass http://server/;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Forwarded-Proto https;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n\n        proxy_set_header X-NginX-Proxy true;\n        proxy_redirect off;\n        }\n    }\n```\n\n\n> client端使用\n\n```bash\n# 安装client端\n$ npm i localtunnel -g\n# 使用localtunnel默认服务器启动本地监听8080端口\n$ lt --port 8080\n# 使用自己搭建的服务器启动监听本地8080端口\n$ lt -h http://example.com --port 8080\n# 指定二级域名启动监听\n$ lt -s ceshi -h http://example.com --port 8080 \n```\n\n\n","slug":"localtunnel-server端搭建","published":1,"updated":"2018-03-15T02:02:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk7vj0ic0007hd39je8qa0o5"},{"title":"netty编解码","date":"2018-07-17T00:36:02.000Z","_content":"\n\n## 关于netty的编解码\n\n关于netty的编解码学习，一般涉及到数据的出站与入站，在出站时调用编码、在入站时调用解码，编解码都是成对出现，不能出现只有一个。\n\n### netty的编解码类别\n\nnetty的编解码类别主要分为以下三种\n\n* ByteToMessage 入站解码\n* MessageToByte 出站编码\n* MessageToMessage  出站入站均可（编解码）\n\n* 解码继承：ByteToMessageDecoder,该类继承ChannelInboundHandlerAdapter   该类为进站处理\n* 编码继承：MessageToByteEncoder，该类继承ChannelOutboundHandlerAdapter  该类为出站处理\n\n## 例子实现编解码用一个组合handler来表示编解码（前两种）\n\n```\n例如：\npackage com.bj.hz.dzj;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelDuplexHandler;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\nimport io.netty.channel.CombinedChannelDuplexHandler;\nimport io.netty.handler.codec.ByteToMessageDecoder;\nimport io.netty.handler.codec.MessageToByteEncoder;\nimport java.util.List;\n\npublic class MyCodec extends CombinedChannelDuplexHandler {\n\n    public MyCodec(){\n        super(new Mydecode(),new Myencode());\n    }\n\n}\n\nclass Mydecode extends ByteToMessageDecoder{\n\n\n    @Override\n    protected void decode(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf, List<Object> list) throws Exception {\n        //这种是需要判断字节数组的容量是否足够解码，请参考最后使用ReplayingDecoder\n        if (byteBuf.readableBytes()>4){\n            list.add(byteBuf.readInt());\n        }\n    }\n}\n\nclass Myencode extends MessageToByteEncoder<Integer>{\n\n    @Override\n    protected void encode(ChannelHandlerContext channelHandlerContext, Integer integer, ByteBuf byteBuf) throws Exception {\n        byteBuf.writeInt(integer);\n    }\n}\n\n```\n\n\n\n### 使用codec可以统一编解码（前两种）\n* 使用codec 实现编解码一体\n\n```\npackage com.bj.hz.dzj;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.handler.codec.ByteToMessageCodec;\nimport java.util.List;\n\npublic class Mycodec1 extends ByteToMessageCodec<Integer> {\n\n    @Override\n    protected void decode(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf, List list) throws Exception {\n        if (byteBuf.readableBytes()>4){\n            list.add(byteBuf.readInt());\n        }\n    }\n\n    @Override\n    protected void encode(ChannelHandlerContext channelHandlerContext, Integer integer, ByteBuf byteBuf) throws Exception {\n        byteBuf.writeInt(integer);\n    }\n}\n```\n\n### 使用codec实现第三种\n该类型主要实现编码中协议（例如api等）转换\n\n```\npublic class MyMessagetoMessage extends MessageToMessageCodec<Integer,String> {\n    @Override\n    protected void encode(ChannelHandlerContext channelHandlerContext, String s, List<Object> list) throws Exception {\n        list.add(Integer.parseInt(s));\n    }\n\n    @Override\n    protected void decode(ChannelHandlerContext channelHandlerContext, Integer integer, List<Object> list) throws Exception {\n        list.add(String.valueOf(integer));\n    }\n}\n```\n\n### 使用ReplayingDecoder,来实现自动转换，当bytebuf中没有能够转换的足够字节，则会一直等待足够才会转换\n\n```\npackage com.bj.hz.dzj;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.handler.codec.ReplayingDecoder;\nimport java.util.List;\n\npublic class MyreplyingDecoder extends ReplayingDecoder<Integer> {\n    @Override\n    protected void decode(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf, List<Object> list) throws Exception {\n        list.add(byteBuf.readInt());\n    }\n}\n```\n\n","source":"_posts/netty-codec-2018-07-17.md","raw":"---\ntitle: netty编解码\ndate: 2018-07-17 08:36:02\ntags: netty\ncategories: [\"netty\",\"codec\"]\n---\n\n\n## 关于netty的编解码\n\n关于netty的编解码学习，一般涉及到数据的出站与入站，在出站时调用编码、在入站时调用解码，编解码都是成对出现，不能出现只有一个。\n\n### netty的编解码类别\n\nnetty的编解码类别主要分为以下三种\n\n* ByteToMessage 入站解码\n* MessageToByte 出站编码\n* MessageToMessage  出站入站均可（编解码）\n\n* 解码继承：ByteToMessageDecoder,该类继承ChannelInboundHandlerAdapter   该类为进站处理\n* 编码继承：MessageToByteEncoder，该类继承ChannelOutboundHandlerAdapter  该类为出站处理\n\n## 例子实现编解码用一个组合handler来表示编解码（前两种）\n\n```\n例如：\npackage com.bj.hz.dzj;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelDuplexHandler;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\nimport io.netty.channel.CombinedChannelDuplexHandler;\nimport io.netty.handler.codec.ByteToMessageDecoder;\nimport io.netty.handler.codec.MessageToByteEncoder;\nimport java.util.List;\n\npublic class MyCodec extends CombinedChannelDuplexHandler {\n\n    public MyCodec(){\n        super(new Mydecode(),new Myencode());\n    }\n\n}\n\nclass Mydecode extends ByteToMessageDecoder{\n\n\n    @Override\n    protected void decode(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf, List<Object> list) throws Exception {\n        //这种是需要判断字节数组的容量是否足够解码，请参考最后使用ReplayingDecoder\n        if (byteBuf.readableBytes()>4){\n            list.add(byteBuf.readInt());\n        }\n    }\n}\n\nclass Myencode extends MessageToByteEncoder<Integer>{\n\n    @Override\n    protected void encode(ChannelHandlerContext channelHandlerContext, Integer integer, ByteBuf byteBuf) throws Exception {\n        byteBuf.writeInt(integer);\n    }\n}\n\n```\n\n\n\n### 使用codec可以统一编解码（前两种）\n* 使用codec 实现编解码一体\n\n```\npackage com.bj.hz.dzj;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.handler.codec.ByteToMessageCodec;\nimport java.util.List;\n\npublic class Mycodec1 extends ByteToMessageCodec<Integer> {\n\n    @Override\n    protected void decode(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf, List list) throws Exception {\n        if (byteBuf.readableBytes()>4){\n            list.add(byteBuf.readInt());\n        }\n    }\n\n    @Override\n    protected void encode(ChannelHandlerContext channelHandlerContext, Integer integer, ByteBuf byteBuf) throws Exception {\n        byteBuf.writeInt(integer);\n    }\n}\n```\n\n### 使用codec实现第三种\n该类型主要实现编码中协议（例如api等）转换\n\n```\npublic class MyMessagetoMessage extends MessageToMessageCodec<Integer,String> {\n    @Override\n    protected void encode(ChannelHandlerContext channelHandlerContext, String s, List<Object> list) throws Exception {\n        list.add(Integer.parseInt(s));\n    }\n\n    @Override\n    protected void decode(ChannelHandlerContext channelHandlerContext, Integer integer, List<Object> list) throws Exception {\n        list.add(String.valueOf(integer));\n    }\n}\n```\n\n### 使用ReplayingDecoder,来实现自动转换，当bytebuf中没有能够转换的足够字节，则会一直等待足够才会转换\n\n```\npackage com.bj.hz.dzj;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.handler.codec.ReplayingDecoder;\nimport java.util.List;\n\npublic class MyreplyingDecoder extends ReplayingDecoder<Integer> {\n    @Override\n    protected void decode(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf, List<Object> list) throws Exception {\n        list.add(byteBuf.readInt());\n    }\n}\n```\n\n","slug":"netty-codec-2018-07-17","published":1,"updated":"2018-07-30T03:55:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk7vj0id0008hd39ybja77ns"},{"title":"solr安装分词","date":"2018-04-03T08:31:51.000Z","_content":"\n* 环境 centos7\n### 下载solr\n`地址：http://www.apache.org/dyn/closer.lua/lucene/solr/7.2.1`\n\n#### 解压\n```bash\ntar -xvf solr-7.2.1.tgz\n\n```\n### 1. 直接使用solr\n```\ncd solrHome(solrHome是solr的路径)\ncd bin\nsolr start\n```\n#### 1.1. 创建core 或者collection 意义一致\n```bash\nsolr create -c articles\n控制台：http://127.0.0.1:8983/solr\n```\n\n#### 1.2. 创建分词器\n```bash\n下载地址：https://pan.baidu.com/s/1smOxPhF\n将解分词资料里的ik-analyzer-solr5-5.x.jar拷贝到你的solr目录下的\\server\\solr-webapp\\webapp\\WEB-INF\\lib目录中去，\n将IKAnalyzer.cfg.xml，mydict.dic（搜狗的扩展词库），stopword.dic放在你的solr目录下的\\server\\solr-webapp\\webapp\\WEB-INF\\classes目录中去\n\n\n修改 articles集合目录下的managed-schema\n\n添加以下4行：\n\n<fieldType name=\"text_ik\" class=\"solr.TextField\">  \n        <analyzer class=\"org.wltea.analyzer.lucene.IKAnalyzer\"/>  \n</fieldType>  \n\n\n重启或者reload\n\n```\n#### 1.3. 创建字段\n```\n{\n    \"add-field\" : {\n        \"name\" : \"name\",\n        \"type\" : \"text_ik\"\n    },\n    \"add-field\" : {\n        \"name\" : \"content\",\n        \"type\" : \"text_ik\",\n        \"stored\" : \"true\"\n    },\n    \"add-field\" : {\n        \"name\" : \"createTime\",\n        \"type\" : \"date\"\n    }\n}\n\npost提交：\nhttp://localhost:8983/solr/articles/schema\n```\n\n#### 1.4. 删除字段\n\n```\n{\n    \"delete-field\" : {\n        \"name\" : \"name\"\n    },\n    \"delete-field\" : {\n        \"name\" : \"content\"\n    }\n}\nhttp://localhost:8983/solr/articles/schema\n```\n\n\n### 2. 使用tomcat作为容器运行solr\n#### 2.1 新创建一个solr_home_new文件夹\n\n```\nexport solr_home=/app/solr-7.2.1\nexport solr_home_new=/app/solr_home\n\n复制 ${solr_home}/server/solr-webapp/webapp 并重命名 ${tomcat}/webapp/solr\ncp -r ${solr_home}/dist  ${solr_home_new}/\ncp ${solr_home}/server/lib/ext/*.jar ${tomcat}/webapp/solr/WEB-INF/lib/\ncp ${solr_home}/server/lib/*.jar ${tomcat}/webapp/solr/WEB-INF/lib/\n#classes文件夹没有自己创建\ncp ${solr_home}/server/resources/log4j.properties ${tomcat}/webapp/solr/WEB-INF/classes \n\n\n#进入 ${tomcat}/webapp/solr/WEB-INF/ 修改web.xml\n修改：修改中间为自己的solr_home_new，我的solr_home_new为solr_home/solr\n\n <env-entry>\n         <env-entry-name>solr/home</env-entry-name>\n         <env-entry-value>/Users/huangzhe/app/solr_home/solr</env-entry-value>\n         <env-entry-type>java.lang.String</env-entry-type>\n</env-entry>\n并注释以下，防止403：\n<!--  <security-constraint>\n    <web-resource-collection>\n      <web-resource-name>Disable TRACE</web-resource-name>\n      <url-pattern>/</url-pattern>\n      <http-method>TRACE</http-method>\n    </web-resource-collection>\n    <auth-constraint/>\n  </security-constraint>\n  <security-constraint>\n    <web-resource-collection>\n      <web-resource-name>Enable everything but TRACE</web-resource-name>\n      <url-pattern>/</url-pattern>\n      <http-method-omission>TRACE</http-method-omission>\n    </web-resource-collection>\n  </security-constraint>\n-->\n\n```\n\n\n#### 2.2 创建core\n```\ncp -r ${solr_home}/server/solr ${solr_home_new}/\ncd ${solr_home_new}/solr\nmkdir new_core\ncp -r configsets/_default/conf new_core\n\n打开浏览器：http://localhost:8080/solr/index.html\n点击：core Admin ,然后更改schema.xml为 managed-schema，点击确定\n```\n\n\n#### 2.3 添加分词器\n与1.2一致，在tomcat下面对应的路径去改\n","source":"_posts/solr安装分词.md","raw":"---\ntitle: solr安装分词\ndate: 2018-04-03 16:31:51\ntags: [\"solr\",\"lucene\",\"search\"]\ncategory: [\"linux\",\"solr\"]\n---\n\n* 环境 centos7\n### 下载solr\n`地址：http://www.apache.org/dyn/closer.lua/lucene/solr/7.2.1`\n\n#### 解压\n```bash\ntar -xvf solr-7.2.1.tgz\n\n```\n### 1. 直接使用solr\n```\ncd solrHome(solrHome是solr的路径)\ncd bin\nsolr start\n```\n#### 1.1. 创建core 或者collection 意义一致\n```bash\nsolr create -c articles\n控制台：http://127.0.0.1:8983/solr\n```\n\n#### 1.2. 创建分词器\n```bash\n下载地址：https://pan.baidu.com/s/1smOxPhF\n将解分词资料里的ik-analyzer-solr5-5.x.jar拷贝到你的solr目录下的\\server\\solr-webapp\\webapp\\WEB-INF\\lib目录中去，\n将IKAnalyzer.cfg.xml，mydict.dic（搜狗的扩展词库），stopword.dic放在你的solr目录下的\\server\\solr-webapp\\webapp\\WEB-INF\\classes目录中去\n\n\n修改 articles集合目录下的managed-schema\n\n添加以下4行：\n\n<fieldType name=\"text_ik\" class=\"solr.TextField\">  \n        <analyzer class=\"org.wltea.analyzer.lucene.IKAnalyzer\"/>  \n</fieldType>  \n\n\n重启或者reload\n\n```\n#### 1.3. 创建字段\n```\n{\n    \"add-field\" : {\n        \"name\" : \"name\",\n        \"type\" : \"text_ik\"\n    },\n    \"add-field\" : {\n        \"name\" : \"content\",\n        \"type\" : \"text_ik\",\n        \"stored\" : \"true\"\n    },\n    \"add-field\" : {\n        \"name\" : \"createTime\",\n        \"type\" : \"date\"\n    }\n}\n\npost提交：\nhttp://localhost:8983/solr/articles/schema\n```\n\n#### 1.4. 删除字段\n\n```\n{\n    \"delete-field\" : {\n        \"name\" : \"name\"\n    },\n    \"delete-field\" : {\n        \"name\" : \"content\"\n    }\n}\nhttp://localhost:8983/solr/articles/schema\n```\n\n\n### 2. 使用tomcat作为容器运行solr\n#### 2.1 新创建一个solr_home_new文件夹\n\n```\nexport solr_home=/app/solr-7.2.1\nexport solr_home_new=/app/solr_home\n\n复制 ${solr_home}/server/solr-webapp/webapp 并重命名 ${tomcat}/webapp/solr\ncp -r ${solr_home}/dist  ${solr_home_new}/\ncp ${solr_home}/server/lib/ext/*.jar ${tomcat}/webapp/solr/WEB-INF/lib/\ncp ${solr_home}/server/lib/*.jar ${tomcat}/webapp/solr/WEB-INF/lib/\n#classes文件夹没有自己创建\ncp ${solr_home}/server/resources/log4j.properties ${tomcat}/webapp/solr/WEB-INF/classes \n\n\n#进入 ${tomcat}/webapp/solr/WEB-INF/ 修改web.xml\n修改：修改中间为自己的solr_home_new，我的solr_home_new为solr_home/solr\n\n <env-entry>\n         <env-entry-name>solr/home</env-entry-name>\n         <env-entry-value>/Users/huangzhe/app/solr_home/solr</env-entry-value>\n         <env-entry-type>java.lang.String</env-entry-type>\n</env-entry>\n并注释以下，防止403：\n<!--  <security-constraint>\n    <web-resource-collection>\n      <web-resource-name>Disable TRACE</web-resource-name>\n      <url-pattern>/</url-pattern>\n      <http-method>TRACE</http-method>\n    </web-resource-collection>\n    <auth-constraint/>\n  </security-constraint>\n  <security-constraint>\n    <web-resource-collection>\n      <web-resource-name>Enable everything but TRACE</web-resource-name>\n      <url-pattern>/</url-pattern>\n      <http-method-omission>TRACE</http-method-omission>\n    </web-resource-collection>\n  </security-constraint>\n-->\n\n```\n\n\n#### 2.2 创建core\n```\ncp -r ${solr_home}/server/solr ${solr_home_new}/\ncd ${solr_home_new}/solr\nmkdir new_core\ncp -r configsets/_default/conf new_core\n\n打开浏览器：http://localhost:8080/solr/index.html\n点击：core Admin ,然后更改schema.xml为 managed-schema，点击确定\n```\n\n\n#### 2.3 添加分词器\n与1.2一致，在tomcat下面对应的路径去改\n","slug":"solr安装分词","published":1,"updated":"2018-04-03T08:34:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk7vj0if000bhd395lrw3v4c"},{"title":"Tcp名词解析","date":"2018-07-25T00:36:02.000Z","_content":"\n### 简介\n主要介绍一些tcp的专业名词以及相关的含义\n\n#### 在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.\n\n\n* SYN表示建立连接\n\n* FIN表示关闭连接\n\n* ACK表示响应\n\n* PSH表示有 DATA数据传输\n\n* RST表示连接重置\n\n\n> 其中，ACK是可能与SYN，FIN等同时使用的，比如SYN和ACK可能同时为1，它表示的就是建立连接之后的响应，\n> 如果只是单个的一个SYN，它表示的只是建立连接。\n> TCP的几次握手就是通过这样的ACK表现出来的。\n> 但SYN与FIN是不会同时为1的，因为前者表示的是建立连接，而后者表示的是断开连接。\n> RST一般是在FIN之后才会出现为1的情况，表示的是连接重置。\n> 一般地，当出现FIN包或RST包时，我们便认为客户端与服务器端断开了连接；而当出现SYN和SYN＋ACK包时，我们认为客户端与服务器建立了一个连接。\n> PSH为1的情况，一般只出现在 DATA内容不为0的包中，也就是说PSH为1表示的是有真正的TCP数据包内容被传递。\n\n\n#### 重传的相关名词\n\n* 处理大负载连接的名词\n```\ntcp_synack_retries   ： 可以用他来减少重试次数\ntcp_max_syn_backlog  ： 可以增大SYN连接数\ntcp_abort_on_overflow： 处理不过来干脆就直接拒绝连接了\n```\n\n* 相关注意的\n\n```\nISN ：init sequence number 初始化序列码\n\nMSL ： max segment lifetime 最大tcp segment存活时间\n\nTIME_WAIT： 为主动关闭方的tcp状态机的状态\n主要有两个原因：1）TIME_WAIT确保有足够的时间让对端收到了ACK，如果被动关闭的那方没有收到Ack，就会触发被动端重发Fin，一来一去正好2个MSL，2）有足够的时间让这个连接不会跟后面的连接混在一起\n\ntcp_tw_reuse：官方文档上说tcp_tw_reuse 加上tcp_timestamps（又叫PAWS, for Protection Against Wrapped Sequence Numbers）可以保证协议的角度上的安全，但是你需要tcp_timestamps在两边都被打开\n\ntcp_tw_recycle：如果是tcp_tw_recycle被打开了话，会假设对端开启了tcp_timestamps，然后会去比较时间戳，如果时间戳变大了，就可以重用。但是，如果对端是一个NAT网络的话（如：一个公司只用一个IP出公网）或是对端的IP被另一台重用了，这个事就复杂了。建链接的SYN可能就被直接丢掉了\n\ntcp_max_tw_buckets：这个是控制并发的TIME_WAIT的数量，默认值是180000，如果超限，那么，系统会把多的给destory掉，然后在日志里打一个警告（如：time wait bucket table overflow），官网文档说这个参数是用来对抗DDoS攻击的。\n\nFast Retransmit ：快速重传机制，当对端没有收到对应的包时，对端会发送三次一样的ack，我们可以通过发送的这种机制，重传丢失的segment\n\nSACK ：Selective Acknowledgment (SACK)，主要是对端接收到的数据块，可以让己方发现哪些没有收到\n\nD-ACK:Duplicate SACK – 重复收到数据的问题,其主要使用了SACK来告诉发送方有哪些数据被重复接收了。\n如果SACK的第一个段的范围被ACK所覆盖，那么就是D-SACK\n如果SACK的第一个段的范围被SACK的第二个段覆盖，那么就是D-SACK\n\n```\n\n\n\nTCP的连接建立和连接关闭，都是通过请求－响应的模式完成的。\n\n### 概念补充-TCP三次握手：\n\nTCP(Transmission Control Protocol)传输控制协议\n\nTCP是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手确认建立一个连接：\n\n位码即tcp标志位，有6种标示：SYN(synchronous建立联机) ACK(acknowledgement 确认) PSH(push传送) FIN(finish结束) RST(reset重置) URG(urgent紧急)Sequence number(顺序号码) Acknowledge number(确认号码)\n\n```\n第一次握手：主机A发送位码为syn＝1，随机产生seq number=1234567的数据包到服务器，主机B由SYN=1知道，A要求建立联机；\n第二次握手：主机B收到请求后要确认联机信息，向A发送ack number=(主机A的seq+1)，syn=1，ACK=1，随机产生seq=7654321的包；\n第三次握手：主机A收到后检查ack number是否正确，即第一次发送的seq number+1，以及位码ACK是否为1，若正确，主机A会再发送ack number=(主机B的seq+1)，ACK=1，主机B收到后确认seq值与ACK=1则连接建立成功。\n\n完成三次握手，主机A与主机B开始传送数据。\n\n\n在TCP/IP协议中，TCP协议提供可靠的连接服务，采用三次握手建立一个连接。\n第一次握手：建立连接时，客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；\n第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；\n第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。完成三次握手，客户端与服务器开始传送数据.\n```\n\n### 概念补充-TCP四次挥手：\n* 以客户端主动挥手为例\n```\n第一次挥手：客户端发送fin=1 ,seq=x,ack=y，此时客户端状态为fin_wait1,等待服务器确认\n第二次挥手：服务端接收后，先发送ack=x+1，此时服务端状态进入close_wait,客户端接收后状态进入fin_wait2\n第三次挥手：服务端发送fin=1,seq=y+1,此时服务端状态进入last_ack，客户端接收后进入time_wait\n第四次挥手：客户端接收到上面两个后，发送ack=y+2,服务端收到后会关闭;\n\n客户端time_wait状态等待timeout时间后，才会释放关闭\n```\n\n* 客户端与服务端同时关闭\n```\n第一次与第二次挥手同时进行\n1.客户端与服务端同时发送fin,seq,ack,两者接收后，此时客户端与服务端同时进入fin_wait1,等待对方确认\n2.客户端与服务端同时发送ack,两者接收后同时进入time_wait\n\n两者都在time_wait状态等待timeout时间后，才会释放关闭\n```\n\n\n\n\n\n\n\n\n\n","source":"_posts/tcp名词解析-2018-07-25.md","raw":"---\ntitle: Tcp名词解析\ndate: 2018-07-25 08:36:02\ntags: tcp\ncategories: [\"internet\",\"tcp\"]\n---\n\n### 简介\n主要介绍一些tcp的专业名词以及相关的含义\n\n#### 在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.\n\n\n* SYN表示建立连接\n\n* FIN表示关闭连接\n\n* ACK表示响应\n\n* PSH表示有 DATA数据传输\n\n* RST表示连接重置\n\n\n> 其中，ACK是可能与SYN，FIN等同时使用的，比如SYN和ACK可能同时为1，它表示的就是建立连接之后的响应，\n> 如果只是单个的一个SYN，它表示的只是建立连接。\n> TCP的几次握手就是通过这样的ACK表现出来的。\n> 但SYN与FIN是不会同时为1的，因为前者表示的是建立连接，而后者表示的是断开连接。\n> RST一般是在FIN之后才会出现为1的情况，表示的是连接重置。\n> 一般地，当出现FIN包或RST包时，我们便认为客户端与服务器端断开了连接；而当出现SYN和SYN＋ACK包时，我们认为客户端与服务器建立了一个连接。\n> PSH为1的情况，一般只出现在 DATA内容不为0的包中，也就是说PSH为1表示的是有真正的TCP数据包内容被传递。\n\n\n#### 重传的相关名词\n\n* 处理大负载连接的名词\n```\ntcp_synack_retries   ： 可以用他来减少重试次数\ntcp_max_syn_backlog  ： 可以增大SYN连接数\ntcp_abort_on_overflow： 处理不过来干脆就直接拒绝连接了\n```\n\n* 相关注意的\n\n```\nISN ：init sequence number 初始化序列码\n\nMSL ： max segment lifetime 最大tcp segment存活时间\n\nTIME_WAIT： 为主动关闭方的tcp状态机的状态\n主要有两个原因：1）TIME_WAIT确保有足够的时间让对端收到了ACK，如果被动关闭的那方没有收到Ack，就会触发被动端重发Fin，一来一去正好2个MSL，2）有足够的时间让这个连接不会跟后面的连接混在一起\n\ntcp_tw_reuse：官方文档上说tcp_tw_reuse 加上tcp_timestamps（又叫PAWS, for Protection Against Wrapped Sequence Numbers）可以保证协议的角度上的安全，但是你需要tcp_timestamps在两边都被打开\n\ntcp_tw_recycle：如果是tcp_tw_recycle被打开了话，会假设对端开启了tcp_timestamps，然后会去比较时间戳，如果时间戳变大了，就可以重用。但是，如果对端是一个NAT网络的话（如：一个公司只用一个IP出公网）或是对端的IP被另一台重用了，这个事就复杂了。建链接的SYN可能就被直接丢掉了\n\ntcp_max_tw_buckets：这个是控制并发的TIME_WAIT的数量，默认值是180000，如果超限，那么，系统会把多的给destory掉，然后在日志里打一个警告（如：time wait bucket table overflow），官网文档说这个参数是用来对抗DDoS攻击的。\n\nFast Retransmit ：快速重传机制，当对端没有收到对应的包时，对端会发送三次一样的ack，我们可以通过发送的这种机制，重传丢失的segment\n\nSACK ：Selective Acknowledgment (SACK)，主要是对端接收到的数据块，可以让己方发现哪些没有收到\n\nD-ACK:Duplicate SACK – 重复收到数据的问题,其主要使用了SACK来告诉发送方有哪些数据被重复接收了。\n如果SACK的第一个段的范围被ACK所覆盖，那么就是D-SACK\n如果SACK的第一个段的范围被SACK的第二个段覆盖，那么就是D-SACK\n\n```\n\n\n\nTCP的连接建立和连接关闭，都是通过请求－响应的模式完成的。\n\n### 概念补充-TCP三次握手：\n\nTCP(Transmission Control Protocol)传输控制协议\n\nTCP是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手确认建立一个连接：\n\n位码即tcp标志位，有6种标示：SYN(synchronous建立联机) ACK(acknowledgement 确认) PSH(push传送) FIN(finish结束) RST(reset重置) URG(urgent紧急)Sequence number(顺序号码) Acknowledge number(确认号码)\n\n```\n第一次握手：主机A发送位码为syn＝1，随机产生seq number=1234567的数据包到服务器，主机B由SYN=1知道，A要求建立联机；\n第二次握手：主机B收到请求后要确认联机信息，向A发送ack number=(主机A的seq+1)，syn=1，ACK=1，随机产生seq=7654321的包；\n第三次握手：主机A收到后检查ack number是否正确，即第一次发送的seq number+1，以及位码ACK是否为1，若正确，主机A会再发送ack number=(主机B的seq+1)，ACK=1，主机B收到后确认seq值与ACK=1则连接建立成功。\n\n完成三次握手，主机A与主机B开始传送数据。\n\n\n在TCP/IP协议中，TCP协议提供可靠的连接服务，采用三次握手建立一个连接。\n第一次握手：建立连接时，客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；\n第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；\n第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。完成三次握手，客户端与服务器开始传送数据.\n```\n\n### 概念补充-TCP四次挥手：\n* 以客户端主动挥手为例\n```\n第一次挥手：客户端发送fin=1 ,seq=x,ack=y，此时客户端状态为fin_wait1,等待服务器确认\n第二次挥手：服务端接收后，先发送ack=x+1，此时服务端状态进入close_wait,客户端接收后状态进入fin_wait2\n第三次挥手：服务端发送fin=1,seq=y+1,此时服务端状态进入last_ack，客户端接收后进入time_wait\n第四次挥手：客户端接收到上面两个后，发送ack=y+2,服务端收到后会关闭;\n\n客户端time_wait状态等待timeout时间后，才会释放关闭\n```\n\n* 客户端与服务端同时关闭\n```\n第一次与第二次挥手同时进行\n1.客户端与服务端同时发送fin,seq,ack,两者接收后，此时客户端与服务端同时进入fin_wait1,等待对方确认\n2.客户端与服务端同时发送ack,两者接收后同时进入time_wait\n\n两者都在time_wait状态等待timeout时间后，才会释放关闭\n```\n\n\n\n\n\n\n\n\n\n","slug":"tcp名词解析-2018-07-25","published":1,"updated":"2018-07-30T03:52:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk7vj0ii000dhd39oyksc3cj"},{"title":"Tcp学习_上","date":"2018-07-20T00:36:02.000Z","_content":"\n> 本文主要参考、copy陈皓老师的tcp那些事儿，再此谢谢陈皓老师\n\n\n### 简介\ntcp在网络OSI的七层模型中第四层--transport层，ip在第三层--network层，Arp在第二层--data link层，在第二层的数据，我们叫Frame，在第三层的数据我们叫Packet，第四层的数据叫segment\n\n### 数据流向\n数据 -> tcp(segment) -> ip(packet) -> data link(frame) \n每个层解析自己的协议，数据交给上层\n\n\n### Tcp头格式\n![tcp头部](/images/tcp/tcp-header01.png)\n\n<center>tcp头部</center>\n\n* tcp头部没有ip地址\b，那个是ip层的事，tcp包含源端口、与目标端口\n\n> 一个tcp连接需要源ip、目标ip、源端口、目标端口、\b以及协议才能表示同一个连接\n* sequence number:包序号，解决网络包乱序问题\n* acknowledgement number: 就是ack，用来确认收到消息，解决不丢包的问题\n* window ：advertised-window ，滑动窗口，解决流控\n* tcp flag：包类型，操控tcp的状态机\n\n![tcp头部其他定义](/images/tcp/tcp-header02.png)\n<center>tcp头部其他定义</center>\n\n### tcp的状态机\n网络上的传输是没有连接的，包括TCP也是一样的。而TCP所谓的“连接”，其实只不过是在通讯的双方维护一个“连接状态”，让它看上去好像有连接一样。所以，TCP的状态变换是非常重要的\n\n![tcp状态机](/images/tcp/tcp-fsm.png)\n<center>tcp状态机</center>\n\n![tcp开始关闭示意图](/images/tcp/tcp-open-close.jpg)\n<center>tcp开始关闭示意图</center>\n\n\n#### tcb\n在网络传输层，tcp模块中有一个tcb（传输控制模块，transmit control block），它用于记录tcp协议运行过程中的 变量。对于有多个连接的tcp，每个连接都有一个tcb。tcb结构的定义包括这个连接使用 的源端口、目的端口、目的ip、序号、应答序号、对方窗口大小、己方窗口大小、tcp状态、top输入/输出队列、应用层输出队列、tcp的重传有关变量。\n\n\n#### 对于建链接的3次握手\n主要是要初始化Sequence Number 的初始值。通信的双方要互相通知对方自己的初始化的Sequence Number（缩写为ISN：Inital Sequence Number）——所以叫SYN，全称Synchronize Sequence Numbers。也就上图中的 x 和 y。这个号要作为以后的数据通信的序号，以保证应用层接收到的数据不会因为网络上的传输的问题而乱序（TCP会用这个序号来拼接数据）。\n#### 对于4次挥手\n其实你仔细看是2次，因为TCP是全双工的，所以，发送方和接收方都需要Fin和Ack。只不过，有一方是被动的，所以看上去就成了所谓的4次挥手。如果两边同时断连接，那就会就进入到CLOSING状态，然后到达TIME_WAIT状态。下图是双方同时断连接的示意图（你同样可以对照着TCP状态机看）\n\n![tcp同步关闭示意图](/images/tcp/tcp-closesimul.png)\n<center>tcp同步关闭示意图</center>\n\n\n\n### tcp重传机制\n#### 超时重传机制\n不回ack，死等，当发现方发现收不到ack的超时后，会重传3，有严重的性能问题，会导致多次重传\n\n#### 快速重传机制\ntcp引入了一种叫做fast retransmit的算法，以数据为驱动，不以时间为驱动，解决了timeout的问题\n> 如果某个包没有连续到达，就ack最后那个可能被丢了的包，如果发送方连续收到三次相同的ack，就重传--好处是不用等到timeout再重传\n\n##### 问题\n如果发送发送多个对端，发现三次的ack传来，并不知道是一个对端、还是三个对端，这个时候，是重传丢失的，还是丢失后的都要传\n\n#### sack方法\nSelective Acknowledgment (SACK)，在tcp头里面加入sack的东西，ACK还是Fast Retransmit的ACK，SACK则是汇报收到的数据碎版\n这个协议需要两边都支持，因此在 Linux下，可以通过tcp_sack参数打开这个功能（Linux 2.4后默认打开\n\n![tcp-Sack](/images/tcp/tcp-sack_example.jpg)\n<center>tcp-Sack示意图</center>\n\n##### 问题\n* 问题——接收方Reneging\n所谓Reneging的意思就是接收方有权把已经报给发送端SACK里的数据给丢了。这样干是不被鼓励的，因为这个事会把问题复杂化了，但是，接收方这么做可能会有些极端情况，比如要把内存给别的更重要的东西。所以，发送方也不能完全依赖SACK，还是要依赖ACK，并维护Time-Out，如果后续的ACK没有增长，那么还是要把SACK的东西重传，另外，接收端这边永远不能把SACK的包标记为Ack。\n\n* 问题——性能问题\nSACK会消费发送方的资源，试想，如果一个攻击者给数据发送方发一堆SACK的选项，这会导致发送方开始要重传甚至遍历已经发出的数据，这会消耗很多发送端的资源。\n\n#### Duplicate SACK – 重复收到数据的问题\nLinux下的tcp_dsack参数用于开启这个功能（Linux 2.4后默认打开）\n\nD-SACK使用了SACK的第一个段来做标志，\n如果SACK的第一个段的范围被ACK所覆盖，那么就是D-SACK\n如果SACK的第一个段的范围被SACK的第二个段覆盖，那么就是D-SACK\n\n* 示例一：ACK丢包\n\n下面的示例中，丢了两个ACK，所以，发送端重传了第一个数据包（3000-3499），于是接收端发现重复收到，于是回了一个SACK=3000-3500，因为ACK都到了4000意味着收到了4000之前的所有数据，所以这个SACK就是D-SACK——旨在告诉发送端我收到了重复的数据，而且我们的发送端还知道，数据包没有丢，丢的是ACK包。\n\n```\nTransmitted  Received    ACK Sent\nSegment      Segment     (Including SACK Blocks)\n \n3000-3499    3000-3499   3500 (ACK dropped)\n3500-3999    3500-3999   4000 (ACK dropped)\n3000-3499    3000-3499   4000, SACK=3000-3500\n```\n\n\n* 示例二: 网络延误\n\n下面的示例中，网络包（1000-1499）被网络给延误了，导致发送方没有收到ACK，而后面到达的三个包触发了“Fast Retransmit算法”，所以重传，但重传时，被延误的包又到了，所以，回了一个SACK=1000-1500，因为ACK已到了3000，所以，这个SACK是D-SACK——标识收到了重复的包。\n\n这个案例下，发送端知道之前因为“Fast Retransmit算法”触发的重传不是因为发出去的包丢了，也不是因为回应的ACK包丢了，而是因为网络延时了。\n\n```\nTransmitted    Received    ACK Sent\nSegment        Segment     (Including SACK Blocks)\n \n500-999        500-999     1000\n1000-1499      (delayed)\n1500-1999      1500-1999   1000, SACK=1500-2000\n2000-2499      2000-2499   1000, SACK=1500-2500\n2500-2999      2500-2999   1000, SACK=1500-3000\n1000-1499      1000-1499   3000\n               1000-1499   3000, SACK=1000-1500\n```\n\n* 优点\n1）可以让发送方知道，是发出去的包丢了，还是回来的ACK包丢了。\n\n2）是不是自己的timeout太小了，导致重传。\n\n3）网络上出现了先发的包后到的情况（又称reordering）\n\n4）网络上是不是把我的数据包给复制了。\n\n\n\n### 名词解释\n* msl ：max segment lifetime    tpc segment在网络上的存活时间\n* isn ：init sequence number    初始化序列数字\n* time_wait: 确保有足够时间让对端收到ack，一来一回两个msl ，因此超时设置为2*msl\n* FIN ：finish 表示关闭连接\n* tcp_max_tw_buckets ： time_wait的最大数量，默认为180000\n\n\n\n### 最佳实践\n#### 处理大负载连接\n调整三个TCP参数可供你选择，第一个是：tcp_synack_retries 可以用他来减少重试次数；第二个是：tcp_max_syn_backlog，可以增大SYN连接数；第三个是：tcp_abort_on_overflow 处理不过来干脆就直接拒绝连接了。\n\ntcp_tw_reuse和tcp_tw_recycle来解决TIME_WAIT的问题是非常非常危险的，因为这两个参数违反了TCP协议\n","source":"_posts/tcp学习上-2018-07-24.md","raw":"---\ntitle: Tcp学习_上\ndate: 2018-07-20 08:36:02\ntags: tcp\ncategories: \"internet\"\n---\n\n> 本文主要参考、copy陈皓老师的tcp那些事儿，再此谢谢陈皓老师\n\n\n### 简介\ntcp在网络OSI的七层模型中第四层--transport层，ip在第三层--network层，Arp在第二层--data link层，在第二层的数据，我们叫Frame，在第三层的数据我们叫Packet，第四层的数据叫segment\n\n### 数据流向\n数据 -> tcp(segment) -> ip(packet) -> data link(frame) \n每个层解析自己的协议，数据交给上层\n\n\n### Tcp头格式\n![tcp头部](/images/tcp/tcp-header01.png)\n\n<center>tcp头部</center>\n\n* tcp头部没有ip地址\b，那个是ip层的事，tcp包含源端口、与目标端口\n\n> 一个tcp连接需要源ip、目标ip、源端口、目标端口、\b以及协议才能表示同一个连接\n* sequence number:包序号，解决网络包乱序问题\n* acknowledgement number: 就是ack，用来确认收到消息，解决不丢包的问题\n* window ：advertised-window ，滑动窗口，解决流控\n* tcp flag：包类型，操控tcp的状态机\n\n![tcp头部其他定义](/images/tcp/tcp-header02.png)\n<center>tcp头部其他定义</center>\n\n### tcp的状态机\n网络上的传输是没有连接的，包括TCP也是一样的。而TCP所谓的“连接”，其实只不过是在通讯的双方维护一个“连接状态”，让它看上去好像有连接一样。所以，TCP的状态变换是非常重要的\n\n![tcp状态机](/images/tcp/tcp-fsm.png)\n<center>tcp状态机</center>\n\n![tcp开始关闭示意图](/images/tcp/tcp-open-close.jpg)\n<center>tcp开始关闭示意图</center>\n\n\n#### tcb\n在网络传输层，tcp模块中有一个tcb（传输控制模块，transmit control block），它用于记录tcp协议运行过程中的 变量。对于有多个连接的tcp，每个连接都有一个tcb。tcb结构的定义包括这个连接使用 的源端口、目的端口、目的ip、序号、应答序号、对方窗口大小、己方窗口大小、tcp状态、top输入/输出队列、应用层输出队列、tcp的重传有关变量。\n\n\n#### 对于建链接的3次握手\n主要是要初始化Sequence Number 的初始值。通信的双方要互相通知对方自己的初始化的Sequence Number（缩写为ISN：Inital Sequence Number）——所以叫SYN，全称Synchronize Sequence Numbers。也就上图中的 x 和 y。这个号要作为以后的数据通信的序号，以保证应用层接收到的数据不会因为网络上的传输的问题而乱序（TCP会用这个序号来拼接数据）。\n#### 对于4次挥手\n其实你仔细看是2次，因为TCP是全双工的，所以，发送方和接收方都需要Fin和Ack。只不过，有一方是被动的，所以看上去就成了所谓的4次挥手。如果两边同时断连接，那就会就进入到CLOSING状态，然后到达TIME_WAIT状态。下图是双方同时断连接的示意图（你同样可以对照着TCP状态机看）\n\n![tcp同步关闭示意图](/images/tcp/tcp-closesimul.png)\n<center>tcp同步关闭示意图</center>\n\n\n\n### tcp重传机制\n#### 超时重传机制\n不回ack，死等，当发现方发现收不到ack的超时后，会重传3，有严重的性能问题，会导致多次重传\n\n#### 快速重传机制\ntcp引入了一种叫做fast retransmit的算法，以数据为驱动，不以时间为驱动，解决了timeout的问题\n> 如果某个包没有连续到达，就ack最后那个可能被丢了的包，如果发送方连续收到三次相同的ack，就重传--好处是不用等到timeout再重传\n\n##### 问题\n如果发送发送多个对端，发现三次的ack传来，并不知道是一个对端、还是三个对端，这个时候，是重传丢失的，还是丢失后的都要传\n\n#### sack方法\nSelective Acknowledgment (SACK)，在tcp头里面加入sack的东西，ACK还是Fast Retransmit的ACK，SACK则是汇报收到的数据碎版\n这个协议需要两边都支持，因此在 Linux下，可以通过tcp_sack参数打开这个功能（Linux 2.4后默认打开\n\n![tcp-Sack](/images/tcp/tcp-sack_example.jpg)\n<center>tcp-Sack示意图</center>\n\n##### 问题\n* 问题——接收方Reneging\n所谓Reneging的意思就是接收方有权把已经报给发送端SACK里的数据给丢了。这样干是不被鼓励的，因为这个事会把问题复杂化了，但是，接收方这么做可能会有些极端情况，比如要把内存给别的更重要的东西。所以，发送方也不能完全依赖SACK，还是要依赖ACK，并维护Time-Out，如果后续的ACK没有增长，那么还是要把SACK的东西重传，另外，接收端这边永远不能把SACK的包标记为Ack。\n\n* 问题——性能问题\nSACK会消费发送方的资源，试想，如果一个攻击者给数据发送方发一堆SACK的选项，这会导致发送方开始要重传甚至遍历已经发出的数据，这会消耗很多发送端的资源。\n\n#### Duplicate SACK – 重复收到数据的问题\nLinux下的tcp_dsack参数用于开启这个功能（Linux 2.4后默认打开）\n\nD-SACK使用了SACK的第一个段来做标志，\n如果SACK的第一个段的范围被ACK所覆盖，那么就是D-SACK\n如果SACK的第一个段的范围被SACK的第二个段覆盖，那么就是D-SACK\n\n* 示例一：ACK丢包\n\n下面的示例中，丢了两个ACK，所以，发送端重传了第一个数据包（3000-3499），于是接收端发现重复收到，于是回了一个SACK=3000-3500，因为ACK都到了4000意味着收到了4000之前的所有数据，所以这个SACK就是D-SACK——旨在告诉发送端我收到了重复的数据，而且我们的发送端还知道，数据包没有丢，丢的是ACK包。\n\n```\nTransmitted  Received    ACK Sent\nSegment      Segment     (Including SACK Blocks)\n \n3000-3499    3000-3499   3500 (ACK dropped)\n3500-3999    3500-3999   4000 (ACK dropped)\n3000-3499    3000-3499   4000, SACK=3000-3500\n```\n\n\n* 示例二: 网络延误\n\n下面的示例中，网络包（1000-1499）被网络给延误了，导致发送方没有收到ACK，而后面到达的三个包触发了“Fast Retransmit算法”，所以重传，但重传时，被延误的包又到了，所以，回了一个SACK=1000-1500，因为ACK已到了3000，所以，这个SACK是D-SACK——标识收到了重复的包。\n\n这个案例下，发送端知道之前因为“Fast Retransmit算法”触发的重传不是因为发出去的包丢了，也不是因为回应的ACK包丢了，而是因为网络延时了。\n\n```\nTransmitted    Received    ACK Sent\nSegment        Segment     (Including SACK Blocks)\n \n500-999        500-999     1000\n1000-1499      (delayed)\n1500-1999      1500-1999   1000, SACK=1500-2000\n2000-2499      2000-2499   1000, SACK=1500-2500\n2500-2999      2500-2999   1000, SACK=1500-3000\n1000-1499      1000-1499   3000\n               1000-1499   3000, SACK=1000-1500\n```\n\n* 优点\n1）可以让发送方知道，是发出去的包丢了，还是回来的ACK包丢了。\n\n2）是不是自己的timeout太小了，导致重传。\n\n3）网络上出现了先发的包后到的情况（又称reordering）\n\n4）网络上是不是把我的数据包给复制了。\n\n\n\n### 名词解释\n* msl ：max segment lifetime    tpc segment在网络上的存活时间\n* isn ：init sequence number    初始化序列数字\n* time_wait: 确保有足够时间让对端收到ack，一来一回两个msl ，因此超时设置为2*msl\n* FIN ：finish 表示关闭连接\n* tcp_max_tw_buckets ： time_wait的最大数量，默认为180000\n\n\n\n### 最佳实践\n#### 处理大负载连接\n调整三个TCP参数可供你选择，第一个是：tcp_synack_retries 可以用他来减少重试次数；第二个是：tcp_max_syn_backlog，可以增大SYN连接数；第三个是：tcp_abort_on_overflow 处理不过来干脆就直接拒绝连接了。\n\ntcp_tw_reuse和tcp_tw_recycle来解决TIME_WAIT的问题是非常非常危险的，因为这两个参数违反了TCP协议\n","slug":"tcp学习上-2018-07-24","published":1,"updated":"2018-07-30T03:52:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk7vj0ij000fhd39j14qc651"},{"title":"Tcp学习-下","date":"2018-07-25T00:36:02.000Z","_content":"\n\n### 简介\ntcp要解决一个很大的事情，就是要在一个网络根据不同的情况来动态调整自己的发包速度---小则让自己更稳定，大则让整个网络更稳定\n\n\n### tcp的rtt算法\ntimeout 太大->重发慢->丢了半天重发-> 没效率->性能差\n\ntimeout 太小->可能没有丢就重发->重发就快、增加网络拥堵，导致更多超时 (恶性循环导致更多重发)\n\n* RTT：round trip time 就是一个数据包从发出去到回来的时间。这样发送端就可以设置RTO\n* RTO：retransmission timeout 重传超时\n* SRTT：smoothed RTT 平滑RTT\n\n\n### tcp滑动窗口\ntcp必须解决的可靠传输以及包乱序问题，所以tcp必须知道网络实际的数据处理带宽或者数据处理的速度，这样才不会引起网络拥塞，导致丢包\n\n所以tcp，引入了一些技术做网络流控，sliding window是其中的一个技术，tcp里面有一个字段叫做window，又叫Advertised-window,这个字段是接收端告诉发送端自己还有多少缓冲区可以接收数据。于是发送端就可以根据这个接收端的处理能力发送数据，而不会导致接收端处理不过来。\n\n#### Zero Window\n接收端可能没有多余的窗口了，那么当恢复到足够的窗口大小时，怎么通知发送端呢？ \n\n解决这个问题使用了Zero Window Probe，缩写为zwp，也就是说，发送端在窗口的值变成0后，会发zwp的包给接收方，让接收方来ack他的window，一般这个值会设置3次，第三次大约30-60s，如果3次过后还是0的话，tcp就会发RST把连接断掉\n\n#### Silly Window Syndrome\n糊涂窗口综合征，接收方太忙了，来不及取走Receive window里的数据，那么，会导致发送方越来越小，到最后，如果接收方有几个字节并告诉发送方，那么发送方会义无反顾发送几个字节。\n\n* MTU：以太网 MTU是1500字节，出去TCP+IP头的40个字节，真正的数据传输为1460，这就是MSS，Maximum Transmission Unit，MTU\n* MSS：max segment size 最大tcp包大小\n\n\n\n### TCP的拥塞处理 – Congestion Handling\nTCP不是一个自私的协议，当拥塞发生的时候，要做自我牺牲。就像交通阻塞一样，每个车都应该把路让出来，而不要再去抢路了\n\n拥塞处理的四种算法：\n\n1）慢启动，2）拥塞避免，3）拥塞发生，4）快速恢复\n\n首先，我们来看一下TCP的慢热启动。慢启动的意思是，刚刚加入网络的连接，一点一点地提速，不要一上来就像那些特权车一样霸道地把路占满。新同学上高速还是要慢一点，不要把已经在高速上的秩序给搞乱了。\n\n#### 慢启动的算法如下(cwnd全称Congestion Window)：\n\n1）连接建好的开始先初始化cwnd = 1，表明可以传一个MSS大小的数据。\n\n2）每当收到一个ACK，cwnd++; 呈线性上升\n\n3）每当过了一个RTT，cwnd = cwnd*2; 呈指数让升\n\n4）还有一个ssthresh（slow start threshold），是一个上限，当cwnd >= ssthresh时，就会进入“拥塞避免算法”（后面会说这个算法）\n\n所以，我们可以看到，如果网速很快的话，ACK也会返回得快，RTT也会短，那么，这个慢启动就一点也不慢。下图说明了这个过程。\n\n\n\n#### 拥塞避免算法 – Congestion Avoidance\n前面说过，还有一个ssthresh（slow start threshold），是一个上限，当cwnd >= ssthresh时，就会进入“拥塞避免算法”。一般来说ssthresh的值是65535，单位是字节，当cwnd达到这个值时后，算法如下：\n\n1）收到一个ACK时，cwnd = cwnd + 1/cwnd\n\n2）当每过一个RTT时，cwnd = cwnd + 1\n\n这样就可以避免增长过快导致网络拥塞，慢慢的增加调整到网络的最佳值。很明显，是一个线性上升的算法。\n\n\n前面我们说过，当丢包的时候，会有两种情况：\n\n1）等到RTO超时，重传数据包。TCP认为这种情况太糟糕，反应也很强烈。\n```\nsshthresh =  cwnd /2\ncwnd 重置为 1\n进入慢启动过程\n2）Fast Retransmit算法，也就是在收到3个duplicate ACK时就开启重传，而不用等到RTO超时。\n\nTCP Tahoe的实现和RTO超时一样。\nTCP Reno的实现是：\ncwnd = cwnd /2\nsshthresh = cwnd\n进入快速恢复算法——Fast Recovery\n上面我们可以看到RTO超时后，sshthresh会变成cwnd的一半，这意味着，如果cwnd<=sshthresh时出现的丢包，那么TCP的sshthresh就会减了一半，然后等cwnd又很快地以指数级增涨爬到这个地方时，就会成慢慢的线性增涨。我们可以看到，TCP是怎么通过这种强烈地震荡快速而小心得找到网站流量的平衡点的。\n```\n\n#### 快速恢复算法 – Fast Recovery\nTCP Reno\n\n这个算法定义在RFC5681。快速重传和快速恢复算法一般同时使用。快速恢复算法是认为，你还有3个Duplicated Acks说明网络也不那么糟糕，所以没有必要像RTO超时那么强烈。 注意，正如前面所说，进入Fast Recovery之前，cwnd 和 sshthresh已被更新：\n```\ncwnd = cwnd /2\nsshthresh = cwnd\n然后，真正的Fast Recovery算法如下：\n\ncwnd = sshthresh  + 3 * MSS （3的意思是确认有3个数据包被收到了）\n重传Duplicated ACKs指定的数据包\n如果再收到 duplicated Acks，那么cwnd = cwnd +1\n如果收到了新的Ack，那么，cwnd = sshthresh ，然后就进入了拥塞避免的算法了。\n如果你仔细思考一下上面的这个算法，你就会知道，上面这个算法也有问题，那就是——它依赖于3个重复的Acks。注意，3个重复的Acks并不代表只丢了一个数据包，很有可能是丢了好多包。但这个算法只会重传一个，而剩下的那些包只能等到RTO超时，于是，进入了恶梦模式——超时一个窗口就减半一下，多个超时会超成TCP的传输速度呈级数下降，而且也不会触发Fast Recovery算法了。\n\n通常来说，正如我们前面所说的，SACK或D-SACK的方法可以让Fast Recovery或Sender在做决定时更聪明一些，但是并不是所有的TCP的实现都支持SACK（SACK需要两端都支持），所以，需要一个没有SACK的解决方案。而通过SACK进行拥塞控制的算法是FACK（后面会讲）\n```\n","source":"_posts/tcp学习下-2018-07-26.md","raw":"---\ntitle: Tcp学习-下\ndate: 2018-07-25 08:36:02\ntags: tcp\ncategories: [\"internet\",\"tcp\"]\n---\n\n\n### 简介\ntcp要解决一个很大的事情，就是要在一个网络根据不同的情况来动态调整自己的发包速度---小则让自己更稳定，大则让整个网络更稳定\n\n\n### tcp的rtt算法\ntimeout 太大->重发慢->丢了半天重发-> 没效率->性能差\n\ntimeout 太小->可能没有丢就重发->重发就快、增加网络拥堵，导致更多超时 (恶性循环导致更多重发)\n\n* RTT：round trip time 就是一个数据包从发出去到回来的时间。这样发送端就可以设置RTO\n* RTO：retransmission timeout 重传超时\n* SRTT：smoothed RTT 平滑RTT\n\n\n### tcp滑动窗口\ntcp必须解决的可靠传输以及包乱序问题，所以tcp必须知道网络实际的数据处理带宽或者数据处理的速度，这样才不会引起网络拥塞，导致丢包\n\n所以tcp，引入了一些技术做网络流控，sliding window是其中的一个技术，tcp里面有一个字段叫做window，又叫Advertised-window,这个字段是接收端告诉发送端自己还有多少缓冲区可以接收数据。于是发送端就可以根据这个接收端的处理能力发送数据，而不会导致接收端处理不过来。\n\n#### Zero Window\n接收端可能没有多余的窗口了，那么当恢复到足够的窗口大小时，怎么通知发送端呢？ \n\n解决这个问题使用了Zero Window Probe，缩写为zwp，也就是说，发送端在窗口的值变成0后，会发zwp的包给接收方，让接收方来ack他的window，一般这个值会设置3次，第三次大约30-60s，如果3次过后还是0的话，tcp就会发RST把连接断掉\n\n#### Silly Window Syndrome\n糊涂窗口综合征，接收方太忙了，来不及取走Receive window里的数据，那么，会导致发送方越来越小，到最后，如果接收方有几个字节并告诉发送方，那么发送方会义无反顾发送几个字节。\n\n* MTU：以太网 MTU是1500字节，出去TCP+IP头的40个字节，真正的数据传输为1460，这就是MSS，Maximum Transmission Unit，MTU\n* MSS：max segment size 最大tcp包大小\n\n\n\n### TCP的拥塞处理 – Congestion Handling\nTCP不是一个自私的协议，当拥塞发生的时候，要做自我牺牲。就像交通阻塞一样，每个车都应该把路让出来，而不要再去抢路了\n\n拥塞处理的四种算法：\n\n1）慢启动，2）拥塞避免，3）拥塞发生，4）快速恢复\n\n首先，我们来看一下TCP的慢热启动。慢启动的意思是，刚刚加入网络的连接，一点一点地提速，不要一上来就像那些特权车一样霸道地把路占满。新同学上高速还是要慢一点，不要把已经在高速上的秩序给搞乱了。\n\n#### 慢启动的算法如下(cwnd全称Congestion Window)：\n\n1）连接建好的开始先初始化cwnd = 1，表明可以传一个MSS大小的数据。\n\n2）每当收到一个ACK，cwnd++; 呈线性上升\n\n3）每当过了一个RTT，cwnd = cwnd*2; 呈指数让升\n\n4）还有一个ssthresh（slow start threshold），是一个上限，当cwnd >= ssthresh时，就会进入“拥塞避免算法”（后面会说这个算法）\n\n所以，我们可以看到，如果网速很快的话，ACK也会返回得快，RTT也会短，那么，这个慢启动就一点也不慢。下图说明了这个过程。\n\n\n\n#### 拥塞避免算法 – Congestion Avoidance\n前面说过，还有一个ssthresh（slow start threshold），是一个上限，当cwnd >= ssthresh时，就会进入“拥塞避免算法”。一般来说ssthresh的值是65535，单位是字节，当cwnd达到这个值时后，算法如下：\n\n1）收到一个ACK时，cwnd = cwnd + 1/cwnd\n\n2）当每过一个RTT时，cwnd = cwnd + 1\n\n这样就可以避免增长过快导致网络拥塞，慢慢的增加调整到网络的最佳值。很明显，是一个线性上升的算法。\n\n\n前面我们说过，当丢包的时候，会有两种情况：\n\n1）等到RTO超时，重传数据包。TCP认为这种情况太糟糕，反应也很强烈。\n```\nsshthresh =  cwnd /2\ncwnd 重置为 1\n进入慢启动过程\n2）Fast Retransmit算法，也就是在收到3个duplicate ACK时就开启重传，而不用等到RTO超时。\n\nTCP Tahoe的实现和RTO超时一样。\nTCP Reno的实现是：\ncwnd = cwnd /2\nsshthresh = cwnd\n进入快速恢复算法——Fast Recovery\n上面我们可以看到RTO超时后，sshthresh会变成cwnd的一半，这意味着，如果cwnd<=sshthresh时出现的丢包，那么TCP的sshthresh就会减了一半，然后等cwnd又很快地以指数级增涨爬到这个地方时，就会成慢慢的线性增涨。我们可以看到，TCP是怎么通过这种强烈地震荡快速而小心得找到网站流量的平衡点的。\n```\n\n#### 快速恢复算法 – Fast Recovery\nTCP Reno\n\n这个算法定义在RFC5681。快速重传和快速恢复算法一般同时使用。快速恢复算法是认为，你还有3个Duplicated Acks说明网络也不那么糟糕，所以没有必要像RTO超时那么强烈。 注意，正如前面所说，进入Fast Recovery之前，cwnd 和 sshthresh已被更新：\n```\ncwnd = cwnd /2\nsshthresh = cwnd\n然后，真正的Fast Recovery算法如下：\n\ncwnd = sshthresh  + 3 * MSS （3的意思是确认有3个数据包被收到了）\n重传Duplicated ACKs指定的数据包\n如果再收到 duplicated Acks，那么cwnd = cwnd +1\n如果收到了新的Ack，那么，cwnd = sshthresh ，然后就进入了拥塞避免的算法了。\n如果你仔细思考一下上面的这个算法，你就会知道，上面这个算法也有问题，那就是——它依赖于3个重复的Acks。注意，3个重复的Acks并不代表只丢了一个数据包，很有可能是丢了好多包。但这个算法只会重传一个，而剩下的那些包只能等到RTO超时，于是，进入了恶梦模式——超时一个窗口就减半一下，多个超时会超成TCP的传输速度呈级数下降，而且也不会触发Fast Recovery算法了。\n\n通常来说，正如我们前面所说的，SACK或D-SACK的方法可以让Fast Recovery或Sender在做决定时更聪明一些，但是并不是所有的TCP的实现都支持SACK（SACK需要两端都支持），所以，需要一个没有SACK的解决方案。而通过SACK进行拥塞控制的算法是FACK（后面会讲）\n```\n","slug":"tcp学习下-2018-07-26","published":1,"updated":"2018-07-30T03:52:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk7vj0il000hhd39m7nbekzr"},{"title":"字符串反转","date":"2018-02-05T14:36:02.000Z","_content":"\n## 以下为字符串反转的几种方法\n\n### 遍历字符数组\n\n```java\n\n    public static void reverse3(String src){\n        if(src==null){\n            throw new IllegalArgumentException(src);\n        }\n        int length=src.length();\n        char[] srcChar=src.toCharArray();\n        for(int i=0;i<length/2;i++){\n            char temp=srcChar[i];\n            srcChar[i]=srcChar[length-i-1];\n            srcChar[length-i-1]=temp;\n        }\n        System.out.println(new String(srcChar));\n    }\n\n\n\n    public static void reverse1(String src){\n        if(src==null){\n            throw new IllegalArgumentException(src);\n        }\n        int length=src.length();\n        char[] dest=new char[length];\n        char[] srcChar=src.toCharArray();\n        for(int i=0;i<length;i++){\n            dest[i]=srcChar[length-i-1];\n        }\n        System.out.println(new String(dest));\n    }\n```\n\n### 递归\n\n```java\n public static String reverse4(String src){\n        if(src==null){\n            throw new IllegalArgumentException(src);\n        }\n        int length=src.length();\n        if(length<=1){\n            return src;\n        }\n        String left=src.substring(0,length/2);\n        String right=src.substring(length/2,length);\n        return reverse4(right)+reverse4(left);\n\n    }\n\n\n```\n\n### 使用StringBuffer\n\n```java\n\n public static void reverse2(String src){\n        if(src==null){\n            throw new IllegalArgumentException(src);\n        }\n        StringBuffer sb=new StringBuffer(src);\n        sb.reverse();\n        System.out.println(sb.toString());\n    }\n\n```","source":"_posts/字符串反转.md","raw":"---\ntitle: 字符串反转\ndate: 2018-02-05 22:36:02\ntags: 工具\ncategories: java\n---\n\n## 以下为字符串反转的几种方法\n\n### 遍历字符数组\n\n```java\n\n    public static void reverse3(String src){\n        if(src==null){\n            throw new IllegalArgumentException(src);\n        }\n        int length=src.length();\n        char[] srcChar=src.toCharArray();\n        for(int i=0;i<length/2;i++){\n            char temp=srcChar[i];\n            srcChar[i]=srcChar[length-i-1];\n            srcChar[length-i-1]=temp;\n        }\n        System.out.println(new String(srcChar));\n    }\n\n\n\n    public static void reverse1(String src){\n        if(src==null){\n            throw new IllegalArgumentException(src);\n        }\n        int length=src.length();\n        char[] dest=new char[length];\n        char[] srcChar=src.toCharArray();\n        for(int i=0;i<length;i++){\n            dest[i]=srcChar[length-i-1];\n        }\n        System.out.println(new String(dest));\n    }\n```\n\n### 递归\n\n```java\n public static String reverse4(String src){\n        if(src==null){\n            throw new IllegalArgumentException(src);\n        }\n        int length=src.length();\n        if(length<=1){\n            return src;\n        }\n        String left=src.substring(0,length/2);\n        String right=src.substring(length/2,length);\n        return reverse4(right)+reverse4(left);\n\n    }\n\n\n```\n\n### 使用StringBuffer\n\n```java\n\n public static void reverse2(String src){\n        if(src==null){\n            throw new IllegalArgumentException(src);\n        }\n        StringBuffer sb=new StringBuffer(src);\n        sb.reverse();\n        System.out.println(sb.toString());\n    }\n\n```","slug":"字符串反转","published":1,"updated":"2018-02-05T14:40:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk7vj0im000jhd39csoeb4c0"},{"title":"设计模式之对象池模式","date":"2018-07-20T00:36:02.000Z","_content":"\n## 设计模式之对象池模式\n* 23中模式之外的新模式\n\n### 简介\n对象池模式就是依赖于内存中的对象池（在应用启动时进行初始化），通过循环使用对象，减少资源初始化、以及销毁的昂贵损耗！典型的例子是：线程池、连接池\n\n\n### 类图\n![对象池](/images/2018-07-19-3.png)\n<center>对象池</center>\n\n\n\n### 最佳实践\n只有在重复生成对象的操作成为影响性能的关键因素时，才适合进行对象池化，但是若池化带来性能提高并不显著或重要的话，建议放弃对象池化技术。\n\n\n### 代码\n```\npackage com.bj.hz.pool;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 8:41 PM\n */\npublic abstract class Pool <T>{\n    private  Map<T,ObjectStatus> pool=new HashMap();\n\n    public Pool() {\n        pool.put(create(),new ObjectStatus());\n    }\n\n    public synchronized T checkout(){\n        for (T t:pool.keySet()){\n            if (!pool.get(t).isIsuse()){\n                pool.get(t).setIsuse(true);\n                return t;\n            }\n        }\n        return null;\n    }\n\n\n    public synchronized void checkIn(T t){\n        pool.get(t).setIsuse(false);\n    }\n\n    public abstract T create();\n\n    private static class ObjectStatus{\n        private boolean isuse;\n\n        public boolean isIsuse() {\n            return isuse;\n        }\n\n        public void setIsuse(boolean isuse) {\n            this.isuse = isuse;\n        }\n\n\n\n    }\n}\n```","source":"_posts/对象池模式-2018-07-20.md","raw":"---\ntitle: 设计模式之对象池模式\ndate: 2018-07-20 08:36:02\ntags: 设计模式\ncategories: \"power design\"\n---\n\n## 设计模式之对象池模式\n* 23中模式之外的新模式\n\n### 简介\n对象池模式就是依赖于内存中的对象池（在应用启动时进行初始化），通过循环使用对象，减少资源初始化、以及销毁的昂贵损耗！典型的例子是：线程池、连接池\n\n\n### 类图\n![对象池](/images/2018-07-19-3.png)\n<center>对象池</center>\n\n\n\n### 最佳实践\n只有在重复生成对象的操作成为影响性能的关键因素时，才适合进行对象池化，但是若池化带来性能提高并不显著或重要的话，建议放弃对象池化技术。\n\n\n### 代码\n```\npackage com.bj.hz.pool;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 8:41 PM\n */\npublic abstract class Pool <T>{\n    private  Map<T,ObjectStatus> pool=new HashMap();\n\n    public Pool() {\n        pool.put(create(),new ObjectStatus());\n    }\n\n    public synchronized T checkout(){\n        for (T t:pool.keySet()){\n            if (!pool.get(t).isIsuse()){\n                pool.get(t).setIsuse(true);\n                return t;\n            }\n        }\n        return null;\n    }\n\n\n    public synchronized void checkIn(T t){\n        pool.get(t).setIsuse(false);\n    }\n\n    public abstract T create();\n\n    private static class ObjectStatus{\n        private boolean isuse;\n\n        public boolean isIsuse() {\n            return isuse;\n        }\n\n        public void setIsuse(boolean isuse) {\n            this.isuse = isuse;\n        }\n\n\n\n    }\n}\n```","slug":"对象池模式-2018-07-20","published":1,"updated":"2018-07-19T23:22:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk7vj0in000mhd39fhxbkgov"},{"title":"设计模式之空对象模式","date":"2018-07-23T00:36:02.000Z","_content":"\n## 设计模式之空对象模式\n* 23中模式之外的新模式\n\n### 简介\n通过实现一个默认的无意义对象类避免null值实现\n\n### 最佳实践\n* 就是指定默认的一个映射对象，方法不实现，默认为空，与实际对象实现同一个接口，这样在源头中解决null值\n* 使用类似于Option这样的对象，获取时判断有值没，再获取\n","source":"_posts/空对象模式-2018-07-23.md","raw":"---\ntitle: 设计模式之空对象模式\ndate: 2018-07-23 08:36:02\ntags: 空对象模式\ncategories: \"power design\"\n---\n\n## 设计模式之空对象模式\n* 23中模式之外的新模式\n\n### 简介\n通过实现一个默认的无意义对象类避免null值实现\n\n### 最佳实践\n* 就是指定默认的一个映射对象，方法不实现，默认为空，与实际对象实现同一个接口，这样在源头中解决null值\n* 使用类似于Option这样的对象，获取时判断有值没，再获取\n","slug":"空对象模式-2018-07-23","published":1,"updated":"2018-07-30T06:09:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk7vj0iq000phd39p427c6ai"},{"title":"设计模式之规格模式","date":"2018-07-19T14:36:02.000Z","_content":"\n## 设计模式之规格模式\n* 23中模式之外的新模式\n\n### 简介\n在一系列对象中根据条件搜索！类似sql，但不同的是从内存中的对象进行搜索\n具体类似于LINQ（Language Integrated Query）语言集成查询\n\n### 初步实践\n> 1.创建一个接口，实现按照某种条件筛选：IUserProvider\n  2.实现以上接口:UserProvider，通过具体的对象类进行抽象方法的实现（例如：遍历实体类数组，进行判断，然后返回结果数组或列表）\n  3.实现具体对象，类似User实体类\n  4.实现场景类，初始化一个拥有User的数组或列表，实例化UserProvider，并使用相关方法，获取结果\n\n* 请注意以上实现，我们可以发现一旦业务发生变更，我们需要改对应的接口方法、需要实现对应的接口，很不容易进行扩展。\n\n* 第二种：那么我们是否可以将对应的搜索条件进行封装，创建一个接口：IUserSpecification，定义是否满足的方法，返回bool值，这样就可以在多种条件下（业务变更等），进行无缝扩展。只用实现该接口，就可以扩展多个条件类。\n\n* 对于类似于sql的多个条件查询下，在数据量大的情况下容易造成性能较差，因为需要经过好多轮循环\n\n* 第三种：可以知道一般条件组合，基本离不开与或非、这三种模式是固定的，我们可以通过这三种模式进行统一的条件封装。\n> 1.我们创建一个条件规格接口：IUserSpecification,实现判断是否满足，返回bool值\n  2.创建一个抽象类实现IUserSpecification：ComposionSpecificaiton，并且通过模板方法实现与或非三种条件规格的生成，具体接口的实现由具体类来实现。此抽象类依赖于具体的实现（请按照实际情况分析，不要死学）\n  3.继承ComposionSpecificaiton，实现具体的判断方法\n  4.在场景类中，通过条件规格的实现类，使用与或非方法对多个条件进行封装，然后进行计算\n\n#### 第三种方法最优，使用了组合模式、策略模式、模板模式这三种模式组合成了规格模式。\n\n### 类图\n\n![第二种类图](/images/2018-07-19-2.jpg)\n<center>第二种类图</center>\n\n![第三种类图](/images/2018-07-19-1.jpg)\n<center>第三种类图</center>\n\n\n### 以下为代码\n\n* 定义一个用户：\n```\npackage com.bj.hz.specification.very;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-18\n * @time: 9:48 PM\n */\npublic class User {\n    private String name;\n    private int age;\n\n    public User(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"name='\" + name + '\\'' +\n                \", age=\" + age +\n                '}';\n    }\n}\n\n```\n* 定义一个查询提供类接口以及实现\n\n```\npackage com.bj.hz.specification.very;\n\n\nimport java.util.ArrayList;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-18\n * @time: 10:07 PM\n */\npublic interface IUserProvider {\n    ArrayList<User> findUser(IUserSpecification specification);\n}\n\n```\n* 提供实现\n```\npackage com.bj.hz.specification.very;\n\n\n\nimport java.util.ArrayList;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-18\n * @time: 10:09 PM\n */\npublic class UserProvider implements IUserProvider {\n\n    private ArrayList<User> users;\n\n    public UserProvider(ArrayList<User> users) {\n        this.users = users;\n    }\n\n    @Override\n    public ArrayList<User> findUser(IUserSpecification specification) {\n        ArrayList<User> result=new ArrayList<>();\n        for (User u:users){\n            if (specification.isSatisfiedBy(u)){\n                result.add(u);\n            }\n        }\n        return result;\n    }\n}\n\n```\n* 规格条件接口\n```\npackage com.bj.hz.specification.very;\n\n/**\n * Created with hzz\n * Description:为了适应未来变化的需求，将运算封装到接口之内\n *\n * @author: huangzhe\n * @date: 2018-07-18\n * @time: 10:02 PM\n */\npublic interface IUserSpecification {\n    public boolean isSatisfiedBy(User user);\n}\n\n```\n* 组合模式的接口，其实可以定义三个装饰器（请自行想象）分别实现 与或非\n```\npackage com.bj.hz.specification.very;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:06 AM\n */\npublic abstract class AbstractComposition implements IUserSpecification {\n\n\n\n    public IUserSpecification and(IUserSpecification userSpecification){\n        return new AndSpecification(this,userSpecification);\n    }\n\n    public IUserSpecification or(IUserSpecification userSpecification){\n        return new OrSpecification(this,userSpecification);\n    }\n    public IUserSpecification not(IUserSpecification userSpecification){\n        return new NotSpecification(this);\n    }\n\n}\n\n```\n* 分别是与或非实现\n\n```\npackage com.bj.hz.specification.very;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:08 AM\n */\npublic class AndSpecification extends AbstractComposition {\n\n    private IUserSpecification _left;\n    private IUserSpecification _right;\n\n    public AndSpecification(IUserSpecification _left, IUserSpecification _right) {\n        this._left = _left;\n        this._right = _right;\n    }\n\n    @Override\n    public boolean isSatisfiedBy(User user) {\n        return _left.isSatisfiedBy(user) && _right.isSatisfiedBy(user);\n    }\n}\n\n\n```\n\n```\npackage com.bj.hz.specification.very;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:09 AM\n */\npublic class OrSpecification extends AbstractComposition {\n\n    private IUserSpecification _left;\n    private IUserSpecification _right;\n\n    public OrSpecification(IUserSpecification _left, IUserSpecification _right) {\n        this._left = _left;\n        this._right = _right;\n    }\n\n    @Override\n    public boolean isSatisfiedBy(User user) {\n        return _left.isSatisfiedBy(user) || _right.isSatisfiedBy(user);\n    }\n}\n\n```\n\n```\npackage com.bj.hz.specification.very;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:10 AM\n */\npublic class NotSpecification extends AbstractComposition {\n\n    private IUserSpecification userSpecification;\n\n    public NotSpecification(IUserSpecification userSpecification) {\n        this.userSpecification = userSpecification;\n    }\n\n    @Override\n    public boolean isSatisfiedBy(User user) {\n        return !userSpecification.isSatisfiedBy(user);\n    }\n}\n\n```\n* 根据名称查询\n```\npackage com.bj.hz.specification.very;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:29 AM\n */\npublic class FindByNameSpecification extends AbstractComposition {\n\n    private String name;\n\n    public FindByNameSpecification(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public boolean isSatisfiedBy(User user) {\n        return user.getName().equals(name);\n    }\n}\n\n```\n* 根据大于给定的年龄查询\n```\npackage com.bj.hz.specification.very;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:31 AM\n */\npublic class FindByAgeThanSpecification extends AbstractComposition {\n\n    private int age;\n\n    public FindByAgeThanSpecification(int age) {\n        this.age = age;\n    }\n\n    @Override\n    public boolean isSatisfiedBy(User user) {\n        return user.getAge()>age;\n    }\n}\n\n```\n\n* 场景类具体实现\n```\npackage com.bj.hz.specification.very;\n\n\n\n\nimport java.util.ArrayList;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-18\n * @time: 10:12 PM\n */\npublic class Client {\n    public static void main(String[] args) {\n        ArrayList<User> users = new ArrayList<>();\n        users.add(new User(\"121\", 3));\n        users.add(new User(\"犁牛\", 10));\n        users.add(new User(\"测试\", 18));\n        users.add(new User(\"hah\", 16));\n        users.add(new User(\"黄啦啦\", 19));\n        users.add(new User(\"吴啦啦\", 20));\n        System.out.println(\"========年龄大于16的==========\");\n        IUserProvider userProvider=new UserProvider(users);\n        for (User user:userProvider.findUser(new FindByNameSpecification(\"hah\").and(new FindByAgeThanSpecification(14)))){\n            System.out.println(user);\n        }\n\n    }\n}\n\n```\n\n\n\n","source":"_posts/规格模式-2018-07-19.md","raw":"---\ntitle: 设计模式之规格模式\ndate: 2018-07-19 22:36:02\ntags: 设计模式\ncategories: \"power design\"\n---\n\n## 设计模式之规格模式\n* 23中模式之外的新模式\n\n### 简介\n在一系列对象中根据条件搜索！类似sql，但不同的是从内存中的对象进行搜索\n具体类似于LINQ（Language Integrated Query）语言集成查询\n\n### 初步实践\n> 1.创建一个接口，实现按照某种条件筛选：IUserProvider\n  2.实现以上接口:UserProvider，通过具体的对象类进行抽象方法的实现（例如：遍历实体类数组，进行判断，然后返回结果数组或列表）\n  3.实现具体对象，类似User实体类\n  4.实现场景类，初始化一个拥有User的数组或列表，实例化UserProvider，并使用相关方法，获取结果\n\n* 请注意以上实现，我们可以发现一旦业务发生变更，我们需要改对应的接口方法、需要实现对应的接口，很不容易进行扩展。\n\n* 第二种：那么我们是否可以将对应的搜索条件进行封装，创建一个接口：IUserSpecification，定义是否满足的方法，返回bool值，这样就可以在多种条件下（业务变更等），进行无缝扩展。只用实现该接口，就可以扩展多个条件类。\n\n* 对于类似于sql的多个条件查询下，在数据量大的情况下容易造成性能较差，因为需要经过好多轮循环\n\n* 第三种：可以知道一般条件组合，基本离不开与或非、这三种模式是固定的，我们可以通过这三种模式进行统一的条件封装。\n> 1.我们创建一个条件规格接口：IUserSpecification,实现判断是否满足，返回bool值\n  2.创建一个抽象类实现IUserSpecification：ComposionSpecificaiton，并且通过模板方法实现与或非三种条件规格的生成，具体接口的实现由具体类来实现。此抽象类依赖于具体的实现（请按照实际情况分析，不要死学）\n  3.继承ComposionSpecificaiton，实现具体的判断方法\n  4.在场景类中，通过条件规格的实现类，使用与或非方法对多个条件进行封装，然后进行计算\n\n#### 第三种方法最优，使用了组合模式、策略模式、模板模式这三种模式组合成了规格模式。\n\n### 类图\n\n![第二种类图](/images/2018-07-19-2.jpg)\n<center>第二种类图</center>\n\n![第三种类图](/images/2018-07-19-1.jpg)\n<center>第三种类图</center>\n\n\n### 以下为代码\n\n* 定义一个用户：\n```\npackage com.bj.hz.specification.very;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-18\n * @time: 9:48 PM\n */\npublic class User {\n    private String name;\n    private int age;\n\n    public User(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"name='\" + name + '\\'' +\n                \", age=\" + age +\n                '}';\n    }\n}\n\n```\n* 定义一个查询提供类接口以及实现\n\n```\npackage com.bj.hz.specification.very;\n\n\nimport java.util.ArrayList;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-18\n * @time: 10:07 PM\n */\npublic interface IUserProvider {\n    ArrayList<User> findUser(IUserSpecification specification);\n}\n\n```\n* 提供实现\n```\npackage com.bj.hz.specification.very;\n\n\n\nimport java.util.ArrayList;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-18\n * @time: 10:09 PM\n */\npublic class UserProvider implements IUserProvider {\n\n    private ArrayList<User> users;\n\n    public UserProvider(ArrayList<User> users) {\n        this.users = users;\n    }\n\n    @Override\n    public ArrayList<User> findUser(IUserSpecification specification) {\n        ArrayList<User> result=new ArrayList<>();\n        for (User u:users){\n            if (specification.isSatisfiedBy(u)){\n                result.add(u);\n            }\n        }\n        return result;\n    }\n}\n\n```\n* 规格条件接口\n```\npackage com.bj.hz.specification.very;\n\n/**\n * Created with hzz\n * Description:为了适应未来变化的需求，将运算封装到接口之内\n *\n * @author: huangzhe\n * @date: 2018-07-18\n * @time: 10:02 PM\n */\npublic interface IUserSpecification {\n    public boolean isSatisfiedBy(User user);\n}\n\n```\n* 组合模式的接口，其实可以定义三个装饰器（请自行想象）分别实现 与或非\n```\npackage com.bj.hz.specification.very;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:06 AM\n */\npublic abstract class AbstractComposition implements IUserSpecification {\n\n\n\n    public IUserSpecification and(IUserSpecification userSpecification){\n        return new AndSpecification(this,userSpecification);\n    }\n\n    public IUserSpecification or(IUserSpecification userSpecification){\n        return new OrSpecification(this,userSpecification);\n    }\n    public IUserSpecification not(IUserSpecification userSpecification){\n        return new NotSpecification(this);\n    }\n\n}\n\n```\n* 分别是与或非实现\n\n```\npackage com.bj.hz.specification.very;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:08 AM\n */\npublic class AndSpecification extends AbstractComposition {\n\n    private IUserSpecification _left;\n    private IUserSpecification _right;\n\n    public AndSpecification(IUserSpecification _left, IUserSpecification _right) {\n        this._left = _left;\n        this._right = _right;\n    }\n\n    @Override\n    public boolean isSatisfiedBy(User user) {\n        return _left.isSatisfiedBy(user) && _right.isSatisfiedBy(user);\n    }\n}\n\n\n```\n\n```\npackage com.bj.hz.specification.very;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:09 AM\n */\npublic class OrSpecification extends AbstractComposition {\n\n    private IUserSpecification _left;\n    private IUserSpecification _right;\n\n    public OrSpecification(IUserSpecification _left, IUserSpecification _right) {\n        this._left = _left;\n        this._right = _right;\n    }\n\n    @Override\n    public boolean isSatisfiedBy(User user) {\n        return _left.isSatisfiedBy(user) || _right.isSatisfiedBy(user);\n    }\n}\n\n```\n\n```\npackage com.bj.hz.specification.very;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:10 AM\n */\npublic class NotSpecification extends AbstractComposition {\n\n    private IUserSpecification userSpecification;\n\n    public NotSpecification(IUserSpecification userSpecification) {\n        this.userSpecification = userSpecification;\n    }\n\n    @Override\n    public boolean isSatisfiedBy(User user) {\n        return !userSpecification.isSatisfiedBy(user);\n    }\n}\n\n```\n* 根据名称查询\n```\npackage com.bj.hz.specification.very;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:29 AM\n */\npublic class FindByNameSpecification extends AbstractComposition {\n\n    private String name;\n\n    public FindByNameSpecification(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public boolean isSatisfiedBy(User user) {\n        return user.getName().equals(name);\n    }\n}\n\n```\n* 根据大于给定的年龄查询\n```\npackage com.bj.hz.specification.very;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:31 AM\n */\npublic class FindByAgeThanSpecification extends AbstractComposition {\n\n    private int age;\n\n    public FindByAgeThanSpecification(int age) {\n        this.age = age;\n    }\n\n    @Override\n    public boolean isSatisfiedBy(User user) {\n        return user.getAge()>age;\n    }\n}\n\n```\n\n* 场景类具体实现\n```\npackage com.bj.hz.specification.very;\n\n\n\n\nimport java.util.ArrayList;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-18\n * @time: 10:12 PM\n */\npublic class Client {\n    public static void main(String[] args) {\n        ArrayList<User> users = new ArrayList<>();\n        users.add(new User(\"121\", 3));\n        users.add(new User(\"犁牛\", 10));\n        users.add(new User(\"测试\", 18));\n        users.add(new User(\"hah\", 16));\n        users.add(new User(\"黄啦啦\", 19));\n        users.add(new User(\"吴啦啦\", 20));\n        System.out.println(\"========年龄大于16的==========\");\n        IUserProvider userProvider=new UserProvider(users);\n        for (User user:userProvider.findUser(new FindByNameSpecification(\"hah\").and(new FindByAgeThanSpecification(14)))){\n            System.out.println(user);\n        }\n\n    }\n}\n\n```\n\n\n\n","slug":"规格模式-2018-07-19","published":1,"updated":"2018-07-19T23:22:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk7vj0is000shd39x85bze8h"},{"title":"读源码注意的东西","date":"2018-02-06T08:00:24.000Z","_content":"## 修改相关\n###### 2018/2/6  创建\n\n## 怎样读源码，该注意什么问题\n\n*前提：读懂源码的动机与原因是什么。*\n     *看下该项目的设计文档与架构图，宏观上对一些概念有些认识*\n     *从感兴趣的点设置断点、开始debug*\n\n\n* 了解语言\n* 了解设计模式\n* 了解命名习惯-统一规约\n* 是了解整体架构，而不是地毯式遍历每一行代码\n* 了解架构： 从上至下（要有层次感） 层级、每个层级由多个角色构成，角色的互动\n    系统如何初始化（为接下来的所有任务做准备）-> 系统的相关的其他系统（界面等||设定系统的边界）-> 系统如何反应事件-> 系统如何处理异常与错误\n\n","source":"_posts/读源码注意的东西.md","raw":"---\ntitle: 读源码注意的东西\ndate: 2018-02-06 16:00:24\ntags: [\"源码\",\"方法\"]\ncategories: \"java\"\n---\n## 修改相关\n###### 2018/2/6  创建\n\n## 怎样读源码，该注意什么问题\n\n*前提：读懂源码的动机与原因是什么。*\n     *看下该项目的设计文档与架构图，宏观上对一些概念有些认识*\n     *从感兴趣的点设置断点、开始debug*\n\n\n* 了解语言\n* 了解设计模式\n* 了解命名习惯-统一规约\n* 是了解整体架构，而不是地毯式遍历每一行代码\n* 了解架构： 从上至下（要有层次感） 层级、每个层级由多个角色构成，角色的互动\n    系统如何初始化（为接下来的所有任务做准备）-> 系统的相关的其他系统（界面等||设定系统的边界）-> 系统如何反应事件-> 系统如何处理异常与错误\n\n","slug":"读源码注意的东西","published":1,"updated":"2018-02-06T08:07:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk7vj0iu000uhd39bg1ph0re"},{"title":"设计模式之雇工模式","date":"2018-07-21T00:36:02.000Z","_content":"\n## 设计模式之雇工模式\n* 23中模式之外的新模式\n\n### 简介\n雇工模式也叫做仆人模式：雇工模式是行为模式的一种，它为一组类提供通用的功能，而不需要类实现这些功能，他是命令模式的一种扩展。\n> 类似于厨师、裁缝、园丁等都是一组类，具有清洁的能力，但是我们并没有实现，使用雇工模式，就是简化版的命令模式。让被服务对象实现具体的方法，使用雇工来干活\n\n### 类图\n![雇工模式示意图](/images/designPattern/2018-07-19-4.png)\n<center>雇工模式示意图</center>\n\n### 代码\n\n具有一组能力的对象，以及对应对象的实现\nIserviced\n```\npackage com.bj.hz.hire;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:08 PM\n */\npublic interface Iserviced {\n    public void cleaned();\n}\n\n\npackage com.bj.hz.hire;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:15 PM\n */\npublic class Garden implements Iserviced {\n    @Override\n    public void cleaned() {\n        System.out.println(\"花园被打扫了\");\n    }\n}\n\n\n\npackage com.bj.hz.hire;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:17 PM\n */\npublic class Kitchen implements Iserviced {\n    @Override\n    public void cleaned() {\n        System.out.println(\"厨房被打扫了\");\n    }\n}\n\n\n```\n\n雇工 Servant\n```\npackage com.bj.hz.hire;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:14 PM\n */\npublic class ServantHire {\n    public void clean(Iserviced serviced){\n        serviced.cleaned();\n    }\n}\n```\n\n场景类\nCient\n```\npackage com.bj.hz.hire;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:15 PM\n */\npublic class Client {\n    public static void main(String[] args) {\n\n    }\n}\n```\n\n\n\n","source":"_posts/雇工模式-2018-07-21.md","raw":"---\ntitle: 设计模式之雇工模式\ndate: 2018-07-21 08:36:02\ntags: 雇工模式\ncategories: \"power design\"\n---\n\n## 设计模式之雇工模式\n* 23中模式之外的新模式\n\n### 简介\n雇工模式也叫做仆人模式：雇工模式是行为模式的一种，它为一组类提供通用的功能，而不需要类实现这些功能，他是命令模式的一种扩展。\n> 类似于厨师、裁缝、园丁等都是一组类，具有清洁的能力，但是我们并没有实现，使用雇工模式，就是简化版的命令模式。让被服务对象实现具体的方法，使用雇工来干活\n\n### 类图\n![雇工模式示意图](/images/designPattern/2018-07-19-4.png)\n<center>雇工模式示意图</center>\n\n### 代码\n\n具有一组能力的对象，以及对应对象的实现\nIserviced\n```\npackage com.bj.hz.hire;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:08 PM\n */\npublic interface Iserviced {\n    public void cleaned();\n}\n\n\npackage com.bj.hz.hire;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:15 PM\n */\npublic class Garden implements Iserviced {\n    @Override\n    public void cleaned() {\n        System.out.println(\"花园被打扫了\");\n    }\n}\n\n\n\npackage com.bj.hz.hire;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:17 PM\n */\npublic class Kitchen implements Iserviced {\n    @Override\n    public void cleaned() {\n        System.out.println(\"厨房被打扫了\");\n    }\n}\n\n\n```\n\n雇工 Servant\n```\npackage com.bj.hz.hire;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:14 PM\n */\npublic class ServantHire {\n    public void clean(Iserviced serviced){\n        serviced.cleaned();\n    }\n}\n```\n\n场景类\nCient\n```\npackage com.bj.hz.hire;\n\n/**\n * Created with hzz\n * Description:\n *\n * @author: huangzhe\n * @date: 2018-07-19\n * @time: 9:15 PM\n */\npublic class Client {\n    public static void main(String[] args) {\n\n    }\n}\n```\n\n\n\n","slug":"雇工模式-2018-07-21","published":1,"updated":"2018-07-30T06:09:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk7vj0iv000xhd396bc9qmpm"},{"title":"设计模式之黑板模式","date":"2018-07-22T00:36:02.000Z","_content":"\n## 设计模式之黑板模式\n* 23中模式之外的新模式\n\n### 简介\n黑板模式是观察者模式的一个扩展，允许消息的读写同时进行，广泛地交互消息\n就像一个黑板，任何一个老师都可以写东西，同学都可以看东西，在时间上和空间上彻底解耦\n\n\n### 示意图\n![黑板模式示意图](/images/designPattern/2018-07-22-1.png)\n<center>黑板模式示意图</center>\n\n### 最佳实践\n* 使用数据库作为黑板，大量消息访问下回影响性能。\n* 使用消息队列作为黑板，订阅发布式\n\n> 消息队列：使用推模式、拉模式实现，具体请参考一些消息队列，kafka\n\n","source":"_posts/黑板模式-2018-07-22.md","raw":"---\ntitle: 设计模式之黑板模式\ndate: 2018-07-22 08:36:02\ntags: 黑板模式\ncategories: \"power design\"\n---\n\n## 设计模式之黑板模式\n* 23中模式之外的新模式\n\n### 简介\n黑板模式是观察者模式的一个扩展，允许消息的读写同时进行，广泛地交互消息\n就像一个黑板，任何一个老师都可以写东西，同学都可以看东西，在时间上和空间上彻底解耦\n\n\n### 示意图\n![黑板模式示意图](/images/designPattern/2018-07-22-1.png)\n<center>黑板模式示意图</center>\n\n### 最佳实践\n* 使用数据库作为黑板，大量消息访问下回影响性能。\n* 使用消息队列作为黑板，订阅发布式\n\n> 消息队列：使用推模式、拉模式实现，具体请参考一些消息队列，kafka\n\n","slug":"黑板模式-2018-07-22","published":1,"updated":"2018-07-30T06:09:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk7vj0ix000zhd39o13jkvh8"}],"PostAsset":[],"PostCategory":[{"post_id":"cjk7vj0ic0007hd39je8qa0o5","category_id":"cjk7vj0ik000ghd39tfxolr57","_id":"cjk7vj0ir000qhd39keoeya8x"},{"post_id":"cjk7vj0i70003hd39lprt919x","category_id":"cjk7vj0ib0006hd39i4uqnhlf","_id":"cjk7vj0iy0011hd39nspd1lr3"},{"post_id":"cjk7vj0i70003hd39lprt919x","category_id":"cjk7vj0ir000rhd396k4sz8ei","_id":"cjk7vj0iy0013hd39bi4m75qf"},{"post_id":"cjk7vj0if000bhd395lrw3v4c","category_id":"cjk7vj0ib0006hd39i4uqnhlf","_id":"cjk7vj0iz0015hd39rz754v62"},{"post_id":"cjk7vj0if000bhd395lrw3v4c","category_id":"cjk7vj0iv000whd39bslnueck","_id":"cjk7vj0iz0017hd39wne3t779"},{"post_id":"cjk7vj0ia0005hd39s3abjvuo","category_id":"cjk7vj0ib0006hd39i4uqnhlf","_id":"cjk7vj0j1001ehd39tpvjbtzh"},{"post_id":"cjk7vj0ia0005hd39s3abjvuo","category_id":"cjk7vj0ir000rhd396k4sz8ei","_id":"cjk7vj0j1001ghd39qqjz5g8d"},{"post_id":"cjk7vj0ij000fhd39j14qc651","category_id":"cjk7vj0iy0012hd39sbw0rbar","_id":"cjk7vj0j2001khd39eev95drf"},{"post_id":"cjk7vj0im000jhd39csoeb4c0","category_id":"cjk7vj0j2001jhd39ssuoc2ys","_id":"cjk7vj0j2001nhd398fkicquk"},{"post_id":"cjk7vj0in000mhd39fhxbkgov","category_id":"cjk7vj0j2001mhd39m62tlocj","_id":"cjk7vj0j3001shd39h9ud37vr"},{"post_id":"cjk7vj0id0008hd39ybja77ns","category_id":"cjk7vj0in000khd39do67ft2i","_id":"cjk7vj0j5001zhd399qpwfj8z"},{"post_id":"cjk7vj0id0008hd39ybja77ns","category_id":"cjk7vj0j3001phd39r6fwatlc","_id":"cjk7vj0j60021hd3911bmk6a7"},{"post_id":"cjk7vj0iq000phd39p427c6ai","category_id":"cjk7vj0j2001mhd39m62tlocj","_id":"cjk7vj0j60024hd39ved1h2yx"},{"post_id":"cjk7vj0is000shd39x85bze8h","category_id":"cjk7vj0j2001mhd39m62tlocj","_id":"cjk7vj0j70027hd39qj17wc4n"},{"post_id":"cjk7vj0iu000uhd39bg1ph0re","category_id":"cjk7vj0j2001jhd39ssuoc2ys","_id":"cjk7vj0j8002bhd39vm0nna2x"},{"post_id":"cjk7vj0iv000xhd396bc9qmpm","category_id":"cjk7vj0j2001mhd39m62tlocj","_id":"cjk7vj0j9002fhd393sx83hp0"},{"post_id":"cjk7vj0ix000zhd39o13jkvh8","category_id":"cjk7vj0j2001mhd39m62tlocj","_id":"cjk7vj0j9002ihd3933o225bn"},{"post_id":"cjk7vj0ii000dhd39oyksc3cj","category_id":"cjk7vj0iy0012hd39sbw0rbar","_id":"cjk7vj0ja002mhd39kpo9g4q2"},{"post_id":"cjk7vj0ii000dhd39oyksc3cj","category_id":"cjk7vj0j8002ehd39b2hafg1z","_id":"cjk7vj0ja002ohd39942a91vn"},{"post_id":"cjk7vj0il000hhd39m7nbekzr","category_id":"cjk7vj0iy0012hd39sbw0rbar","_id":"cjk7vj0jb002phd39u6gl9ojl"},{"post_id":"cjk7vj0il000hhd39m7nbekzr","category_id":"cjk7vj0j8002ehd39b2hafg1z","_id":"cjk7vj0jb002rhd39kvoxkswm"}],"PostTag":[{"post_id":"cjk7vj0i40002hd39rxb3qys6","tag_id":"cjk7vj0i80004hd39orwbmap0","_id":"cjk7vj0if000ahd396g6q0m1z"},{"post_id":"cjk7vj0i70003hd39lprt919x","tag_id":"cjk7vj0ie0009hd39thm7k9eu","_id":"cjk7vj0in000lhd390ggozj74"},{"post_id":"cjk7vj0i70003hd39lprt919x","tag_id":"cjk7vj0ij000ehd39ifcgyh3g","_id":"cjk7vj0ip000nhd39nka4f3zk"},{"post_id":"cjk7vj0ia0005hd39s3abjvuo","tag_id":"cjk7vj0ij000ehd39ifcgyh3g","_id":"cjk7vj0iv000vhd3992869l90"},{"post_id":"cjk7vj0ia0005hd39s3abjvuo","tag_id":"cjk7vj0ip000ohd39ssg4azbj","_id":"cjk7vj0ix000yhd39ys93x178"},{"post_id":"cjk7vj0ic0007hd39je8qa0o5","tag_id":"cjk7vj0iu000thd39fsoi4kpr","_id":"cjk7vj0j0001ahd39h28p88ol"},{"post_id":"cjk7vj0ic0007hd39je8qa0o5","tag_id":"cjk7vj0iy0010hd39iiagka38","_id":"cjk7vj0j0001bhd39uzmosgqj"},{"post_id":"cjk7vj0ic0007hd39je8qa0o5","tag_id":"cjk7vj0iy0014hd39vzw9csb9","_id":"cjk7vj0j1001fhd396i3soxxv"},{"post_id":"cjk7vj0id0008hd39ybja77ns","tag_id":"cjk7vj0j00018hd39eglasmk6","_id":"cjk7vj0j1001hhd39huumolkn"},{"post_id":"cjk7vj0if000bhd395lrw3v4c","tag_id":"cjk7vj0j0001chd39sanqkafc","_id":"cjk7vj0j3001qhd398dm7usch"},{"post_id":"cjk7vj0if000bhd395lrw3v4c","tag_id":"cjk7vj0j1001ihd392zkrwxf8","_id":"cjk7vj0j3001rhd39npfxe4y6"},{"post_id":"cjk7vj0if000bhd395lrw3v4c","tag_id":"cjk7vj0j2001lhd39md9wperv","_id":"cjk7vj0j4001vhd39in0g1msk"},{"post_id":"cjk7vj0ii000dhd39oyksc3cj","tag_id":"cjk7vj0j3001ohd398crqvwei","_id":"cjk7vj0j4001whd39n0mw341p"},{"post_id":"cjk7vj0ij000fhd39j14qc651","tag_id":"cjk7vj0j3001ohd398crqvwei","_id":"cjk7vj0j60020hd39h2sd4r54"},{"post_id":"cjk7vj0il000hhd39m7nbekzr","tag_id":"cjk7vj0j3001ohd398crqvwei","_id":"cjk7vj0j70025hd398zhif4xj"},{"post_id":"cjk7vj0im000jhd39csoeb4c0","tag_id":"cjk7vj0j60022hd39pn4blj1w","_id":"cjk7vj0j70029hd3945vplrco"},{"post_id":"cjk7vj0in000mhd39fhxbkgov","tag_id":"cjk7vj0j70028hd39jzay23wv","_id":"cjk7vj0j8002dhd39rj0q06q7"},{"post_id":"cjk7vj0iq000phd39p427c6ai","tag_id":"cjk7vj0j8002chd39dl7np0eu","_id":"cjk7vj0j9002hhd39jb7c2tng"},{"post_id":"cjk7vj0is000shd39x85bze8h","tag_id":"cjk7vj0j70028hd39jzay23wv","_id":"cjk7vj0ja002lhd39oa0i6z9m"},{"post_id":"cjk7vj0iu000uhd39bg1ph0re","tag_id":"cjk7vj0ja002khd39woq2cqfu","_id":"cjk7vj0jb002shd39srzqkioj"},{"post_id":"cjk7vj0iu000uhd39bg1ph0re","tag_id":"cjk7vj0ja002nhd39fnk2jy5k","_id":"cjk7vj0jb002thd39fj8w09jy"},{"post_id":"cjk7vj0iv000xhd396bc9qmpm","tag_id":"cjk7vj0jb002qhd39en8aoyn5","_id":"cjk7vj0jb002vhd39wpi12l52"},{"post_id":"cjk7vj0ix000zhd39o13jkvh8","tag_id":"cjk7vj0jb002uhd39nwip70to","_id":"cjk7vj0jc002whd39eh4xcdj1"}],"Tag":[{"name":"hexo","_id":"cjk7vj0i80004hd39orwbmap0"},{"name":"rsync","_id":"cjk7vj0ie0009hd39thm7k9eu"},{"name":"rm","_id":"cjk7vj0ij000ehd39ifcgyh3g"},{"name":"find","_id":"cjk7vj0ip000ohd39ssg4azbj"},{"name":"localtunnel","_id":"cjk7vj0iu000thd39fsoi4kpr"},{"name":"nginx","_id":"cjk7vj0iy0010hd39iiagka38"},{"name":"内网穿透","_id":"cjk7vj0iy0014hd39vzw9csb9"},{"name":"netty","_id":"cjk7vj0j00018hd39eglasmk6"},{"name":"solr","_id":"cjk7vj0j0001chd39sanqkafc"},{"name":"lucene","_id":"cjk7vj0j1001ihd392zkrwxf8"},{"name":"search","_id":"cjk7vj0j2001lhd39md9wperv"},{"name":"tcp","_id":"cjk7vj0j3001ohd398crqvwei"},{"name":"工具","_id":"cjk7vj0j60022hd39pn4blj1w"},{"name":"设计模式","_id":"cjk7vj0j70028hd39jzay23wv"},{"name":"空对象模式","_id":"cjk7vj0j8002chd39dl7np0eu"},{"name":"源码","_id":"cjk7vj0ja002khd39woq2cqfu"},{"name":"方法","_id":"cjk7vj0ja002nhd39fnk2jy5k"},{"name":"雇工模式","_id":"cjk7vj0jb002qhd39en8aoyn5"},{"name":"黑板模式","_id":"cjk7vj0jb002uhd39nwip70to"}]}}